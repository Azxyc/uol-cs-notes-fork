I"∑ <h2 id="function-types">Function Types</h2>
<p>Functions also have types in the type system. The type of a function is based on the values it takes as an argument and returns.</p>

<h3 id="single-argument-functions">Single Argument Functions</h3>
<p>For a one argument function, the type is written as:</p>

<div class="language-haskell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">[</span><span class="n">input</span> <span class="kr">type</span><span class="p">]</span> <span class="o">-&gt;</span> <span class="p">[</span><span class="n">output</span> <span class="kr">type</span><span class="p">]</span>
</code></pre></div></div>

<h3 id="multi-argument-functions">Multi-Argument Functions</h3>
<p>For a function with more than one argument, the type uses multiple <code class="language-plaintext highlighter-rouge">-&gt;</code>:</p>

<div class="language-haskell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">[</span><span class="n">input</span> <span class="kr">type</span><span class="p">]</span> <span class="o">-&gt;</span> <span class="p">[</span><span class="n">input</span> <span class="kr">type</span><span class="p">]</span> <span class="o">-&gt;</span> <span class="p">[</span><span class="n">output</span> <span class="kr">type</span><span class="p">]</span>
</code></pre></div></div>

<p>This makes sense as a Haskell function can only return a single type.</p>

<h3 id="partial-application">Partial Application</h3>
<p>In most functional languages, function can be <strong>partially applied</strong>. This means that you call a function with fewer arguments than are required.</p>

<div class="language-haskell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">plus</span> <span class="n">a</span> <span class="n">b</span> <span class="o">=</span> <span class="n">a</span> <span class="o">+</span> <span class="n">b</span>

<span class="n">plus2</span> <span class="o">=</span> <span class="n">plus</span> <span class="mi">2</span>

<span class="o">&gt;</span> <span class="n">plus2</span> <span class="mi">10</span>
<span class="o">&gt;</span> <span class="mi">12</span>

<span class="o">&gt;</span> <span class="n">plus2</span> <span class="mi">1</span>
<span class="o">&gt;</span> <span class="mi">3</span>
</code></pre></div></div>

<p>As you can see <strong>currying</strong> a function is the same as applying a permanent input to a function and leaving the other one open. This means that:</p>

<div class="language-haskell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">f</span> <span class="o">=</span> <span class="n">plus</span> <span class="mi">1</span>
</code></pre></div></div>

<p>is the same as:</p>

<div class="language-haskell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">f</span> <span class="n">x</span> <span class="o">=</span> <span class="n">plus</span> <span class="mi">1</span> <span class="n">x</span>
</code></pre></div></div>

<p>In partial application:</p>

<ul>
  <li>We fix some of the arguments.</li>
  <li>We leave other arguments unfixed.</li>
</ul>

<p>This creates a new function that only has the unfixed arguments.</p>

<h4 id="partial-application-types">Partial Application Types</h4>
<p>As the function made in a partial application just a function that takes the unfixed arguments, the inputs are the types of the unfixed arguments. For the functions:</p>

<div class="language-haskell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">func</span> <span class="n">a</span> <span class="n">b</span> <span class="n">c</span> <span class="o">=</span> <span class="n">a</span> <span class="o">+</span> <span class="n">b</span> <span class="o">+</span> <span class="n">c</span>

<span class="n">func2</span> <span class="o">=</span> <span class="n">func</span> <span class="mi">23</span>
</code></pre></div></div>

<p>The type would be <code class="language-plaintext highlighter-rouge">func2 :: Int -&gt; Int -&gt; Int</code>, as the unused arguments are carried over.</p>

<h4 id="argument-order">Argument Order</h4>
<p>The order of the partial application must follow the same order as the original function. This means that is makes more sense to use it on prefix functions:</p>

<div class="language-haskell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">f</span> <span class="o">=</span> <span class="p">(</span><span class="o">:</span><span class="p">)</span> <span class="mi">1</span>
</code></pre></div></div>

<p>This would allow you to cons <code class="language-plaintext highlighter-rouge">1</code> onto another list.</p>

<h4 id="partially-applying-infix-operators">Partially Applying Infix Operators</h4>
<p>To partially apply an infix operator see the following example:</p>

<div class="language-haskell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">f</span> <span class="o">=</span> <span class="p">(</span><span class="o">/</span><span class="mi">2</span><span class="p">)</span>
</code></pre></div></div>

<p>This will take a single input and divide it by two. As you can see the infix operator should be put in brackets.</p>

<h3 id="bracketing-for-function-types">Bracketing for Function Types</h3>
<p>Function application should be thought of multiple partial applications.</p>

<div class="language-haskell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">((</span><span class="n">multThree</span> <span class="n">x</span> <span class="n">y</span> <span class="n">z</span> <span class="o">=</span> <span class="n">x</span><span class="p">)</span> <span class="o">*</span> <span class="n">y</span><span class="p">)</span> <span class="o">*</span> <span class="n">z</span>
</code></pre></div></div>

<p>This means that the function type brackets to the right:</p>

<div class="language-haskell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">Int</span> <span class="o">-&gt;</span> <span class="kt">Int</span> <span class="o">-&gt;</span> <span class="kt">Int</span> <span class="o">-&gt;</span> <span class="kt">Int</span>
</code></pre></div></div>

<p>is the same as:</p>

<div class="language-haskell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">Int</span> <span class="o">-&gt;</span> <span class="p">(</span><span class="kt">Int</span> <span class="o">-&gt;</span> <span class="p">(</span><span class="kt">Int</span> <span class="o">-&gt;</span> <span class="kt">Int</span><span class="p">))</span>
</code></pre></div></div>

<p>This is a first look at a <em>higher order function</em>. This means that we are writing one argument functions that return other functions.</p>

<h3 id="multiple-arguments-vs-tuples">Multiple Arguments v.s. Tuples</h3>
<p>Previously we‚Äôve seen that you can write function in two ways:</p>

<ul>
  <li>Using usual ‚Äúspaces‚Äù syntax.</li>
  <li>Using tuples.</li>
</ul>

<div class="language-haskell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">multThree</span> <span class="n">x</span> <span class="n">y</span> <span class="n">z</span> <span class="o">=</span> <span class="n">x</span> <span class="o">*</span> <span class="n">y</span> <span class="o">*</span> <span class="n">z</span>
<span class="n">multThree'</span> <span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">,</span> <span class="n">z</span><span class="p">)</span> <span class="o">=</span> <span class="n">x</span> <span class="o">*</span> <span class="n">y</span> <span class="o">*</span> <span class="n">z</span>
</code></pre></div></div>

<p>These both do the same thing, but the second version cannot be partially applied. This means is is best to avoid tuples unless they are necessary.</p>

<h2 id="exercises">Exercises</h2>
<ol>
  <li><code class="language-plaintext highlighter-rouge">isA :: Char -&gt; Bool</code></li>
  <li><code class="language-plaintext highlighter-rouge">isADouble :: Char -&gt; Char -&gt; (Bool, Bool)</code></li>
  <li><code class="language-plaintext highlighter-rouge">exclaim :: [Char] -&gt; [Char]</code></li>
</ol>
:ET