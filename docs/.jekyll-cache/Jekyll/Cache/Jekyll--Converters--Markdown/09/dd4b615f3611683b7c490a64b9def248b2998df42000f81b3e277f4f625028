I"M<h2 id="map"><code class="language-plaintext highlighter-rouge">map</code></h2>
<p><code class="language-plaintext highlighter-rouge">map</code> applies a funciton <code class="language-plaintext highlighter-rouge">f</code> to every element in a list.</p>

<div class="language-haskell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">map'</span> <span class="o">::</span> <span class="p">(</span><span class="n">a</span> <span class="o">-&gt;</span> <span class="n">b</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="p">[</span><span class="n">a</span><span class="p">]</span> <span class="o">-&gt;</span> <span class="p">[</span><span class="n">b</span><span class="p">]</span>
<span class="n">map'</span> <span class="kr">_</span> <span class="kt">[]</span> <span class="o">=</span> <span class="kt">[]</span>
<span class="n">map'</span> <span class="n">f</span> <span class="p">(</span><span class="n">x</span><span class="o">:</span><span class="n">xs</span><span class="p">)</span> <span class="o">=</span> <span class="n">f</span> <span class="n">x</span> <span class="o">:</span> <span class="n">map'</span> <span class="n">f</span> <span class="n">xs</span>
</code></pre></div></div>

<p>This saves you from writing out the generic code for applying a function to a list. This allows you to implement the standard functions instead of having to make your own.</p>

<div class="language-haskell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">map</span> <span class="n">even</span> <span class="p">[</span><span class="mi">1</span><span class="o">..</span><span class="mi">5</span><span class="p">]</span>
<span class="o">&gt;</span> <span class="p">[</span><span class="kt">False</span><span class="p">,</span><span class="kt">True</span><span class="p">,</span><span class="kt">False</span><span class="p">,</span><span class="kt">True</span><span class="p">,</span><span class="kt">False</span><span class="p">]</span>
</code></pre></div></div>

<p>This avoids writing a recursive function for applying simple list operations.</p>

<h3 id="currying-and-map">Currying and <code class="language-plaintext highlighter-rouge">map</code></h3>
<p>It is common to use curried functions with <code class="language-plaintext highlighter-rouge">map</code>:</p>

<div class="language-haskell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">map</span> <span class="p">(</span><span class="o">*</span><span class="mi">2</span><span class="p">)</span> <span class="p">[</span><span class="mi">1</span><span class="o">..</span><span class="mi">5</span><span class="p">]</span>
<span class="o">&gt;</span> <span class="p">[</span><span class="mi">2</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">6</span><span class="p">,</span><span class="mi">8</span><span class="p">,</span><span class="mi">10</span><span class="p">]</span>
</code></pre></div></div>

<p>You can also use map to make other functions:</p>

<div class="language-haskell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">doubleList</span> <span class="o">=</span> <span class="n">map</span> <span class="p">(</span><span class="o">*</span><span class="mi">2</span><span class="p">)</span>

<span class="o">&gt;</span> <span class="n">doubleList</span> <span class="p">[</span><span class="mi">1</span><span class="o">..</span><span class="mi">5</span><span class="p">]</span>
<span class="o">&gt;</span> <span class="p">[</span><span class="mi">2</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">6</span><span class="p">,</span><span class="mi">8</span><span class="p">,</span><span class="mi">10</span><span class="p">]</span>
</code></pre></div></div>

<h3 id="anonymous-functions-and-map">Anonymous Functions and Map</h3>
<p>It is also common to use an anonymous functions with map:</p>

<div class="language-haskell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">map</span> <span class="p">(</span><span class="nf">\</span><span class="n">x</span> <span class="o">-&gt;</span> <span class="n">x</span> <span class="o">*</span> <span class="n">x</span><span class="p">)</span> <span class="p">[</span><span class="mi">1</span><span class="o">..</span><span class="mi">5</span><span class="p">]</span>
<span class="o">&gt;</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">9</span><span class="p">,</span> <span class="mi">16</span><span class="p">,</span> <span class="mi">25</span><span class="p">]</span>
</code></pre></div></div>

<p>This lets you apply your own functions to a list without having to define it.</p>

<h3 id="nested-maps">Nested Maps</h3>
<p>When working with nested lists, it is common to use nested maps.</p>

<div class="language-haskell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">map</span><span class="p">(</span><span class="n">map</span> <span class="p">(</span><span class="o">*</span><span class="mi">2</span><span class="p">))</span> <span class="p">[[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">],[</span><span class="mi">4</span><span class="p">,</span><span class="mi">5</span><span class="p">,</span><span class="mi">6</span><span class="p">],[</span><span class="mi">7</span><span class="p">,</span><span class="mi">8</span><span class="p">]]</span>
<span class="o">&gt;</span> <span class="p">[[</span><span class="mi">2</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">5</span><span class="p">],[</span><span class="mi">8</span><span class="p">,</span><span class="mi">10</span><span class="p">,</span><span class="mi">12</span><span class="p">],[</span><span class="mi">14</span><span class="p">,</span><span class="mi">16</span><span class="p">]]</span>

<span class="kr">import</span> <span class="nn">Data.Char</span>

<span class="n">map</span> <span class="p">(</span><span class="n">map</span> <span class="n">toUpper</span><span class="p">)</span> <span class="p">[</span><span class="s">"the"</span><span class="p">,</span><span class="s">"quick"</span><span class="p">,</span><span class="s">"brown"</span><span class="p">]</span>
<span class="p">[</span><span class="s">"THE"</span><span class="p">,</span><span class="s">"QUICK"</span><span class="p">,</span><span class="s">"BROWN"</span><span class="p">]</span>
</code></pre></div></div>

<p>This application uses currying in the inner map. It is also especially useful for lists containing strings.</p>

<h2 id="exercises">Exercises</h2>
<ol>
  <li><code class="language-plaintext highlighter-rouge">cubeList = map (^3)</code></li>
  <li><code class="language-plaintext highlighter-rouge">middleElem = map (\(_,x,_) -&gt; x)</code></li>
  <li><code class="language-plaintext highlighter-rouge">ruinStrings = map (map (\x -&gt; if x == 'e' then 'x' else x))</code></li>
</ol>
:ET