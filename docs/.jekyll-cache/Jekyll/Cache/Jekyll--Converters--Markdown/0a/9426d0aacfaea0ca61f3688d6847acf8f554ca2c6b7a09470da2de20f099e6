I"tJ<h2 id="more-complex-custom-types">More Complex Custom Types</h2>
<h3 id="more-complex-constructors">More Complex Constructors</h3>
<p>More complex constructors can contain other types.</p>

<div class="language-haskell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kr">data</span> <span class="kt">Point</span> <span class="o">=</span> <span class="kt">Point</span> <span class="kt">Int</span> <span class="kt">Int</span> <span class="kr">deriving</span> <span class="p">(</span><span class="kt">Show</span><span class="p">,</span> <span class="kt">Read</span><span class="p">,</span> <span class="kt">Eq</span><span class="p">)</span>
</code></pre></div></div>

<p>This is saying that the type <code class="language-plaintext highlighter-rouge">Point</code> has one constructor called <code class="language-plaintext highlighter-rouge">Point</code> and in that constructor there are two <code class="language-plaintext highlighter-rouge">Int</code>. The constructor name has no relation to the type name.</p>

<p class="info">It is common that if your type has only one constructor to call constructor the same name as the type.</p>

<div class="language-haskell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&gt;</span> <span class="kt">Point</span> <span class="mi">1</span> <span class="mi">4</span>
<span class="o">&gt;</span> <span class="kt">Point</span> <span class="mi">1</span> <span class="mi">4</span>

<span class="o">&gt;</span> <span class="n">read</span> <span class="s">"Point 10 10"</span> <span class="o">:</span> <span class="kt">Point</span>
<span class="o">&gt;</span> <span class="kt">Point</span> <span class="mi">10</span> <span class="mi">10</span>

<span class="o">&gt;</span> <span class="kt">Point</span> <span class="mi">2</span> <span class="mi">2</span> <span class="o">/=</span> <span class="kt">Point</span> <span class="mi">3</span> <span class="mi">1</span>
<span class="o">&gt;</span> <span class="kt">True</span>
</code></pre></div></div>

<p>It is also common to use pattern matching to work with complex constructors:</p>

<div class="language-haskell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">shift_up</span> <span class="p">(</span><span class="kt">Point</span> <span class="n">x</span> <span class="n">y</span><span class="p">)</span> <span class="o">=</span> <span class="kt">Point</span> <span class="n">x</span> <span class="p">(</span><span class="n">y</span> <span class="o">+</span><span class="mi">1</span><span class="p">)</span>
</code></pre></div></div>

<div class="language-haskell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&gt;</span> <span class="n">shift_up</span> <span class="p">(</span><span class="kt">Point</span> <span class="mi">1</span> <span class="mi">1</span><span class="p">)</span>
<span class="o">&gt;</span> <span class="kt">Point</span> <span class="mi">1</span> <span class="mi">2</span>

<span class="o">&gt;</span> <span class="o">:</span><span class="n">t</span> <span class="n">shift_up</span>
<span class="o">&gt;</span> <span class="n">shift_up</span> <span class="o">::</span> <span class="kt">Point</span> <span class="o">-&gt;</span> <span class="kt">Point</span>
</code></pre></div></div>

<h4 id="example">Example</h4>
<p>This example completes a computation using almost entirely our own custom types. We are also using pattern matching on our types:</p>

<div class="language-haskell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">move</span> <span class="o">::</span> <span class="kt">Point</span> <span class="o">-&gt;</span> <span class="kt">Direction</span> <span class="o">-&gt;</span> <span class="kt">Point</span>

<span class="n">move</span> <span class="p">(</span><span class="kt">Point</span> <span class="n">x</span> <span class="n">y</span><span class="p">)</span> <span class="kt">North</span> <span class="o">=</span> <span class="kt">Point</span> <span class="n">x</span> <span class="p">(</span><span class="n">y</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span>
<span class="n">move</span> <span class="p">(</span><span class="kt">Point</span> <span class="n">x</span> <span class="n">y</span><span class="p">)</span> <span class="kt">South</span> <span class="o">=</span> <span class="kt">Point</span> <span class="n">x</span> <span class="p">(</span><span class="n">y</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span>
<span class="n">move</span> <span class="p">(</span><span class="kt">Point</span> <span class="n">x</span> <span class="n">y</span><span class="p">)</span> <span class="kt">East</span> <span class="o">=</span> <span class="kt">Point</span> <span class="p">(</span><span class="n">x</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span> <span class="n">y</span>
<span class="n">move</span> <span class="p">(</span><span class="kt">Point</span> <span class="n">x</span> <span class="n">y</span><span class="p">)</span> <span class="kt">West</span> <span class="o">=</span> <span class="kt">Point</span> <span class="p">(</span><span class="n">x</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="n">y</span>
</code></pre></div></div>

<div class="language-haskell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&gt;</span> <span class="n">move</span> <span class="p">(</span><span class="kt">Point</span> <span class="mi">0</span> <span class="mi">0</span><span class="p">)</span> <span class="kt">North</span>
<span class="o">&gt;</span> <span class="kt">Point</span> <span class="mi">0</span> <span class="mi">1</span>
</code></pre></div></div>

<h3 id="more-complex-constructors-continued">More Complex Constructors Continued</h3>
<p>Types can have multiple constructors each of which can have their own types:</p>

<div class="language-haskell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kr">data</span> <span class="kt">Shape</span> <span class="o">=</span> <span class="n">circle</span> <span class="kt">Float</span> <span class="o">|</span> <span class="kt">Rect</span> <span class="kt">Float</span> <span class="kt">Float</span> <span class="kr">deriving</span> <span class="p">(</span><span class="kt">Show</span><span class="p">)</span>
</code></pre></div></div>

<div class="language-haskell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&gt;</span> <span class="o">:</span><span class="n">t</span> <span class="kt">Circle</span> <span class="mf">2.0</span>
<span class="o">&gt;</span> <span class="kt">Circle</span> <span class="mf">2.0</span> <span class="o">::</span> <span class="kt">Shape</span>

<span class="o">&gt;</span> <span class="o">:</span><span class="n">t</span> <span class="kt">Rect</span> <span class="mf">3.0</span> <span class="mf">4.0</span>
<span class="o">&gt;</span> <span class="kt">Rect</span> <span class="mf">3.0</span> <span class="mf">4.0</span> <span class="o">::</span> <span class="kt">Shape</span>
</code></pre></div></div>

<h4 id="example-1">Example</h4>

<div class="language-haskell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">area</span> <span class="o">::</span> <span class="kt">Shape</span> <span class="o">-&gt;</span> <span class="kt">Float</span>

<span class="n">area</span> <span class="p">(</span><span class="kt">Circle</span> <span class="n">radius</span><span class="p">)</span> <span class="o">=</span> <span class="n">pi</span> <span class="o">*</span> <span class="n">radius</span> <span class="o">**</span> <span class="mi">2</span>
<span class="n">area</span> <span class="p">(</span><span class="kt">Rect</span> <span class="n">x</span> <span class="n">y</span><span class="p">)</span> <span class="o">=</span> <span class="n">x</span> <span class="o">*</span> <span class="n">y</span>
</code></pre></div></div>

<div class="language-haskell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&gt;</span> <span class="n">area</span> <span class="p">(</span><span class="kt">Circle</span> <span class="mf">2.0</span><span class="p">)</span>
<span class="o">&gt;</span> <span class="mf">12.56371</span>

<span class="o">&gt;</span> <span class="n">area</span> <span class="p">(</span><span class="kt">Rect</span> <span class="mf">3.0</span> <span class="mf">4.0</span><span class="p">)</span>
<span class="o">&gt;</span> <span class="mf">12.0</span>
</code></pre></div></div>

<h3 id="records">Records</h3>
<p>You can use data types to build custom records:</p>

<div class="language-haskell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kr">data</span> <span class="kt">Person</span> <span class="o">=</span> <span class="kt">Person</span> <span class="kt">String</span> <span class="kt">String</span> <span class="kt">Int</span> <span class="kt">String</span>

<span class="n">get_first_name</span>	<span class="p">(</span><span class="kt">Person</span> <span class="n">x</span> <span class="kr">_</span> <span class="kr">_</span> <span class="kr">_</span><span class="p">)</span> <span class="o">=</span> <span class="n">x</span>
<span class="n">get_second_name</span>	<span class="p">(</span><span class="kt">Person</span> <span class="kr">_</span> <span class="n">x</span> <span class="kr">_</span> <span class="kr">_</span><span class="p">)</span> <span class="o">=</span> <span class="n">x</span>
<span class="n">get_age</span>		<span class="p">(</span><span class="kt">Person</span> <span class="kr">_</span> <span class="kr">_</span> <span class="n">x</span> <span class="kr">_</span><span class="p">)</span> <span class="o">=</span> <span class="n">x</span>
<span class="n">get_nationality</span>	<span class="p">(</span><span class="kt">Person</span> <span class="kr">_</span> <span class="kr">_</span> <span class="kr">_</span> <span class="n">x</span><span class="p">)</span> <span class="o">=</span> <span class="n">x</span>
</code></pre></div></div>

<div class="language-haskell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&gt;</span> <span class="n">get_age</span> <span class="p">(</span><span class="kt">Person</span> <span class="s">"joe"</span> <span class="s">"bloggs"</span> <span class="mi">25</span> <span class="s">"UK"</span><span class="p">)</span>
<span class="o">&gt;</span> <span class="mi">25</span>
</code></pre></div></div>

<h4 id="record-syntax">Record Syntax</h4>
<p>To make things easier, Haskell provides a record syntax:</p>

<div class="language-haskell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kr">data</span> <span class="kt">Person</span> <span class="o">=</span> <span class="kt">Person</span> <span class="p">{</span>	<span class="n">firstName</span> <span class="o">::</span> <span class="kt">String</span><span class="p">,</span>
			<span class="n">secondName</span> <span class="o">::</span> <span class="kt">String</span><span class="p">,</span>
			<span class="n">age</span> <span class="o">::</span> <span class="kt">Int</span><span class="p">,</span>
			<span class="kt">Nationality</span> <span class="o">::</span> <span class="kt">String</span><span class="p">}</span>
			<span class="kr">deriving</span> <span class="p">(</span><span class="kt">Show</span><span class="p">)</span>
</code></pre></div></div>

<div class="language-haskell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&gt;</span> <span class="kt">Person</span> <span class="s">"joe"</span> <span class="s">"bloggs"</span> <span class="mi">25</span> <span class="s">"UK"</span>
<span class="o">&gt;</span> <span class="kt">Person</span> <span class="p">{</span><span class="n">firstName</span> <span class="o">=</span> <span class="s">"joe"</span><span class="p">,</span> <span class="n">secondName</span> <span class="o">=</span> <span class="s">"bloggs"</span><span class="p">,</span> <span class="n">age</span> <span class="o">=</span> <span class="mi">25</span><span class="p">,</span> <span class="n">nationality</span> <span class="o">=</span> <span class="s">"UK"</span><span class="p">}</span>
</code></pre></div></div>

<p>This is similar to the previous example where we made our own record type.</p>

<p>Records can be created out of order, whereas normal data types cannot.</p>

<div class="language-haskell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kr">data</span> <span class="kt">Example</span> <span class="o">=</span> <span class="kt">Example</span> <span class="p">{</span><span class="n">a</span> <span class="o">::</span> <span class="kt">String</span><span class="p">,</span>
						<span class="n">b</span> <span class="o">::</span> <span class="kt">Int</span><span class="p">}</span>
						<span class="kr">deriving</span> <span class="p">(</span><span class="kt">Show</span><span class="p">)</span>
</code></pre></div></div>

<div class="language-haskell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&gt;</span> <span class="kt">Example</span> <span class="s">"one"</span> <span class="mi">2</span>
<span class="o">&gt;</span> <span class="kt">Example</span> <span class="p">{</span><span class="n">a</span> <span class="o">=</span> <span class="s">"one"</span><span class="p">,</span> <span class="n">b</span> <span class="o">=</span> <span class="mi">2</span><span class="p">}</span>

<span class="o">&gt;</span> <span class="kt">Example</span> <span class="p">{</span><span class="n">b</span> <span class="o">=</span> <span class="mi">3</span><span class="p">,</span> <span class="n">a</span> <span class="o">=</span> <span class="s">"zero"</span><span class="p">}</span>
<span class="o">&gt;</span> <span class="kt">Example</span> <span class="p">{</span><span class="n">a</span> <span class="o">=</span> <span class="s">"zero"</span><span class="p">,</span> <span class="n">b</span> <span class="o">=</span> <span class="mi">3</span><span class="p">}</span>
</code></pre></div></div>

<p>If you create an out of order function then you should put them in <code class="language-plaintext highlighter-rouge">{}</code> with their labels so that Haskell  can identify them.</p>

<h3 id="example-2">Example</h3>
<p>This example takes a co-ordinate <code class="language-plaintext highlighter-rouge">Point</code> to locate the shape in 2D space.</p>

<div class="language-haskell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kr">data</span> <span class="kt">AdvShape</span> <span class="o">=</span> <span class="kt">AdvCircle</span> <span class="kt">Point</span> <span class="kt">Float</span> <span class="o">|</span> <span class="kt">AdvRect</span> <span class="kt">Point</span> <span class="kt">Point</span> <span class="kr">deriving</span> <span class="p">(</span><span class="kt">Show</span><span class="p">)</span>

<span class="n">area'</span> <span class="p">(</span><span class="kt">AdvCircle</span> <span class="kr">_</span> <span class="n">radius</span><span class="p">)</span> <span class="o">=</span> <span class="n">pi</span> <span class="o">*</span> <span class="n">radius</span> <span class="o">**</span> <span class="mi">2</span>
<span class="n">area'</span> <span class="p">(</span><span class="kt">AdvRect</span> <span class="p">(</span><span class="kt">Point</span> <span class="n">x1</span> <span class="n">y1</span><span class="p">)</span> <span class="p">(</span><span class="kt">Point</span> <span class="n">x2</span> <span class="n">y2</span><span class="p">))</span> <span class="o">=</span>
	<span class="kr">let</span>
		<span class="n">w</span> <span class="o">=</span> <span class="n">abs</span> <span class="p">(</span><span class="n">x1</span> <span class="o">-</span> <span class="n">x2</span><span class="p">)</span>
		<span class="n">h</span> <span class="o">=</span> <span class="n">abs</span> <span class="p">(</span><span class="n">y1</span> <span class="o">-</span> <span class="n">y2</span><span class="p">)</span>
	<span class="kr">in</span>
		<span class="n">fromIntergral</span> <span class="p">(</span><span class="n">w</span> <span class="o">*</span> <span class="n">h</span><span class="p">)</span>
</code></pre></div></div>

<h2 id="exercises">Exercises</h2>
<ol>
  <li>
    <div class="language-haskell highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="kr">data</span> <span class="kt">Point</span> <span class="o">=</span> <span class="kt">Point</span> <span class="kt">Int</span> <span class="kt">Int</span> <span class="kr">deriving</span> <span class="p">(</span><span class="kt">Show</span><span class="p">,</span> <span class="kt">Read</span><span class="p">,</span> <span class="kt">Eq</span><span class="p">)</span>
 <span class="n">distance</span> <span class="o">::</span> <span class="kt">Point</span> <span class="o">-&gt;</span> <span class="kt">Int</span>
 <span class="n">distance</span> <span class="p">(</span><span class="kt">Point</span> <span class="n">x</span> <span class="n">y</span><span class="p">)</span> <span class="o">=</span> <span class="n">x</span> <span class="o">+</span> <span class="n">y</span>
</code></pre></div>    </div>
  </li>
  <li>
    <div class="language-haskell highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="kr">data</span> <span class="kt">HTTPResponse</span> 	<span class="o">=</span> <span class="kt">Data</span> <span class="kt">Int</span> <span class="kt">String</span> 
             <span class="o">|</span> <span class="kt">Error</span> <span class="kt">String</span>
             <span class="kr">deriving</span> <span class="p">(</span><span class="kt">Show</span><span class="p">,</span> <span class="kt">Read</span><span class="p">,</span> <span class="kt">Eq</span><span class="p">)</span>
</code></pre></div>    </div>
  </li>
  <li>
    <div class="language-haskell highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="kr">data</span> <span class="kt">Student</span> <span class="o">=</span> <span class="kt">Student</span> <span class="p">{</span><span class="n">name</span> <span class="o">::</span> <span class="kt">String</span>
             <span class="n">address</span> <span class="o">::</span> <span class="kt">String</span>
             <span class="n">marks</span> <span class="o">::</span> <span class="p">[</span><span class="kt">Int</span><span class="p">]</span>
             <span class="p">}</span>
             <span class="kr">deriving</span> <span class="p">(</span><span class="kt">Show</span><span class="p">,</span> <span class="kt">Read</span><span class="p">,</span> <span class="kt">Eq</span><span class="p">)</span>
</code></pre></div>    </div>
  </li>
</ol>
:ET