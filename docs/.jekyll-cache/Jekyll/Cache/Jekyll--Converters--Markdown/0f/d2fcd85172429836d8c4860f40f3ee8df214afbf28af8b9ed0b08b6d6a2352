I"‡*<h2 id="type-classes">Type Classes</h2>
<p>Some functions are polymorphic, but canâ€™t be applied to any type. <code class="language-plaintext highlighter-rouge">+</code> is a good example. It can work on <code class="language-plaintext highlighter-rouge">float</code> and <code class="language-plaintext highlighter-rouge">integer</code> but not on mixed types or <code class="language-plaintext highlighter-rouge">Char</code>. The type of <code class="language-plaintext highlighter-rouge">+</code> is:</p>

<div class="language-haskell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">(</span><span class="o">+</span><span class="p">)</span> <span class="o">::</span> <span class="kt">Num</span> <span class="n">a</span> <span class="o">=&gt;</span> <span class="n">a</span> <span class="o">-&gt;</span> <span class="n">a</span> <span class="o">-&gt;</span> <span class="n">a</span>
</code></pre></div></div>

<p>This means that <code class="language-plaintext highlighter-rouge">a</code> is a number in the definition: <code class="language-plaintext highlighter-rouge">a -&gt; a -&gt; a</code>.</p>

<h3 id="num"><code class="language-plaintext highlighter-rouge">Num</code></h3>
<p><code class="language-plaintext highlighter-rouge">Num</code> is a type class:</p>

<ul>
  <li>It restricts the type variable <code class="language-plaintext highlighter-rouge">a</code> to only be number types.</li>
  <li><code class="language-plaintext highlighter-rouge">Word</code>, <code class="language-plaintext highlighter-rouge">Int</code>, <code class="language-plaintext highlighter-rouge">Integer</code>, <code class="language-plaintext highlighter-rouge">Float</code>, <code class="language-plaintext highlighter-rouge">Double</code> are all contained in <code class="language-plaintext highlighter-rouge">Num</code>.</li>
  <li><code class="language-plaintext highlighter-rouge">Char</code>, <code class="language-plaintext highlighter-rouge">Bool</code>, tuples and lists are not in <code class="language-plaintext highlighter-rouge">Num</code>.</li>
</ul>

<h4 id="num-sub-classes"><code class="language-plaintext highlighter-rouge">Num</code> Sub-Classes</h4>
<p><code class="language-plaintext highlighter-rouge">Num</code> has two sub-classes.</p>

<p><code class="language-plaintext highlighter-rouge">Integral</code> represents whole numbers and contains:</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">Word</code> (un-signed integers)</li>
  <li><code class="language-plaintext highlighter-rouge">Int</code></li>
  <li><code class="language-plaintext highlighter-rouge">Integer</code></li>
</ul>

<p><code class="language-plaintext highlighter-rouge">Fractional</code> represents rationals and contains:</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">Float</code></li>
  <li><code class="language-plaintext highlighter-rouge">Double</code></li>
  <li><code class="language-plaintext highlighter-rouge">Rational</code></li>
</ul>

<h3 id="eq"><code class="language-plaintext highlighter-rouge">Eq</code></h3>
<p>The types in the class <code class="language-plaintext highlighter-rouge">Eq</code> are the types which can be compared with the function <code class="language-plaintext highlighter-rouge">==</code>. There are no default types which arenâ€™t equality testable but if you make your own type then you will have to add it to this class.</p>

<h2 id="type-class-syntax">Type Class Syntax</h2>
<p>The syntax of a class type is:</p>

<div class="language-haskell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">[</span><span class="kt">Type</span> <span class="kr">class</span> <span class="mi">1</span><span class="p">],</span> <span class="p">[</span><span class="kt">Type</span> <span class="kr">class</span> <span class="mi">2</span><span class="p">],</span> <span class="o">...</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">[</span><span class="kt">Type</span><span class="p">]</span>
</code></pre></div></div>

<p>This results in a declaration similar to the following:</p>

<div class="language-haskell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">equals_two</span> <span class="o">::</span> <span class="p">(</span><span class="kt">Eq</span> <span class="n">a</span><span class="p">,</span> <span class="kt">Num</span> <span class="n">a</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="n">a</span> <span class="o">-&gt;</span> <span class="n">a</span> <span class="o">-&gt;</span> <span class="kt">Bool</span>
<span class="n">equals_two</span> <span class="n">a</span> <span class="n">b</span> <span class="o">=</span> <span class="n">a</span> <span class="o">+</span> <span class="n">b</span> <span class="o">==</span> <span class="mi">2</span>
</code></pre></div></div>

<p>This type declaration also means that if you use functions like <code class="language-plaintext highlighter-rouge">==</code> in your function then you must specify that the type is comparable with <code class="language-plaintext highlighter-rouge">Eq a</code>. If you donâ€™t then the compiler will give an error.</p>

<h2 id="the-most-general-type-annotation">The Most General Type Annotation</h2>
<p>The most general type annotation is the one that is least restrictive. Ideally you want your type annotation to be the most general without giving an error:</p>

<div class="language-haskell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">equals_two</span> <span class="n">a</span> <span class="n">b</span> <span class="o">=</span> <span class="n">a</span> <span class="o">+</span> <span class="n">b</span> <span class="o">==</span> <span class="mi">2</span>

<span class="c1">-- Too restrictive</span>
<span class="n">equals_two</span> <span class="o">::</span> <span class="kt">Int</span> <span class="o">-&gt;</span> <span class="kt">Int</span> <span class="o">-&gt;</span> <span class="kt">Bool</span>

<span class="c1">-- Most general</span>
<span class="n">equals_two</span> <span class="o">::</span> <span class="p">(</span><span class="kt">Eq</span> <span class="n">a</span><span class="p">,</span> <span class="kt">Num</span> <span class="n">a</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="n">a</span> <span class="o">-&gt;</span> <span class="n">a</span> <span class="o">-&gt;</span> <span class="kt">Bool</span>

<span class="c1">-- Too general (will give error)</span>
<span class="n">equals_two</span> <span class="o">::</span> <span class="n">a</span> <span class="o">-&gt;</span> <span class="n">a</span> <span class="o">-&gt;</span> <span class="kt">Bool</span>
</code></pre></div></div>

<p class="info">The most general type annotation is the one which allows the most valid types</p>

<h2 id="numbers">Numbers</h2>
<p>In Haskell numbers, such as <code class="language-plaintext highlighter-rouge">10</code> have a <strong>polymorphic type</strong>:</p>

<div class="language-haskell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="mi">10</span> <span class="o">::</span> <span class="kt">Num</span> <span class="n">p</span> <span class="o">=&gt;</span> <span class="n">p</span>
</code></pre></div></div>

<p>This means that, unless stated explicitly that numbers will be converted to the most suitable type in the class of <code class="language-plaintext highlighter-rouge">Num</code>.</p>

<p>You can force a number to be a particular type by using the <code class="language-plaintext highlighter-rouge">::</code> operator:</p>

<div class="language-haskell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="mi">1</span> <span class="o">::</span> <span class="kt">Integer</span>
<span class="o">&gt;</span> <span class="mi">1</span>
<span class="mi">1</span> <span class="o">::</span> <span class="kt">Float</span>
<span class="o">&gt;</span> <span class="mf">1.0</span>
</code></pre></div></div>

<p>The function <code class="language-plaintext highlighter-rouge">fromIntegral</code> will take any <code class="language-plaintext highlighter-rouge">Integral</code> type and convert it into a <code class="language-plaintext highlighter-rouge">Num</code> type. This, for example would allow you to use the <code class="language-plaintext highlighter-rouge">/</code> operator on an <code class="language-plaintext highlighter-rouge">Integer</code>:</p>

<div class="language-haskell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">fromIntegral</span> <span class="p">(</span><span class="mi">1</span> <span class="o">::</span> <span class="kt">Int</span><span class="p">)</span> <span class="o">/</span> <span class="mi">2</span>
<span class="o">&gt;</span> <span class="mf">0.5</span>
</code></pre></div></div>
<h3 id="converting-floats-to-integers">Converting Floats to Integers</h3>
<p>Converting floats to integers is a lossy operation. This means that you shoul choose how to complete the rounding:</p>

<div class="language-haskell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">ceiling</span> <span class="mf">1.6</span>
<span class="o">&gt;</span> <span class="mi">2</span>

<span class="n">floor</span> <span class="mf">1.6</span>
<span class="o">&gt;</span> <span class="mi">1</span>

<span class="n">truncate</span> <span class="mf">1.6</span>
<span class="o">&gt;</span> <span class="mi">1</span>

<span class="n">round</span> <span class="mf">1.6</span>
<span class="o">&gt;</span> <span class="mi">2</span>
</code></pre></div></div>

<h2 id="other-type-classes">Other Type Classes</h2>
<p>There are many other type classes in Haskell that wonâ€™t be covered:</p>

<div class="language-haskell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">length</span> <span class="o">::</span> <span class="kt">Foldable</span> <span class="n">t</span> <span class="o">=&gt;</span> <span class="n">t</span> <span class="n">a</span> <span class="o">-&gt;</span> <span class="kt">Int</span>
</code></pre></div></div>

<p>This that <code class="language-plaintext highlighter-rouge">a</code> should be accepted if it is a list.</p>

<p>If you see any of the following as a types:</p>

<ul>
  <li>Functor</li>
  <li>Foldable</li>
  <li>Traversable</li>
</ul>

<p>then think <strong>list</strong>.</p>

<h2 id="exercises">Exercises</h2>
<ol>
  <li><code class="language-plaintext highlighter-rouge">square_area :: Num a =&gt; a -&gt; a -&gt; a</code></li>
  <li><code class="language-plaintext highlighter-rouge">triangle_area :: Fractional a  =&gt; a -&gt; a -&gt; a</code></li>
  <li><code class="language-plaintext highlighter-rouge">equal_heads :: Eq a =&gt; [a] -&gt; [a] -&gt; Bool</code></li>
</ol>
:ET