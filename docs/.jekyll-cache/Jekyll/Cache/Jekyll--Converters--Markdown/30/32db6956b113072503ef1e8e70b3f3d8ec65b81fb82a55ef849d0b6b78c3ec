I":'<h2 id="higher-order-functions">Higher Order Functions</h2>
<p>A higher order function is a function that:</p>

<ul>
  <li>Takes another function as an argument.</li>
  <li>Returns a function.</li>
</ul>

<div class="language-haskell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">apply_twice</span> <span class="o">::</span> <span class="p">(</span><span class="n">a</span> <span class="o">-&gt;</span> <span class="n">a</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">a</span> <span class="o">-&gt;</span> <span class="n">a</span>
<span class="n">apply_twice</span> <span class="n">f</span> <span class="n">input</span> <span class="o">=</span> <span class="n">f</span> <span class="p">(</span><span class="n">f</span> <span class="n">input</span><span class="p">)</span>

<span class="o">&gt;</span> <span class="n">apply_twice</span> <span class="n">tail</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">]</span>
<span class="o">&gt;</span> <span class="p">[</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">]</span>
</code></pre></div></div>

<p>This function takes a function and an input as an argument and then uses the supplied function twice on the supplied argument.</p>

<p>An example including currying (partial application):</p>

<div class="language-haskell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&gt;</span> <span class="n">apply_twice</span> <span class="p">(</span><span class="n">drop</span> <span class="mi">2</span><span class="p">)</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">5</span><span class="p">]</span>
<span class="o">&gt;</span> <span class="p">[</span><span class="mi">5</span><span class="p">]</span>
</code></pre></div></div>

<p>A caveat of using this function is that it must return the same type that is is given.</p>

<h3 id="function-composition">Function Composition</h3>
<p>Function composition applies one function to the output of another</p>

<ul>
  <li>Composing <code class="language-plaintext highlighter-rouge">f</code> with <code class="language-plaintext highlighter-rouge">g input</code> gives <code class="language-plaintext highlighter-rouge">f (g input)</code></li>
</ul>

<div class="language-haskell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">compose</span> <span class="o">::</span> <span class="p">(</span><span class="n">b</span> <span class="o">-&gt;</span> <span class="n">c</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="p">(</span><span class="n">a</span> <span class="o">-&gt;</span> <span class="n">b</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">a</span> <span class="o">-&gt;</span> <span class="n">c</span>
<span class="n">compose</span> <span class="n">f</span> <span class="n">g</span> <span class="n">input</span> <span class="o">=</span> <span class="n">f</span> <span class="p">(</span><span class="n">g</span> <span class="n">input</span><span class="p">)</span>

<span class="o">&gt;</span> <span class="n">compose</span> <span class="p">(</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span> <span class="p">(</span><span class="o">*</span><span class="mi">2</span><span class="p">)</span> <span class="mi">4</span>
<span class="o">&gt;</span> <span class="mi">9</span>
</code></pre></div></div>

<p>This is the same thing as applying a function to another function.</p>

<h4 id="the--operator">The <code class="language-plaintext highlighter-rouge">.</code> Operator</h4>
<p>The type of <code class="language-plaintext highlighter-rouge">.</code> is:</p>

<div class="language-haskell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">(</span><span class="o">.</span><span class="p">)</span> <span class="o">::</span> <span class="p">(</span><span class="n">b</span> <span class="o">-&gt;</span> <span class="n">c</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="p">(</span><span class="n">a</span> <span class="o">-&gt;</span> <span class="n">b</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">a</span> <span class="o">-&gt;</span> <span class="n">c</span>
</code></pre></div></div>

<p>The <code class="language-plaintext highlighter-rouge">.</code> operator is an infix operator called compose. To complete the same action as will the <code class="language-plaintext highlighter-rouge">compose</code> function write:</p>

<div class="language-haskell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&gt;</span> <span class="p">((</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span> <span class="o">.</span> <span class="p">(</span><span class="o">*</span><span class="mi">2</span><span class="p">))</span> <span class="mi">4</span>
<span class="o">&gt;</span> <span class="mi">9</span>
</code></pre></div></div>

<p>This means to apply the left function on the argument and then the right function on the result of the previous function.</p>

<div class="language-haskell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">f</span> <span class="n">list</span> <span class="o">=</span> <span class="n">length</span> <span class="p">(</span><span class="n">double</span> <span class="p">(</span><span class="n">drop_evens</span> <span class="p">(</span><span class="n">tail</span> <span class="n">list</span><span class="p">)))</span>

<span class="n">f'</span> <span class="n">list</span> <span class="o">=</span> <span class="p">(</span><span class="n">length</span> <span class="o">.</span> <span class="n">double</span> <span class="o">.</span> <span class="n">drop</span> <span class="n">evens</span> <span class="o">.</span> <span class="n">tail</span><span class="p">)</span> <span class="n">list</span>
</code></pre></div></div>

<p>As you can see from the two different implementations; the use of <code class="language-plaintext highlighter-rouge">.</code> removes the need for nested brackets, however:</p>

<ul>
  <li>It is stylistic.</li>
  <li>You never need to use <code class="language-plaintext highlighter-rouge">.</code></li>
  <li>It is preferred.</li>
</ul>

<h3 id="the-92-operator">The <code class="language-plaintext highlighter-rouge">&amp;#92;(</code> Operator</h3>

<div class="language-haskell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">evaluate</span> <span class="o">::</span> <span class="p">(</span><span class="n">a</span> <span class="o">-&gt;</span> <span class="n">b</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">a</span> <span class="o">-&gt;</span> <span class="n">b</span>
<span class="n">evaluate</span> <span class="n">f</span> <span class="n">input</span> <span class="o">=</span> <span class="n">f</span> <span class="n">input</span>
</code></pre></div></div>

<p>The <code class="language-plaintext highlighter-rouge">&amp;#92;)</code> operator is exactly the same as evaluate. <code class="language-plaintext highlighter-rouge">&amp;#92;(</code> is infix.</p>

<p>The <code class="language-plaintext highlighter-rouge">&amp;#92;)</code> operator has the lowest precedence of any operator. As a result it can be used in place of brackets:</p>

<div class="language-haskell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">((</span><span class="o">*</span><span class="mi">2</span><span class="p">)</span> <span class="o">.</span> <span class="n">length</span><span class="p">)</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">]</span>
<span class="p">(</span><span class="o">*</span><span class="mi">2</span><span class="p">)</span> <span class="o">.</span> <span class="n">length</span> <span class="o">$</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">]</span>

<span class="n">length</span> <span class="p">([</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">]</span> <span class="o">++</span> <span class="p">[</span><span class="mi">4</span><span class="p">,</span><span class="mi">5</span><span class="p">,</span><span class="mi">6</span><span class="p">])</span>
<span class="n">length</span> <span class="o">$</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">]</span> <span class="o">+</span> <span class="p">[</span><span class="mi">4</span><span class="p">,</span><span class="mi">5</span><span class="p">,</span><span class="mi">6</span><span class="p">]</span>
</code></pre></div></div>

<h2 id="exercises">Exercises</h2>
<ol>
  <li>
    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code> applyThrice :: (a -&gt; a) -&gt; a -&gt; a
 applyThrice f x = f . f . f $ x
</code></pre></div>    </div>
  </li>
  <li>
    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code> f :: (Ord a, Enum a) =&gt; [a] -&gt; a
 f x = succ . sum . tail . tail $ x
</code></pre></div>    </div>
  </li>
</ol>
:ET