I"Æ<h2 id="recursion-with-multiple-lists">Recursion with Multiple Lists</h2>
<p>Sometimes we want to use recursion on more than one list at a time. The following example adds the elements of two lists together:</p>

<div class="language-haskell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">add_lists</span> <span class="kr">_</span> <span class="kt">[]</span> <span class="o">=</span> <span class="kt">[]</span>
<span class="n">add_lists</span> <span class="kt">[]</span> <span class="kr">_</span> <span class="o">=</span> <span class="kt">[]</span>
<span class="n">addlists</span> <span class="p">(</span><span class="n">x</span><span class="o">:</span><span class="n">xs</span><span class="p">)</span> <span class="p">(</span><span class="n">y</span><span class="o">:</span><span class="n">ys</span><span class="p">)</span> <span class="o">=</span> <span class="n">x</span> <span class="o">+</span> <span class="n">y</span> <span class="o">:</span> <span class="n">addlists</span> <span class="n">xs</span> <span class="n">ys</span>
</code></pre></div></div>

<ul>
  <li>Base cases stop when either of the lists is empty.</li>
  <li>Recursive rule pulls an element form both lists.</li>
</ul>

<p>Another method to implement this, provided that you donâ€™t want to accept lists which donâ€™t have equal length is like the following:</p>

<div class="language-haskell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">f</span> <span class="kt">[]</span> <span class="kt">[]</span> <span class="o">=</span> <span class="kt">[]</span>
<span class="n">f</span> <span class="kt">[]</span> <span class="kr">_</span> <span class="o">=</span> <span class="n">error</span> <span class="s">"Second list is longer"</span>
<span class="n">f</span> <span class="kr">_</span> <span class="kt">[]</span> <span class="o">=</span> <span class="n">error</span> <span class="s">"First list is longer"</span>
<span class="n">f</span> <span class="p">(</span><span class="n">x</span><span class="o">:</span><span class="n">xs</span><span class="p">)</span> <span class="p">(</span><span class="n">y</span><span class="o">:</span><span class="n">ys</span><span class="p">)</span> <span class="o">=</span> <span class="n">x</span> <span class="o">+</span> <span class="n">y</span> <span class="o">:</span> <span class="n">f</span> <span class="n">xs</span> <span class="n">ys</span>
</code></pre></div></div>

<ul>
  <li>This will give an explicit error if they arenâ€™t matching length.</li>
</ul>

<h3 id="splitting-a-list-in-two">Splitting a List in Two</h3>
<p>Other functions can take a list and return a pair of lists:</p>

<div class="language-haskell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">gt_10</span> <span class="kt">[]</span> <span class="o">=</span> <span class="p">(</span><span class="kt">[]</span><span class="p">,</span><span class="kt">[]</span><span class="p">)</span>
<span class="n">gt_10</span> <span class="p">(</span><span class="n">x</span><span class="o">:</span><span class="n">xs</span><span class="p">)</span>
	<span class="o">|</span> <span class="n">x</span> <span class="o">&gt;</span> <span class="mi">10</span>	<span class="o">=</span> <span class="p">(</span><span class="n">x</span><span class="o">:</span><span class="n">gt</span><span class="p">,</span> <span class="n">lt</span><span class="p">)</span>
	<span class="o">|</span> <span class="n">otherwise</span>	<span class="o">=</span> <span class="p">(</span><span class="n">gt</span><span class="p">,</span> <span class="n">x</span><span class="o">:</span><span class="n">lt</span><span class="p">)</span>
	<span class="kr">where</span> <span class="p">(</span><span class="n">gt</span><span class="p">,</span> <span class="n">lt</span><span class="p">)</span> <span class="o">=</span> <span class="n">gt_10</span> <span class="n">xs</span>
</code></pre></div></div>

<p>This will split a list into two lists containing values that are bigger and smaller than 10.</p>

<ul>
  <li>The base case sets up the tuple.</li>
  <li>The recursive rule modifies one of the two lists.</li>
</ul>

<h3 id="zip"><code class="language-plaintext highlighter-rouge">zip</code></h3>
<p><code class="language-plaintext highlighter-rouge">zip</code> takes two lists and returns a list of pairs</p>

<div class="language-haskell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">zip'</span> <span class="kt">[]</span> <span class="kr">_</span> <span class="o">=</span> <span class="kt">[]</span>
<span class="n">zip'</span> <span class="kr">_</span> <span class="kt">[]</span> <span class="o">=</span> <span class="kt">[]</span>
<span class="n">zip'</span> <span class="p">(</span><span class="n">x</span><span class="o">:</span><span class="n">xs</span><span class="p">)</span> <span class="p">(</span><span class="n">y</span><span class="o">:</span><span class="n">ys</span><span class="p">)</span> <span class="o">=</span> <span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">)</span> <span class="o">:</span> <span class="n">zip'</span> <span class="n">xs</span> <span class="n">ys</span>
</code></pre></div></div>

<h2 id="exercises">Exercises</h2>
<ol>
  <li>
    <div class="language-haskell highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="n">multiplyLists</span> <span class="kr">_</span> <span class="kt">[]</span> <span class="o">=</span> <span class="kt">[]</span>
 <span class="n">multiplyLists</span> <span class="kt">[]</span> <span class="kr">_</span> <span class="o">=</span> <span class="kt">[]</span>
 <span class="n">multiplyLists</span> <span class="p">(</span><span class="n">x</span><span class="o">:</span><span class="n">xs</span><span class="p">)</span> <span class="p">(</span><span class="n">y</span><span class="o">:</span><span class="n">ys</span><span class="p">)</span> <span class="o">=</span> <span class="n">x</span> <span class="o">*</span> <span class="n">y</span> <span class="o">:</span> <span class="n">multiplyLists</span> <span class="n">xs</span> <span class="n">ys</span>
</code></pre></div>    </div>
  </li>
  <li>
    <div class="language-haskell highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="n">zip3'</span> <span class="kt">[]</span> <span class="kr">_</span> <span class="kr">_</span> <span class="o">=</span> <span class="kt">[]</span>
 <span class="n">zip3'</span> <span class="kr">_</span> <span class="kt">[]</span> <span class="kr">_</span> <span class="o">=</span> <span class="kt">[]</span>
 <span class="n">zip3'</span> <span class="kr">_</span> <span class="kr">_</span> <span class="kt">[]</span> <span class="o">=</span> <span class="kt">[]</span>
 <span class="n">zip3'</span> <span class="p">(</span><span class="n">x</span><span class="o">:</span><span class="n">xs</span><span class="p">)</span> <span class="p">(</span><span class="n">y</span><span class="o">:</span><span class="n">ys</span><span class="p">)</span> <span class="p">(</span><span class="n">z</span><span class="o">:</span><span class="n">zs</span><span class="p">)</span> <span class="o">=</span> <span class="p">(</span><span class="n">x</span><span class="p">,</span><span class="n">y</span><span class="p">,</span><span class="n">z</span><span class="p">)</span> <span class="o">:</span> <span class="n">zip3'</span> <span class="n">xs</span> <span class="n">ys</span> <span class="n">zs</span>
</code></pre></div>    </div>
  </li>
</ol>
:ET