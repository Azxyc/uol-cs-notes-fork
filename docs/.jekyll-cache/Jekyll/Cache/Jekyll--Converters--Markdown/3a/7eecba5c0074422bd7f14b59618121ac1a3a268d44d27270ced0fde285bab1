I"Ý<ol>
  <li>Select and expand start state to give a tree of depth 1.</li>
  <li>Select and expand all paths that resulted from previous step to give a tree of depth 2.</li>
  <li>and so on.</li>
</ol>

<p>In general select adn expand all paths of depth \(n\) before depth \(n + 1\)</p>

<h2 id="maze-example">Maze example</h2>

<p>First explore paths of length 1, then depth 2 then length three. This has the result of following all paths and then returning to the source via the shortest path.</p>

<h2 id="example-1">Example 1</h2>

<pre><code class="language-mermaid">graph TD
S --&gt; A
S --&gt; B
S --&gt; C
A --&gt; D
A --&gt; E
B --&gt; G
E --&gt; G
C --&gt; F
F --&gt; G
D --&gt; H
</code></pre>
<p><em>Example Graph.</em></p>

<table>
  <thead>
    <tr>
      <th>Expanded Paths</th>
      <th>Frontier</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>Â </td>
      <td>S</td>
    </tr>
    <tr>
      <td>S not goal</td>
      <td>SA, SB, SC</td>
    </tr>
    <tr>
      <td>SA not goal</td>
      <td>SB, SC, SAD, SAE</td>
    </tr>
    <tr>
      <td>SB not goal</td>
      <td>SC, SAD, SAE, SBG</td>
    </tr>
    <tr>
      <td>SC not goal</td>
      <td>SAD, SAE, SBG, SCF</td>
    </tr>
    <tr>
      <td>SAD not goal</td>
      <td>SAE, SBG, SCF, SADH</td>
    </tr>
    <tr>
      <td>SAE not goal</td>
      <td>SBG, SCF, SADH, SAEG</td>
    </tr>
    <tr>
      <td>SBG is goal</td>
      <td>SCF, SADH, SAEG</td>
    </tr>
  </tbody>
</table>

<p>If the route was expanded at the same time then they are allowed to be added in any order. Otherwise they should be searched in the order that they were first added to the frontier. Choosing the first item in the frontier is always the right option as it is first in first out.</p>
:ET