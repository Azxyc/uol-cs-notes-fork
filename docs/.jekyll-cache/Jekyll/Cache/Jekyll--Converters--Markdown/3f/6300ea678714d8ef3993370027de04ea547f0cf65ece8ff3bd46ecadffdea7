I"… <h2 id="fold-continued">Fold Continued</h2>
<p>A fold output can be a different type to the input list.</p>

<div class="language-haskell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">to_csv</span> <span class="n">list</span> <span class="o">=</span> <span class="n">foldr</span> <span class="p">(</span><span class="nf">\</span><span class="n">x</span> <span class="n">acc</span> <span class="o">-&gt;</span> <span class="n">show</span> <span class="n">x</span> <span class="o">++</span> <span class="s">","</span> <span class="o">++</span> <span class="n">acc</span><span class="p">)</span>  <span class="s">""</span> <span class="n">list</span>

<span class="o">&gt;</span> <span class="n">to_csv</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">]</span>
<span class="o">&gt;</span> <span class="s">"1,2,3,4,"</span>
</code></pre></div></div>

<p>By using <code class="language-plaintext highlighter-rouge">foldr</code> you cannot get the desired outcome as it applies the same rule to every item in the list.</p>

<h3 id="foldr1"><code class="language-plaintext highlighter-rouge">foldr1</code></h3>
<p>The function <code class="language-plaintext highlighter-rouge">foldr1</code> uses the final value of the list to initialise the accumulator:</p>

<div class="language-haskell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">foldr1</span> <span class="o">::</span> <span class="p">(</span><span class="n">a</span> <span class="o">-&gt;</span> <span class="n">a</span> <span class="o">-&gt;</span> <span class="n">a</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="p">[</span><span class="n">a</span><span class="p">]</span> <span class="o">-&gt;</span> <span class="n">a</span>

<span class="n">foldr1'</span> <span class="kr">_</span> <span class="kt">[]</span> <span class="o">=</span> <span class="n">error</span> <span class="s">"empty list"</span>
<span class="n">foldr1'</span> <span class="o">-</span><span class="p">[</span><span class="n">x</span><span class="p">]</span> <span class="o">=</span> <span class="n">x</span>
<span class="n">foldr1'</span> <span class="n">f</span> <span class="p">(</span><span class="n">x</span><span class="o">:</span><span class="n">xs</span><span class="p">)</span> <span class="o">=</span> <span class="n">f</span> <span class="n">x</span> <span class="p">(</span><span class="n">foldr1'</span> <span class="n">f</span> <span class="n">xs</span><span class="p">)</span>

<span class="o">&gt;</span> <span class="n">foldr1'</span> <span class="p">(</span><span class="o">+</span><span class="p">)</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">5</span><span class="p">]</span>
<span class="o">&gt;</span> <span class="mi">15</span>
</code></pre></div></div>

<p>As the accumulator has the same type as the list elements <code class="language-plaintext highlighter-rouge">foldr1</code> cannot have a different type to that of the elements in the list.</p>

<h4 id="example">Example</h4>

<div class="language-haskell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">maximum'</span> <span class="n">list</span> <span class="o">=</span> <span class="n">foldr1</span> <span class="p">(</span><span class="nf">\</span> <span class="n">x</span> <span class="n">acc</span> <span class="o">-&gt;</span> <span class="kr">if</span> <span class="n">x</span> <span class="o">&gt;</span> <span class="n">acc</span> <span class="kr">then</span> <span class="n">x</span> <span class="kr">else</span> <span class="n">acc</span><span class="p">)</span> <span class="n">list</span>

<span class="o">&gt;</span> <span class="n">maximum</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">1</span><span class="p">]</span>
<span class="o">&gt;</span> <span class="mi">4</span>
</code></pre></div></div>

<p>In this example <code class="language-plaintext highlighter-rouge">foldr1</code> is required as your initialisation may become the maximum value.</p>

<h3 id="foldl"><code class="language-plaintext highlighter-rouge">foldl</code></h3>
<p><code class="language-plaintext highlighter-rouge">foldr</code> processes lists from the right. The opposite of this is <code class="language-plaintext highlighter-rouge">foldl</code> which processes lists from the left. For many functions like <code class="language-plaintext highlighter-rouge">+</code> the ordering doesnâ€™t matter but for other functions such as <code class="language-plaintext highlighter-rouge">/</code>.</p>

<h4 id="type-of-foldl">Type of <code class="language-plaintext highlighter-rouge">foldl</code></h4>
<p>The function <code class="language-plaintext highlighter-rouge">f</code> has its type flipped compared to the other <code class="language-plaintext highlighter-rouge">fold</code> function:</p>

<div class="language-haskell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">foldr</span> <span class="o">::</span> <span class="p">(</span><span class="n">a</span> <span class="o">-&gt;</span> <span class="n">b</span> <span class="o">-&gt;</span> <span class="n">b</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">b</span> <span class="o">-&gt;</span> <span class="p">[</span><span class="n">a</span><span class="p">]</span> <span class="o">-&gt;</span> <span class="n">b</span>
<span class="n">foldl</span> <span class="o">::</span> <span class="p">(</span><span class="n">b</span> <span class="o">-&gt;</span> <span class="n">a</span> <span class="o">-&gt;</span> <span class="n">b</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">b</span> <span class="o">-&gt;</span> <span class="p">[</span><span class="n">a</span><span class="p">]</span> <span class="o">-&gt;</span> <span class="n">b</span>
</code></pre></div></div>

<p>This also means that you should swap your functions:</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">foldr (\ x acc -&gt; ...</code></li>
  <li><code class="language-plaintext highlighter-rouge">foldr (\ acc x -&gt; ...</code></li>
</ul>

<h5 id="example-1">Example</h5>

<div class="language-haskell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">reverse_list</span> <span class="n">list</span> <span class="o">=</span> <span class="n">foldl</span> <span class="p">(</span><span class="nf">\</span> <span class="n">acc</span> <span class="n">x</span> <span class="o">-&gt;</span> <span class="n">x</span> <span class="o">:</span> <span class="n">acc</span><span class="p">)</span> <span class="kt">[]</span> <span class="n">list</span>

<span class="o">&gt;</span> <span class="n">reverse_list</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">]</span>
<span class="o">&gt;</span> <span class="p">[</span><span class="mi">4</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">1</span><span class="p">]</span>
</code></pre></div></div>

<h2 id="exercises">Exercises</h2>
<ol>
  <li><code class="language-plaintext highlighter-rouge">sumFsts list = foldr (\ (x,_) acc -&gt; x + acc) 0 list</code></li>
  <li><code class="language-plaintext highlighter-rouge">minimum list = foldr1 (\ x acc -&gt; if x &lt; acc then x else acc) list</code></li>
  <li><code class="language-plaintext highlighter-rouge">dash string = foldl (\ acc x -&gt; acc ++ [x, '-']) "" string</code></li>
</ol>
:ET