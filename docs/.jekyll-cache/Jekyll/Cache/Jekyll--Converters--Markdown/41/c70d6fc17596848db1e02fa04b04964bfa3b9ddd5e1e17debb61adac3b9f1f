I"I=<h2 id="maybe"><code class="language-plaintext highlighter-rouge">Maybe</code></h2>

<div class="language-haskell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kr">data</span> <span class="kt">Maybe</span> <span class="n">a</span> <span class="o">=</span> <span class="kt">Just</span> <span class="n">a</span> <span class="o">|</span> <span class="kt">Nothing</span>
</code></pre></div></div>

<div class="language-haskell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&gt;</span> <span class="o">:</span><span class="n">t</span> <span class="kt">Just</span> <span class="s">"hello"</span>
<span class="kt">Maybe</span> <span class="p">[</span><span class="kt">Char</span><span class="p">]</span>
<span class="o">&gt;</span> <span class="o">:</span><span class="n">t</span> <span class="kt">Just</span> <span class="kt">False</span>
<span class="kt">Maybe</span> <span class="kt">Bool</span>
<span class="o">&gt;</span> <span class="o">:</span><span class="n">t</span> <span class="kt">Nothing</span>
<span class="kt">Maybe</span> <span class="n">a</span>
</code></pre></div></div>

<p>From here you can see that when you call the <code class="language-plaintext highlighter-rouge">Just</code> constructor you force the type variable <code class="language-plaintext highlighter-rouge">a</code> to be a particular type and if you call <code class="language-plaintext highlighter-rouge">Nothing</code> then no type is assigned to <code class="language-plaintext highlighter-rouge">a</code>.</p>

<p>The <code class="language-plaintext highlighter-rouge">Maybe</code> type is used in pure functional code that <strong>might fail</strong>.</p>

<div class="language-haskell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">safe_head</span> <span class="kt">[]</span> <span class="o">=</span> <span class="kt">Nothing</span>
<span class="n">safe_head</span> <span class="p">(</span><span class="n">x</span><span class="o">:</span><span class="kr">_</span><span class="p">)</span> <span class="o">=</span> <span class="kt">Just</span> <span class="n">x</span>
</code></pre></div></div>

<div class="language-haskell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&gt;</span> <span class="n">safe_head</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">]</span>
<span class="kt">Just</span> <span class="mi">1</span> 
<span class="o">&gt;</span> <span class="n">safe_head</span> <span class="kt">[]</span>
<span class="kt">Nothing</span>
</code></pre></div></div>

<p>Given that the function will always give an output this means that it wont give an exception and crash the program.</p>

<h3 id="example">Example</h3>

<div class="language-haskell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">safe_get_heads</span> <span class="n">list</span> <span class="o">=</span>
    <span class="kr">let</span>
        <span class="n">mapped</span> <span class="o">=</span> <span class="n">map</span> <span class="n">safe_head</span> <span class="n">list</span>
        <span class="n">filtered</span> <span class="o">=</span> <span class="n">filter</span> <span class="p">(</span><span class="o">/=</span><span class="kt">Nothing</span><span class="p">)</span> <span class="n">mapped</span>
        <span class="n">unjust</span> <span class="o">=</span> <span class="p">(</span><span class="nf">\</span> <span class="n">x</span> <span class="o">-&gt;</span> <span class="kr">case</span> <span class="n">x</span> <span class="kr">of</span> <span class="kt">Just</span> <span class="n">a</span> <span class="o">-&gt;</span> <span class="n">a</span><span class="p">)</span>
    <span class="kr">in</span>
        <span class="n">map</span> <span class="n">unjust</span> <span class="n">filtered</span>
</code></pre></div></div>

<div class="language-haskell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&gt;</span> <span class="n">safe_get_heads</span> <span class="p">[</span><span class="kt">[]</span><span class="p">,[</span><span class="mi">1</span><span class="p">],[</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">]]</span>
<span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">]</span>
</code></pre></div></div>

<p>This code will not crash in the event that an empty list is given to head.</p>

<h2 id="exceptions-in-haskell">Exceptions in Haskell</h2>
<p>Haskell does include support for exceptions</p>

<div class="language-haskell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&gt;</span> <span class="n">head</span> <span class="kt">[]</span>
<span class="o">***</span> <span class="kt">Exception</span><span class="o">:</span> <span class="kt">Prelude</span><span class="o">.</span><span class="n">head</span><span class="o">:</span> <span class="n">empty</span> <span class="n">list</span>
</code></pre></div></div>

<p>Exceptions are not pure functional:</p>

<ul>
  <li>Every function returns exactly one value.</li>
  <li>You canâ€™t catch exceptions in pure functional code.</li>
  <li>Exceptions are mostly used in IO code.</li>
</ul>

<p>The <code class="language-plaintext highlighter-rouge">Maybe</code> type provides a way to do exception-like behaviour in pure functional code.</p>

<p>Can this function fail for some inputs?</p>

<ul>
  <li>Use the <code class="language-plaintext highlighter-rouge">Maybe</code> type.</li>
</ul>

<p>Exceptions should only be used in IO code:</p>

<ul>
  <li>File not found, could not connect to server, etc.</li>
  <li>These are unpredictable events.</li>
</ul>

<h2 id="either"><code class="language-plaintext highlighter-rouge">Either</code></h2>

<div class="language-haskell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kr">data</span> <span class="kt">Either'</span> <span class="n">a</span> <span class="n">b</span> <span class="o">=</span> <span class="kt">Left</span> <span class="n">a</span> <span class="o">|</span> <span class="kt">Right</span> <span class="n">b</span>
</code></pre></div></div>

<div class="language-haskell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&gt;</span> <span class="o">:</span><span class="n">t</span> <span class="kt">Left</span> <span class="sc">'a'</span>
<span class="kt">Either</span> <span class="kt">Char</span> <span class="sc">'b'</span>
<span class="o">&gt;</span> <span class="o">:</span><span class="n">t</span> <span class="kt">Right</span> <span class="sc">'b'</span>
<span class="kt">Either</span> <span class="n">a</span> <span class="kt">Char</span>
</code></pre></div></div>

<p>The <code class="language-plaintext highlighter-rouge">Either</code> type is useful if you want to store different types in the same list:</p>

<div class="language-haskell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">is_left</span> <span class="p">(</span><span class="kt">Left</span> <span class="kr">_</span><span class="p">)</span>    <span class="o">=</span> <span class="kt">True</span>
<span class="n">is_left</span> <span class="kr">_</span>           <span class="o">=</span> <span class="kt">False</span>
</code></pre></div></div>

<div class="language-haskell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&gt;</span> <span class="kr">let</span> <span class="n">list</span> <span class="o">=</span> <span class="p">[</span><span class="kt">Left</span> <span class="s">"one"</span><span class="p">,</span> <span class="kt">Right</span> <span class="mi">2</span><span class="p">,</span> <span class="kt">Left</span> <span class="s">"three"</span><span class="p">,</span> <span class="kt">Right</span> <span class="mi">4</span><span class="p">]</span>
<span class="o">&gt;</span> <span class="n">map</span> <span class="n">is_left</span> <span class="n">list</span>
<span class="p">[</span><span class="kt">True</span><span class="p">,</span><span class="kt">False</span><span class="p">,</span><span class="kt">True</span><span class="p">,</span><span class="kt">False</span><span class="p">]</span>
</code></pre></div></div>

<h3 id="example---filtering-off-left">Example - Filtering off <code class="language-plaintext highlighter-rouge">Left</code></h3>

<div class="language-haskell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">get_lefts</span> <span class="n">list</span> <span class="o">=</span> 
    <span class="kr">let</span>
        <span class="n">filtered</span> <span class="o">=</span> <span class="n">filter</span> <span class="n">is_left</span> <span class="n">list</span>
        <span class="n">unleft</span> <span class="o">=</span> <span class="p">(</span><span class="nf">\</span> <span class="p">(</span><span class="kt">Left</span> <span class="n">x</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">x</span><span class="p">)</span>
    <span class="kr">in</span>
        <span class="n">map</span> <span class="n">unleft</span> <span class="n">filtered</span>
</code></pre></div></div>

<div class="language-haskell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&gt;</span> <span class="n">get_lefts</span> <span class="n">list</span>
<span class="p">[</span><span class="s">"one"</span><span class="p">,</span><span class="s">"three"</span><span class="p">]</span>
</code></pre></div></div>

<h3 id="example---squaring-mixed-number-types">Example - Squaring Mixed Number Types</h3>

<div class="language-haskell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">square</span> <span class="p">(</span><span class="kt">Left</span> <span class="n">x</span><span class="p">)</span> <span class="o">=</span> <span class="kt">Left</span> <span class="p">(</span><span class="n">x</span> <span class="o">**</span> <span class="mi">2</span><span class="p">)</span>
<span class="n">square</span> <span class="p">(</span><span class="kt">Rightx</span><span class="p">)</span> <span class="o">=</span> <span class="kt">Right</span> <span class="p">(</span><span class="n">x</span> <span class="o">^</span> <span class="mi">2</span><span class="p">)</span>
</code></pre></div></div>

<div class="language-haskell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&gt;</span> <span class="kr">let</span> <span class="n">nums</span> <span class="o">=</span> <span class="p">[</span><span class="kt">Left</span> <span class="n">pi</span><span class="p">,</span> <span class="kt">Right</span> <span class="p">(</span><span class="mi">4</span><span class="o">::</span><span class="kt">Int</span><span class="p">),</span> <span class="kt">Left</span> <span class="mf">2.7182</span><span class="p">]</span>
<span class="o">&gt;</span> <span class="n">map</span> <span class="n">square</span> <span class="n">nums</span>
<span class="p">[</span><span class="kt">Left</span> <span class="mf">9.86</span><span class="p">,</span><span class="kt">Right</span> <span class="mi">16</span><span class="p">,</span><span class="kt">Left</span> <span class="mf">7.38</span><span class="p">]</span>
</code></pre></div></div>

<h3 id="meaningful-error-messages">Meaningful Error Messages</h3>
<p><code class="language-plaintext highlighter-rouge">Either</code> can also be used to give detailed error messages.</p>

<div class="language-haskell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">safe_head_either</span> <span class="kt">[]</span>     <span class="o">=</span> <span class="kt">Right</span> <span class="s">"empty list"</span>
<span class="n">safe_head_either</span> <span class="p">(</span><span class="n">x</span><span class="o">:</span><span class="n">xs</span><span class="p">)</span> <span class="o">=</span> <span class="kt">Left</span> <span class="n">x</span>
</code></pre></div></div>

<div class="language-haskell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&gt;</span> <span class="n">safe_head_either</span> <span class="kt">[]</span>
<span class="kt">Right</span> <span class="s">"empty list"</span>
<span class="o">&gt;</span> <span class="n">safe_head_either</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">]</span>
<span class="kt">Left</span> <span class="mi">1</span>
</code></pre></div></div>

<p>This is required as a function canâ€™t return values of two different types.</p>

<h2 id="exercises">Exercises</h2>
<ol>
  <li>
    <div class="language-haskell highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="n">safeTail</span> <span class="o">::</span> <span class="p">[</span><span class="n">a</span><span class="p">]</span> <span class="o">-&gt;</span> <span class="kt">Maybe</span> <span class="p">[</span><span class="n">a</span><span class="p">]</span>
 <span class="n">safeTail</span> <span class="kt">[]</span>     <span class="o">=</span> <span class="kt">Nothing</span>
 <span class="n">safeTail</span> <span class="n">x</span><span class="o">:</span><span class="n">xs</span>   <span class="o">=</span> <span class="kt">Just</span> <span class="n">xs</span>
</code></pre></div>    </div>
  </li>
  <li>
    <div class="language-haskell highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="n">safeDiv</span> <span class="o">::</span> <span class="kt">Int</span> <span class="o">-&gt;</span> <span class="kt">Int</span> <span class="o">-&gt;</span> <span class="kt">Maybe</span> <span class="kt">Int</span>
 <span class="n">safeDiv</span> <span class="kr">_</span> <span class="mi">0</span> <span class="o">=</span> <span class="kt">Nothing</span>
 <span class="n">safeDiv</span> <span class="n">x</span> <span class="n">y</span> <span class="o">=</span> <span class="kt">Just</span> <span class="p">(</span><span class="n">div</span> <span class="n">x</span> <span class="n">y</span><span class="p">)</span>
</code></pre></div>    </div>
  </li>
  <li>
    <div class="language-haskell highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="n">safeGet</span> <span class="o">::</span> <span class="p">[</span><span class="n">a</span><span class="p">]</span> <span class="o">-&gt;</span> <span class="kt">Int</span> <span class="kt">Either</span> <span class="n">a</span> <span class="kt">String</span>
 <span class="n">safeGet</span> <span class="n">x</span> <span class="n">y</span>
     <span class="o">|</span> <span class="n">x</span> <span class="o">&lt;</span> <span class="mi">0</span> <span class="o">=</span> <span class="kt">Right</span> <span class="s">"Negative index."</span>
     <span class="o">|</span> <span class="n">length</span> <span class="n">x</span> <span class="o">&lt;=</span> <span class="n">y</span> <span class="o">=</span> <span class="kt">Right</span> <span class="s">"Index too large."</span>
     <span class="o">|</span> <span class="n">otherwise</span> <span class="o">=</span> <span class="kt">Left</span> <span class="p">(</span><span class="n">x</span> <span class="o">!!</span> <span class="n">y</span><span class="p">)</span>
</code></pre></div>    </div>
  </li>
</ol>
:ET