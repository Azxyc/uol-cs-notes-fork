I"Ù<h2 id="syntax">Syntax</h2>
<p>An <strong>individual name</strong> denote an individual object. They are also called <strong>constant symbols</strong>:</p>

<ul>
  <li>England</li>
  <li>We also use lower case letters: $a,b,c,a_1,a_2,\ldots$</li>
</ul>

<p>An <strong>individual variable</strong> is a placeholder for an individual name. They are denoted by lower case letters:</p>

<ul>
  <li>$x,y,z,x_1,x_2,\ldots$</li>
</ul>

<p>A <strong>class name</strong> denotes a set of individual objects. They are often also called <strong>unary predicate symbols</strong>:</p>

<ul>
  <li>Human_Being</li>
  <li>We also often use upper case letters such as $A,B,C,A_1,A_2$</li>
</ul>

<h3 id="atomic-assertions">Atomic Assertions</h3>

<p>An atomic assertion takes the form $A(b)$ and state the $b$ is in the class $A$:</p>

<ul>
  <li>The assertion,
\(\text{CompetesInPremierLeague}(\text{LiverpoolFC})\) states that Liverpool FC competes in the Premier League.</li>
</ul>

<h3 id="unary-rule">Unary Rule</h3>
<p>A unary rule take the form:
\(A_1(x)\wedge\ldots\wedge A_n(x)\rightarrow A(x)\)
Where $A_1,ldots,A_n$ and $A$ are class names and $x$ is an individual variable.</p>

<ul>
  <li>The $\wedge$ symbol is the symbol for logical AND.</li>
  <li>The $\rightarrow$ symbol means <strong>implies that</strong>.</li>
</ul>

<p>The rule states the everything in all classes $A_1,A_2,\ldots,A_n$ is in the class A.</p>

<h4 id="example">Example</h4>

<p>The rule:
\(\text{Disease}(x)\wedge\text{LocatedInHeart}(x)\rightarrow\text{HeartDisease}(x)\)
states that every disease located in the heart is a heart disease.</p>

<p>You can also say that the result of the evaluation on the left side is a subset of the objects in the set on the right hand side.</p>

<h4 id="unary-rule-based-systems">Unary Rule-Based Systems</h4>
<p>A unary rule-based knowledge base $K$ is a collection $K_a$ of <strong>atomic assertions</strong> and $K_r$ of <strong>unary rules</strong>.</p>

<h5 id="example-1">Example</h5>
<p>Let $K_a$ contain the following atomic assertions:</p>

<ul>
  <li>$\text{CompetesInPremierLeague}(\text{LiverpoolFC})$</li>
  <li>$\text{CompetesInPremierLeague}(\text{Everton})$ and so on for all members of the class $\text{CompetesInPremierLeague}$</li>
</ul>

<p>Let $K_r$ contain the following rules:</p>

<ul>
  <li>$\text{CompetesInPremierLeague}(x)\rightarrow\text{CompetesInFACup}(x)$</li>
  <li>$\text{CompetesInPremierLeague}(x)\rightarrow\text{FootballClub}(x)$</li>
  <li>$\text{CompetesInPremierLeague}(x)\rightarrow\text{BasedInEngland}(x)$</li>
</ul>

<p>The follwoing atomic asseritons follow from $K$:</p>

<ul>
  <li>$\text{CompetesInFACup}(\text{LiverpoolFC})$</li>
  <li>$\text{FootBallClub}(\text{Everton})$, and so on.</li>
</ul>

<p>Thus from 20 facts and 3 rules, we can deduce 60 additional facts. This allows us to store much more data in a compact way.</p>

<h2 id="reasoning-in-rule-based-systems">Reasoning in Rule-Based Systems</h2>
<p>Let $K$ be a knowledge base and $A(b)$ an atomic assertion. Then $A(b)$ <strong>follows from</strong> $K$:
\(K\models A(b)\)</p>

<p>You can also say that $K$ <strong>models</strong> $A(b)$.</p>

<p>This means that whenever $K$ is true, then $A(b)$ is true. If that is not the case you can write $K\nvDash A(b)$.</p>

<h3 id="example-1">Example 1</h3>
<p>In the example $K$ earlier:
\(K\models\text{CompetesInFACup}(\text{LiverpoolFC})\)</p>

<h3 id="example-2">Example 2</h3>
<p>Let:</p>

<ul>
  <li>$K_a=\{A_1(a)\}$</li>
  <li>$K_r=\{A_1(a)\rightarrow A_2(x),A_2(x)\rightarrow A_3(x)\}$</li>
</ul>

<p>Let $K$ contain $K_a$ and $K_r$. Then:</p>

<ul>
  <li>$K\models A_1(a)$</li>
  <li>$K\models A_2(a)$</li>
  <li>$K\models A_3(a)$</li>
</ul>

<p>This chaining shows that if $a$ is in $A_1$ then is also in $A_2$ and so on.</p>
:ET