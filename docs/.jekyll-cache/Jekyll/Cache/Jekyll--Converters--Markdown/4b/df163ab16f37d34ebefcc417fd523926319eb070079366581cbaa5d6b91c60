I"€<h2 id="if">IF</h2>
<h3 id="differences-between-imperative-and-functional">Differences Between Imperative and Functional</h3>
<p>In imperative languages <code class="language-plaintext highlighter-rouge">if</code> changes the control flow but in functional languages there is no control flow.</p>

<p>Functional <code class="language-plaintext highlighter-rouge">if</code> gives a value that you will return based on a test.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>if (1==1) then "yes" else "no"
</code></pre></div></div>

<p>Rather than controlling flow, functional <code class="language-plaintext highlighter-rouge">if</code> chooses between two alternatives and is a pure function.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>f x = (if x &gt; 10 then 1 else 0) + 2
</code></pre></div></div>

<p>The functional <code class="language-plaintext highlighter-rouge">if</code> is more commonly known as the <strong>ternary operator</strong> as it has three arguments.</p>

<h3 id="things-of-note">Things of Note</h3>
<ul>
  <li>For a functional <code class="language-plaintext highlighter-rouge">if</code> both branches much always be present.
    <ul>
      <li>A pure function must always return a value.</li>
    </ul>
  </li>
  <li>Both branches must have the same type.
    <ul>
      <li>This is because Haskell is strongly typed meaning that a single function can only return values of the same type.</li>
    </ul>
  </li>
  <li>Nested <code class="language-plaintext highlighter-rouge">if</code>s are not recommended and there are better ways to complete the same task.</li>
</ul>

<h3 id="structure-of-an-if">Structure of an IF</h3>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>if A then B else C
</code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">A</code>, <code class="language-plaintext highlighter-rouge">B</code> or <code class="language-plaintext highlighter-rouge">C</code> may be anything that can evaluate to a single value. This can be a value itself or another function.</p>

<h3 id="exercises">Exercises</h3>
<ol>
  <li>
    <div class="language-haskell highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="n">between36</span> <span class="n">x</span> <span class="o">=</span> <span class="kr">if</span> <span class="p">(</span><span class="n">x</span> <span class="o">&gt;</span> <span class="mi">3</span> <span class="o">&amp;&amp;</span> <span class="n">x</span> <span class="o">&lt;</span> <span class="mi">6</span><span class="p">)</span> <span class="kr">then</span> <span class="s">"yes"</span> <span class="kr">else</span> <span class="s">"no"</span>
</code></pre></div>    </div>
  </li>
  <li>
    <div class="language-haskell highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="n">min'</span> <span class="n">x</span> <span class="n">y</span> <span class="o">=</span> <span class="kr">if</span> <span class="n">x</span> <span class="o">&lt;</span> <span class="n">y</span> <span class="kr">then</span> <span class="n">x</span> <span class="kr">else</span> <span class="n">y</span>
</code></pre></div>    </div>
  </li>
  <li>
    <div class="language-haskell highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="n">max3</span> <span class="n">x</span> <span class="n">y</span> <span class="n">z</span> <span class="o">=</span> <span class="kr">if</span> <span class="p">(</span><span class="n">x</span> <span class="o">&gt;</span> <span class="n">y</span> <span class="o">&amp;&amp;</span> <span class="n">x</span> <span class="o">&gt;</span> <span class="n">z</span><span class="p">)</span> <span class="kr">then</span> <span class="n">x</span> <span class="kr">else</span> <span class="p">(</span><span class="kr">if</span> <span class="n">y</span> <span class="o">&gt;</span> <span class="n">z</span> <span class="kr">then</span> <span class="n">y</span> <span class="kr">else</span> <span class="n">z</span><span class="p">)</span>
</code></pre></div>    </div>
  </li>
</ol>
:ET