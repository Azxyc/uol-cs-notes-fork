I"µB<h2 id="trees">Trees</h2>

<pre><code class="language-mermaid">graph TD
a[ ] --&gt; b[ ]
a --&gt; c[ ]
b --&gt; d[ ]
b --&gt; e[ ]
d --&gt; f[ ]
d --&gt; g[ ]
c --&gt; h[ ]
c --&gt; i[ ]
</code></pre>

<p>A tree is composed of:</p>

<ul>
  <li>Leaf nodes.
    <ul>
      <li>Leaves have no children.</li>
    </ul>
  </li>
  <li>Branch nodes.
    <ul>
      <li>Has a child which is a leaf.</li>
    </ul>
  </li>
</ul>

<h3 id="a-tree-type-in-haskell">A Tree Type in Haskell</h3>
<p>Any binary tree can be represented in this data type.</p>

<div class="language-haskell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kr">data</span> <span class="kt">Tree</span> <span class="o">=</span> <span class="kt">Leaf</span> <span class="o">|</span> <span class="kt">Branch</span> <span class="kt">Tree</span> <span class="kt">Tree</span> <span class="kr">deriving</span><span class="p">(</span><span class="kt">Show</span><span class="p">)</span>
</code></pre></div></div>

<pre><code class="language-mermaid">graph TD
a[ ] --&gt; b[ ]
a --&gt; c[ ]
c --&gt; h[ ]
c --&gt; i[ ]
</code></pre>

<div class="language-haskell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">Branch</span> <span class="kt">Leaf</span> <span class="p">(</span><span class="kt">Branch</span> <span class="kt">Leaf</span> <span class="kt">Leaf</span><span class="p">)</span>
</code></pre></div></div>

<h3 id="recursion-on-trees">Recursion on Trees</h3>
<p>We can write recursive function that process tress.</p>

<ul>
  <li>Usually the recursive case will process both branches.</li>
</ul>

<p>This function counts all the nodes in a tree:</p>

<div class="language-haskell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">size</span> <span class="o">::</span> <span class="kt">Tree</span> <span class="o">-&gt;</span> <span class="kt">Int</span>

<span class="n">size</span> <span class="p">(</span><span class="kt">Leaf</span><span class="p">)</span> <span class="o">=</span> <span class="mi">1</span>
<span class="n">size</span> <span class="p">(</span><span class="kt">Branch</span> <span class="n">x</span> <span class="n">y</span><span class="p">)</span> <span class="o">=</span> <span class="mi">1</span> <span class="o">+</span><span class="n">size</span> <span class="n">x</span> <span class="o">+</span> <span class="n">size</span> <span class="n">y</span>
</code></pre></div></div>

<p class="info">For trees usually the base case is the <code class="language-plaintext highlighter-rouge">Leaf</code> and the recursive rule operates on the two sub-trees of the branch node.</p>

<div class="language-haskell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&gt;</span> <span class="n">size</span> <span class="p">(</span><span class="kt">Branch</span> <span class="kt">Leaf</span> <span class="p">(</span><span class="kt">Branch</span> <span class="kt">Leaf</span> <span class="kt">Leaf</span><span class="p">))</span>
<span class="mi">5</span>
</code></pre></div></div>

<h2 id="trees-with-data">Trees with Data</h2>
<p>Nodes in a tree often hold data.</p>

<pre><code class="language-mermaid">graph TD
9 --&gt; 4
4 --&gt; 1
4 --&gt; 6
1 --&gt; 10 
1 --&gt; 7
2 --&gt; 3 
2 --&gt; 0
9 --&gt; 2
</code></pre>

<h3 id="type-of-trees-with-data">Type of Trees with Data</h3>
<p>This type allows each branch and leaf to have data of a single type associated with it:</p>

<div class="language-haskell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kr">data</span> <span class="kt">DTree</span> <span class="n">a</span> <span class="o">=</span> <span class="kt">DLeaf</span> <span class="n">a</span>
             <span class="o">|</span> <span class="kt">DBranch</span> <span class="n">a</span> <span class="p">(</span><span class="kt">DTree</span> <span class="n">a</span><span class="p">)</span> <span class="p">(</span><span class="kt">DTree</span> <span class="n">a</span><span class="p">)</span>
             <span class="kr">deriving</span> <span class="p">(</span><span class="kt">Show</span><span class="p">)</span>
</code></pre></div></div>

<pre><code class="language-mermaid">graph TD
1 --&gt; 7
7 --&gt; 2 
7 --&gt; 9
1 --&gt; 4
</code></pre>

<div class="language-haskell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">DBranch</span> <span class="mi">1</span> <span class="p">(</span><span class="kt">DBranch</span> <span class="mi">7</span> <span class="p">(</span><span class="kt">DLeaf</span> <span class="mi">2</span><span class="p">)</span> <span class="p">(</span><span class="kt">DLeaf</span> <span class="mi">9</span><span class="p">))</span> <span class="p">(</span><span class="kt">DLeaf</span> <span class="mi">4</span><span class="p">)</span>
</code></pre></div></div>

<h3 id="recursion-on-trees-with-data">Recursion on Trees with Data</h3>
<p>This function adds together the numbers from all the branches and leaves in a tree with data.</p>

<div class="language-haskell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">tree_sum</span> <span class="o">::</span> <span class="kt">Num</span> <span class="n">a</span> <span class="o">=&gt;</span> <span class="kt">DTree</span> <span class="n">a</span> <span class="o">-&gt;</span> <span class="n">a</span>

<span class="n">tree_sum</span> <span class="p">(</span><span class="kt">DLeaf</span> <span class="n">x</span><span class="p">)</span>       <span class="o">=</span> <span class="n">x</span>
<span class="n">tree_sum</span> <span class="p">(</span><span class="kt">DBranch</span> <span class="n">x</span> <span class="mi">1</span> <span class="n">l</span><span class="p">)</span> <span class="o">=</span> <span class="n">x</span> <span class="o">+</span> <span class="n">tree_sum</span> <span class="n">l</span> <span class="o">+</span> <span class="n">tree_sum</span> <span class="n">r</span>
</code></pre></div></div>

<div class="language-haskell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&gt;</span> <span class="n">tree_sum</span> <span class="p">(</span><span class="kt">DBranch</span> <span class="mi">1</span> <span class="p">(</span><span class="kt">DBranch</span> <span class="mi">7</span> <span class="p">(</span><span class="kt">DLeaf</span> <span class="mi">2</span><span class="p">)</span> <span class="p">(</span><span class="kt">DLeaf</span> <span class="mi">9</span><span class="p">))</span> <span class="p">(</span><span class="kt">DLeaf</span> <span class="mi">4</span><span class="p">))</span>
<span class="mi">22</span>
</code></pre></div></div>

<h4 id="example---fibonacci-numbers">Example - Fibonacci Numbers</h4>
<p>Before we used this code to calculate the Fibonacci numbers. This is slow due to the large amount of branching:</p>

<div class="language-haskell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">fib</span> <span class="mi">0</span> <span class="o">=</span> <span class="mi">0</span>
<span class="n">fib</span> <span class="mi">1</span> <span class="o">=</span> <span class="mi">1</span>
<span class="n">fib</span> <span class="n">n</span> <span class="o">=</span> <span class="n">fib</span> <span class="p">(</span><span class="n">n</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="o">+</span> <span class="n">fib</span> <span class="p">(</span><span class="n">n</span><span class="o">-</span><span class="mi">2</span><span class="p">)</span>
</code></pre></div></div>

<pre><code class="language-mermaid">graph TD
A[fib 4] --&gt; B[fib 3]
A --&gt; C[fib 2]
B --&gt; D[fib 2]
B --&gt; E[fib 1]
D --&gt; F[fib 1]
D --&gt; G[fib 0]
C --&gt; H[fib 1]
C --&gt; I[fib 0]
</code></pre>

<h5 id="how-many-recursive-calls-does-the-code-make">How many recursive calls does the code make?</h5>
<p>We can make a function to build the call tree.</p>

<div class="language-haskell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">fib_tree</span> <span class="o">::</span> <span class="kt">Int</span> <span class="o">-&gt;</span> <span class="kt">Tree</span>

<span class="n">fib_tree</span> <span class="mi">0</span> <span class="o">=</span> <span class="kt">Leaf</span>
<span class="n">fib_tree</span> <span class="mi">1</span> <span class="o">=</span> <span class="kt">Leaf</span>
<span class="n">fib_tree</span> <span class="n">n</span> <span class="o">=</span> <span class="kt">Branch</span> <span class="p">(</span><span class="n">fib_tree</span> <span class="p">(</span><span class="n">n</span><span class="o">-</span><span class="mi">1</span><span class="p">))</span> <span class="p">(</span><span class="n">fib_tree</span> <span class="p">(</span><span class="n">n</span><span class="o">-</span><span class="mi">2</span><span class="p">))</span>
</code></pre></div></div>

<div class="language-haskell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&gt;</span> <span class="n">fib_tree</span> <span class="mi">4</span>
<span class="kt">Branch</span> <span class="p">(</span><span class="kt">Branch</span> <span class="p">(</span><span class="kt">Branch</span> <span class="kt">Leaf</span> <span class="kt">Leaf</span><span class="p">)</span> <span class="kt">Leaf</span><span class="p">)</span> <span class="p">(</span><span class="kt">Branch</span> <span class="kt">Leaf</span> <span class="kt">Leaf</span><span class="p">)</span>
</code></pre></div></div>

<p>This is the same structure  as the tree at the top of the example.</p>

<p>To count the nodes in this tree we can use the function <code class="language-plaintext highlighter-rouge">size</code> from earlier:</p>

<div class="language-haskell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">fib_calls</span> <span class="n">n</span> <span class="o">=</span> <span class="n">size</span> <span class="p">(</span><span class="n">fib_tree</span> <span class="n">n</span><span class="p">)</span>
</code></pre></div></div>

<div class="language-haskell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&gt;</span> <span class="n">fib_calls</span> <span class="mi">10</span>
<span class="mi">177</span>
<span class="o">&gt;</span> <span class="n">fib_calls</span> <span class="mi">20</span>
<span class="mi">21891</span>
<span class="o">&gt;</span><span class="n">fib_calls</span> <span class="mi">30</span>
<span class="mi">2692537</span>
</code></pre></div></div>

<p>As we can see multiple recursion can be very slow if used incorrectly.</p>

<h4 id="example---finding-a-file">Example - Finding a File</h4>
<p>Suppose that we have a directory structure:</p>

<pre><code class="language-mermaid">graph TD
h["~/"] --&gt; d[docs/]
d --&gt; a[a.txt]
d --&gt; b[b.txt]
h --&gt; c[c.txt]
</code></pre>

<p>Write a function that, given a filename, finds the path to that file.</p>

<p>We can formulate the files as a data tree:</p>

<div class="language-haskell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kr">let</span> <span class="n">fs</span> <span class="o">=</span>
    <span class="kt">DBranch</span> <span class="s">"~/"</span>
        <span class="p">(</span><span class="kt">DBranch</span> <span class="s">"docs/"</span> <span class="p">(</span><span class="kt">DLeaf</span> <span class="s">"a.txt"</span> <span class="p">)</span> <span class="p">(</span><span class="kt">DLeaf</span> <span class="s">"b.txt"</span><span class="p">))</span>
        <span class="p">(</span><span class="kt">DLeaf</span> <span class="s">"c.txt"</span><span class="p">)</span>
</code></pre></div></div>

<p class="info">This is the same as the <code class="language-plaintext highlighter-rouge">DTree</code> above.</p>

<p>Note that the file might not exist:</p>

<ul>
  <li>So we will use the maybe type.</li>
</ul>

<div class="language-haskell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&gt;</span> <span class="n">find_file</span> <span class="s">"a.txt"</span> <span class="n">fs</span>
<span class="kt">Just</span> <span class="s">"home/docs/a.txt"</span>

<span class="o">&gt;</span> <span class="n">find_file</span> <span class="s">"d.txt"</span> <span class="n">fs</span>
<span class="kt">Nothing</span>
</code></pre></div></div>

<h5 id="implementation">Implementation</h5>

<div class="language-haskell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">find_file</span> <span class="n">file</span> <span class="p">(</span><span class="kt">Dleaf</span> <span class="n">x</span><span class="p">)</span>
    <span class="o">|</span> <span class="n">x</span> <span class="o">==</span> <span class="n">file</span> <span class="o">=</span> <span class="kt">Just</span> <span class="n">file</span>
    <span class="o">|</span> <span class="n">otherwise</span> <span class="o">=</span> <span class="kt">Nothing</span>
    
<span class="n">find_file</span> <span class="n">file</span> <span class="p">(</span><span class="kt">DBranch</span> <span class="n">x</span> <span class="n">l</span> <span class="n">r</span><span class="p">)</span> <span class="o">=</span>
    <span class="kr">let</span>
        <span class="n">left</span>  <span class="o">=</span> <span class="n">find_file</span> <span class="n">l</span>
        <span class="n">right</span> <span class="o">=</span> <span class="n">find_file</span> <span class="n">r</span>
    <span class="kr">in</span>
        <span class="kr">case</span> <span class="p">(</span><span class="n">left</span><span class="p">,</span> <span class="n">right</span><span class="p">)</span> <span class="kr">of</span>
            <span class="p">(</span><span class="kt">Just</span> <span class="n">y</span><span class="p">,</span> <span class="kr">_</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="kt">Just</span> <span class="p">(</span><span class="n">x</span> <span class="o">++</span> <span class="n">y</span><span class="p">)</span>
            <span class="p">(</span><span class="kr">_</span><span class="p">,</span> <span class="kt">Just</span> <span class="n">y</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="kt">Just</span> <span class="p">(</span><span class="n">x</span> <span class="o">++</span> <span class="n">y</span><span class="p">)</span>
            <span class="p">(</span><span class="kr">_</span><span class="p">,</span> <span class="kr">_</span><span class="p">)</span>      <span class="o">-&gt;</span> <span class="kt">Nothing</span>
</code></pre></div></div>

<p>This implementation has two cases, one for the leaf and one for the branch.</p>

<h2 id="exercises">Exercises</h2>
<ol>
  <li>
    <div class="language-haskell highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="n">leafSum</span> <span class="o">::</span> <span class="kt">DTree</span> <span class="kt">Int</span> <span class="o">-&gt;</span> <span class="kt">Int</span>
 <span class="n">leafSum</span> <span class="p">(</span><span class="kt">DLeaf</span> <span class="n">x</span><span class="p">)</span>       <span class="o">=</span> <span class="n">x</span>
 <span class="n">leafSum</span> <span class="p">(</span><span class="kt">DBranch</span> <span class="kr">_</span> <span class="n">l</span> <span class="n">r</span><span class="p">)</span> <span class="o">=</span> <span class="n">leafSum</span> <span class="n">l</span> <span class="o">+</span> <span class="n">leafSum</span> <span class="n">r</span>
</code></pre></div>    </div>
  </li>
  <li>
    <div class="language-haskell highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="n">treeElem</span> <span class="o">::</span> <span class="kt">Eq</span> <span class="n">a</span> <span class="o">=&gt;</span> <span class="n">a</span> <span class="o">-&gt;</span> <span class="kt">DTree</span> <span class="n">a</span> <span class="o">-&gt;</span> <span class="kt">Bool</span>
 <span class="n">treeElem</span> <span class="n">x</span> <span class="p">(</span><span class="kt">DLeaf</span> <span class="n">y</span><span class="p">)</span> <span class="o">=</span> <span class="n">x</span> <span class="o">==</span> <span class="n">y</span>
 <span class="n">treeElem</span> <span class="n">x</span> <span class="p">(</span><span class="kt">DBranch</span> <span class="n">y</span> <span class="n">l</span> <span class="n">r</span><span class="p">)</span> <span class="o">=</span> <span class="p">(</span><span class="n">x</span> <span class="o">==</span> <span class="n">y</span><span class="p">)</span> <span class="o">||</span> <span class="n">treeElem</span> <span class="n">x</span> <span class="n">l</span> <span class="o">||</span> <span class="n">treeElem</span> <span class="n">x</span> <span class="n">r</span>
</code></pre></div>    </div>
  </li>
</ol>
:ET