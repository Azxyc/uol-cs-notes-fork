I"<p>So far, we have studied pure functional programming. Pure functions:</p>

<ul>
  <li>Have no side effects.</li>
  <li>Always return a value.</li>
  <li>Are deterministic.</li>
</ul>

<p>All <strong>computation</strong> can be done in pure functional programming.</p>

<h2 id="io">IO</h2>
<p>Sometimes programs need to do non-pure things:</p>

<ul>
  <li>Print something to the screen.</li>
  <li>Read or write a file.</li>
  <li>…</li>
</ul>

<h3 id="io-vs-pure-functional">IO v.s. Pure Functional</h3>

<pre><code class="language-mermaid">graph LR
IO --&gt; p[Pure Functional]
p --&gt; IO
</code></pre>

<ul>
  <li>Impure IO code talks to the outside world.</li>
  <li>Pure functional code does the interesting computation.</li>
  <li>IO code can call pure functions; pure functions cannot call IO.</li>
</ul>

<p>We can call the “functions” that complete IO: IO actions. This is because they are not functions.</p>

<h3 id="getline"><code class="language-plaintext highlighter-rouge">getLine</code></h3>
<p><code class="language-plaintext highlighter-rouge">getLine</code> read a line of input from the console.</p>

<div class="language-haskell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&gt;</span> <span class="n">getLine</span>
<span class="n">hello</span> <span class="n">there</span>
<span class="s">"hello there"</span>
</code></pre></div></div>

<div class="language-haskell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&gt;</span> <span class="o">:</span><span class="n">t</span> <span class="n">getLine</span>
<span class="n">getLine</span> <span class="o">::</span> <span class="kt">IO</span> <span class="kt">String</span>
</code></pre></div></div>

<h3 id="the-io-type">The <code class="language-plaintext highlighter-rouge">IO</code> Type</h3>
<p>This type marks a value as being impure.</p>

<p>If a function returns an <code class="language-plaintext highlighter-rouge">IO</code> type then it is impure:</p>

<ul>
  <li>It may have side effects.</li>
  <li>It may return different values for the same inputs.</li>
</ul>

<p>The <code class="language-plaintext highlighter-rouge">IO</code> type should be thought of as a box:</p>

<ul>
  <li>The box hold a value from an impure computation.</li>
  <li>we can use <code class="language-plaintext highlighter-rouge">&lt;-</code> to get an impure value from the <code class="language-plaintext highlighter-rouge">IO</code> type.</li>
</ul>

<div class="language-haskell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&gt;</span> <span class="n">x</span> <span class="o">&lt;-</span> <span class="n">getLine</span>
<span class="kt">Hello</span>
<span class="o">&gt;</span> <span class="n">x</span>
<span class="s">"Hello"</span>
</code></pre></div></div>

<p>Values must be unboxed before you use them in a pure function.</p>

<h3 id="getchar"><code class="language-plaintext highlighter-rouge">getChar</code></h3>

<p>This function is similar to <code class="language-plaintext highlighter-rouge">getLine</code> but returns a single <code class="language-plaintext highlighter-rouge">Char</code> instead of a string.</p>

<h3 id="putstrln"><code class="language-plaintext highlighter-rouge">putStrLn</code></h3>
<p>This IO action prints a string onto the console.</p>

<div class="language-haskell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&gt;</span> <span class="n">putStrLn</span> <span class="s">"Hello"</span>
<span class="kt">Hello</span>
</code></pre></div></div>

<p>There are no quotation marks as we are seeing this being written to the <code class="language-plaintext highlighter-rouge">StdOut</code> and not via <code class="language-plaintext highlighter-rouge">read</code>.</p>

<div class="language-haskell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&gt;</span> <span class="o">:</span><span class="n">t</span> <span class="n">putStrLn</span>
<span class="n">putStrLn</span> <span class="o">::</span> <span class="kt">String</span> <span class="o">-&gt;</span> <span class="kt">IO</span> <span class="nb">()</span>
</code></pre></div></div>

<p>The unit type has the <code class="language-plaintext highlighter-rouge">IO</code> type indicating that it has a side effect.</p>

<h3 id="the-unit-type">The Unit Type</h3>
<p>The unit type is a type represented by <code class="language-plaintext highlighter-rouge">()</code>. It only has one value which is itself.</p>

<p>This is used to indicate that nothing interesting is returned. An example of this is with <code class="language-plaintext highlighter-rouge">putStrLn</code> where is doesn’t return a value but does have the side effect of printing to the <code class="language-plaintext highlighter-rouge">StdOut</code>.</p>

<h2 id="exercise">Exercise</h2>
<ol>
  <li>It will ask for two lines. It will then print out the two lines with a space between them back to the <code class="language-plaintext highlighter-rouge">StdOut</code>.</li>
  <li>It will read in a line with the expectation that there will be a number on it. It will then convert the line into an <code class="language-plaintext highlighter-rouge">Int</code> and print out the number <code class="language-plaintext highlighter-rouge">+ 1</code>.</li>
  <li>Error due to mismatched types. <code class="language-plaintext highlighter-rouge">putStrLn</code> expects a <code class="language-plaintext highlighter-rouge">String</code> but an <code class="language-plaintext highlighter-rouge">IO</code> type was given.</li>
</ol>
:ET