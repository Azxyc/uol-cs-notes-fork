I"ì<p>You cannot express relations between objects using the concepts we have learned so far. <strong>Relations</strong> are expressed as such:</p>

<ul>
  <li>A <strong>relation name</strong> $R$ denotes a set of <strong>pairs</strong> of individual object. Relation names are also called <strong>binary predicates</strong>:
    <ul>
      <li>$\text{sonOf}$</li>
      <li>$\text{grandsonOf}$</li>
      <li>These call also be denotes by upper case letters $R,S,R_1,R_2$ and so on.</li>
    </ul>
  </li>
</ul>

<p>To express that an individual object $a$ is in the relation $R$ to an individual object $b$ we write $R(a,b)$. $R(a,b)$ is <em>also</em> called an <strong>atomic assertion</strong>. This can also be read as $a$ is in relation $R$ to $b$:</p>

<ul>
  <li>$\text{sonOf(Peter, John)}$, where $\text{Peter}$ is the son of $\text{John}$.</li>
</ul>

<h2 id="rule-based-systems">Rule-Based Systems</h2>
<p>A rule has the form:
\(R_1(x_1,y_1)\wedge\ldots\wedge R_n(x_n,y_n)\wedge A_1(x_{n+1})\wedge\ldots\wedge A_m(x_{n+m})\rightarrow R(x,y)\)
or
\(R_1(x_1,y_1)\wedge\ldots\wedge R_n(x_n,y_n)\wedge A_1(x_{n+1})\wedge\ldots\wedge A_m(x_{n+m})\rightarrow A(x)\)
Where:</p>

<ul>
  <li>$R_1,\ldots,R_n$ and $R$ are relation names.</li>
  <li>$A_1,\ldots,A_n$ and $A$ are class names.</li>
  <li>$x_1,y_1,\ldots,x_n,y_n,x_{n+1},\ldots,x_{n+m},x,y$ are individual variables.</li>
</ul>

<p>A rule-based knowledge base $K$ is a collection $K_a$ of atomic assertions and $K_r$ of rules.</p>

<h3 id="example">Example</h3>

<p>Consider the following set $K_a$ of atomic assertions:</p>

<ul>
  <li>$\text{sonOf(Peter, John)}$</li>
  <li>$\text{sonOf(John, Joseph)}$</li>
</ul>

<p>Consider the following set $K_r$ of rules:</p>

<ul>
  <li>$\text{sonOf}(x,y)\wedge\text{sonOf}(y,z)\rightarrow\text{grandsonOf}(x,z)$</li>
</ul>

<p>Then $\text{grandsonOf(Peter, Joseph)}$ follows from $K$, in symbols:
\(K\models\text{grandsonOf(Peter, Joseph)}\)</p>

<h2 id="knowledge-graphs">Knowledge Graphs</h2>

<p>Binary predicates allow us to talk about graphs.</p>

<p>Let $K_r$ contain:</p>

<ul>
  <li>$\text{sonOf}(x,y)\rightarrow\text{descendantOf}(x,y)$</li>
  <li>$\text{sonOf}(x,y)\wedge\text{descendantOf}(y,z)\rightarrow\text{descendantOf}(x,z)$</li>
</ul>

<p>Let $K_A$ be $\{\text{sonOf(Peter, John), sonOf(John, Joseph)}}$</p>

<p>$K_a$ can be seen as the following graph  (individual names = nodes, relations = edges):</p>

<pre><code class="language-mermaid">graph LR
Peter --&gt;|sonOf| John
Peter --&gt;|descendantOf| John
John --&gt;|sonOf| Joseph
John --&gt;|descendantOf| Joseph
Peter --&gt;|descendantOf| Joseph

</code></pre>
<p><em>Labeled Graph.</em></p>

<p>Computing $\text{DerivedAssertions}$ corresponds to graph completion.</p>

<h3 id="example-1">Example</h3>

<p>Let $K_r$ contain:</p>

<ul>
  <li>$\text{childOf}(x,y)\wedge\text{childOf}(z,y)\rightarrow\text{siblingOf}(x,z)$</li>
  <li>$\text{Female}(x)\wedge\text{siblingOf}(x,y)\rightarrow\text{sisterOf}(x,y)$</li>
  <li>$\text{Male}(x)\wedge\text{siblingOf}(x,y)\rightarrow\text{brotherOf}(x,y)$</li>
</ul>

<p>Let $K_a$ be:
\(\\{\text{Female(Alice),Male(Bob),childOf(Alice,Carl),childOf(Bob,Carl)}\}\)</p>

<pre><code class="language-mermaid">graph LR
subgraph Female
Alice
end
subgraph Male
Bob
end
Alice ---|siblingOf| Bob
Alice --&gt;|sisterOf| Bob
Bob --&gt;|brotherOf| Alice
Alice --&gt;|childOf| Carl
Bob --&gt;|childOf| Carl
</code></pre>

<p>We assume different variable are replace by different individuals. This statement means that people canâ€™t be their own siblings.</p>

:ET