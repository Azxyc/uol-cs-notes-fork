I"y<h2 id="defining-custom-functions">Defining Custom Functions</h2>
<p>Functions are defined as such:</p>

<div class="language-haskell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">[</span><span class="n">functionName</span><span class="p">][</span><span class="n">arguments</span><span class="p">][</span><span class="o">=</span><span class="p">][</span><span class="n">body</span><span class="p">]</span>
</code></pre></div></div>

<p>Functions and arguments must start with small letters as only types use capitals.</p>

<p>They can be written into a file and loaded into GHCI or compiled for use in a program. An example of a simple function:</p>

<div class="language-haskell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">addTwo</span> <span class="n">x</span> <span class="o">=</span> <span class="n">x</span> <span class="o">+</span> <span class="mi">2</span>
<span class="n">twoInAddTwo</span> <span class="n">x</span> <span class="n">y</span> <span class="o">=</span> <span class="n">x</span> <span class="o">+</span> <span class="n">y</span> <span class="o">+</span> <span class="mi">2</span>
</code></pre></div></div>

<p class="info">Additional functions are available in <a href="/UoL/assets/COMP105/Lectures/2020-10-14-2.pdf">the slides</a>.</p>

<h2 id="loading-functions">Loading Functions</h2>
<ul>
  <li>To load a functions from a file run GHCI on the file. <code class="language-plaintext highlighter-rouge">ghci functions.hs</code></li>
  <li>To reload the current file run <code class="language-plaintext highlighter-rouge">:reload</code> in GHCI.</li>
  <li>To load in a file run <code class="language-plaintext highlighter-rouge">:load</code> and the file-path.</li>
</ul>

<h2 id="comments">Comments</h2>
<p>Single line comments can be written <code class="language-plaintext highlighter-rouge">-- like this</code></p>

<p>Multi-line comments can be written:</p>

<div class="language-haskell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cm">{- Like
   this-}</span>
</code></pre></div></div>

<h2 id="compilation">Compilation</h2>
<p>Instead of running code in the interpreter you can compile it using GHC. To print the output to the <code class="language-plaintext highlighter-rouge">StdOut</code> you can use the two functions <code class="language-plaintext highlighter-rouge">putStrln(show())</code> to convert the output to a string and print that to the <code class="language-plaintext highlighter-rouge">StdOut</code>.</p>

<p>This is part of the IO function-set and wonâ€™t be used again for a while.</p>

<h2 id="exercises">Exercises</h2>
<ol>
  <li>
    <div class="language-haskell highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="n">double</span> <span class="n">x</span> <span class="o">=</span> <span class="mi">2</span> <span class="o">*</span> <span class="n">x</span>
</code></pre></div>    </div>
  </li>
  <li>
    <div class="language-haskell highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="n">pythagoras</span> <span class="n">a</span> <span class="n">b</span>  <span class="o">=</span> <span class="n">sqrt</span> <span class="p">(</span><span class="n">a</span> <span class="o">**</span> <span class="mi">2</span> <span class="o">+</span> <span class="n">b</span> <span class="o">**</span> <span class="mi">2</span><span class="p">)</span>
</code></pre></div>    </div>
    <ul>
      <li>Must use the float exponentiation operator to allow for floats as a or b.</li>
    </ul>
  </li>
  <li>
    <div class="language-haskell highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="n">maxFour</span> <span class="n">a</span> <span class="n">b</span> <span class="n">c</span> <span class="n">d</span> <span class="o">=</span> <span class="n">max</span> <span class="p">(</span><span class="n">max</span> <span class="n">a</span> <span class="n">b</span><span class="p">)</span> <span class="p">(</span><span class="n">max</span> <span class="n">c</span> <span class="n">d</span><span class="p">)`</span>
</code></pre></div>    </div>
  </li>
</ol>
:ET