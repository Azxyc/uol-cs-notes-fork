I"ã<h2 id="marks-to-report-example">Marks to Report Example</h2>
<p>This lecture covers a mini assignment example about converting a csv file containing students marks into a report containing the students averages. These are presented in the following format:</p>

<pre><code class="language-csv">aaa		70	65	67	60
bbb		55	60	55	65
ccc		40	40	40	40
ddd		80	60	75	60
ccc		0	0	0	100
</code></pre>

<p>And should be transformed to be:</p>

<pre><code class="language-csv">aaa		65.5
bbb		58.75
ccc		40.0
ddd		68.75
ccc		25.0
</code></pre>

<p class="info">See the <a href="COMP105201119-1.pdf">slides</a> for the full examples.</p>

<h3 id="reading-files-in-haskell">Reading files in Haskell</h3>
<p>We can read a file using <code class="language-plaintext highlighter-rouge">readFile</code>:</p>

<ul>
  <li>This is an IO function.</li>
  <li>We will study this in more detail later on.</li>
</ul>

<div class="language-haskell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&gt;</span> <span class="n">readfile</span> <span class="s">"marks.csv"</span>
<span class="o">&gt;</span> <span class="s">"aaa		70	65	67	60</span><span class="se">\n</span><span class="s">bbb		55	60	55...
</span></code></pre></div></div>

<p>The <code class="language-plaintext highlighter-rouge">\n</code> character is the newline character.</p>

<h3 id="lines"><code class="language-plaintext highlighter-rouge">lines</code></h3>
<p>The lines function takes a string containing multiple lines into a list of strings. The complement to this function is the function <code class="language-plaintext highlighter-rouge">unlines</code>. This will do the opposite.</p>

<h3 id="parsing-the-file">Parsing the File</h3>
<p>Using the functions <code class="language-plaintext highlighter-rouge">words</code> and <code class="language-plaintext highlighter-rouge">lines</code> we can put the file into a list of lists of strings, in order to process the file.</p>

<h3 id="getting-the-averages">Getting the Averages</h3>
<p>The function <code class="language-plaintext highlighter-rouge">read</code> will convert a string into a float.</p>

<h3 id="writing-the-output-file">Writing the Output File</h3>
<p>The function <code class="language-plaintext highlighter-rouge">writeFile</code> will write some data into a file:</p>

<div class="language-haskell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&gt;</span> <span class="n">writeFile</span> <span class="s">"test.txt"</span> <span class="s">"hello"</span>
</code></pre></div></div>

<p>This is not a pure function and we will see it again later.</p>

<h3 id="all-in-one-function">All in One Function</h3>
<p>The pure function portion of the exercise will read as the following:</p>

<div class="language-haskell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">report</span> <span class="n">file</span> <span class="o">=</span> 
	<span class="kr">let</span>
		<span class="n">parsed</span>		<span class="o">=</span> <span class="n">map</span> <span class="n">words</span> <span class="o">.</span> <span class="n">lines</span> <span class="o">$</span> <span class="n">file</span>
		<span class="n">students</span>	<span class="o">=</span> <span class="n">map</span> <span class="n">name</span> <span class="n">parsed</span>
		<span class="n">averages</span>	<span class="o">=</span> <span class="n">map</span> <span class="n">average</span> <span class="n">parsed</span>
		<span class="n">zipped</span>		<span class="o">=</span> <span class="n">zipWith</span> <span class="n">report_line</span> <span class="n">students</span> <span class="n">averages</span>
	<span class="kr">in</span>
		<span class="n">unlines</span> <span class="n">zipped</span>
</code></pre></div></div>
:ET