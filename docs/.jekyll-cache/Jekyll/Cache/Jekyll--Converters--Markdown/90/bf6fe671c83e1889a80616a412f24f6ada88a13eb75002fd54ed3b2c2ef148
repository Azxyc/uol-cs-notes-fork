I"­,<h2 id="parameterised-custom-types">Parameterised Custom Types</h2>
<h3 id="type-variables-in-custom-types">Type Variables in Custom Types</h3>
<p>We can use type variables in custom types:</p>

<div class="language-haskell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kr">data</span> <span class="kt">Point</span> <span class="n">a</span> <span class="o">=</span> <span class="kt">Point</span> <span class="n">a</span> <span class="n">a</span>
</code></pre></div></div>
<p>Here we say we are making a new type where the <strong>constructor</strong> <code class="language-plaintext highlighter-rouge">point</code> is made of type <code class="language-plaintext highlighter-rouge">a</code>.</p>

<div class="language-haskell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&gt;</span> <span class="o">:</span><span class="n">t</span> <span class="kt">Point</span> <span class="p">(</span><span class="mi">1</span><span class="o">::</span><span class="kt">Int</span><span class="p">)</span> <span class="p">(</span><span class="mi">2</span><span class="o">::</span><span class="kt">Int</span><span class="p">)</span>
<span class="kt">Point</span> <span class="kt">Int</span>
</code></pre></div></div>

<p>We can also use multiple variable in the same type.</p>

<div class="language-haskell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kr">data</span> <span class="kt">Things</span> <span class="n">a</span> <span class="n">b</span> <span class="n">c</span> <span class="o">=</span> <span class="kt">Things</span> <span class="n">a</span> <span class="n">b</span> <span class="n">c</span> <span class="kr">deriving</span> <span class="p">(</span><span class="kt">Show</span><span class="p">)</span>
</code></pre></div></div>

<div class="language-haskell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&gt;</span> <span class="kt">Things</span> <span class="s">"string"</span> <span class="mi">1</span> <span class="kt">True</span>
<span class="kt">Things</span> <span class="s">"string"</span> <span class="mi">1</span> <span class="kt">True</span>
</code></pre></div></div>

<p class="warning">When using a type that includes type variables the resultant type has its own type based on the types of data it was given. This links to how you canâ€™t  compare lists of two different types.</p>

<p>We can write functions using these types:</p>

<div class="language-haskell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">first_thing</span> <span class="p">(</span><span class="kt">Things</span> <span class="n">x</span> <span class="kr">_</span> <span class="kr">_</span><span class="p">)</span> <span class="o">=</span> <span class="n">x</span>
</code></pre></div></div>

<div class="language-haskell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&gt;</span> <span class="n">first_thing</span> <span class="p">(</span><span class="kt">Things</span> <span class="mi">1</span> <span class="mi">2</span> <span class="mi">3</span><span class="p">)</span>
<span class="mi">1</span>
<span class="o">&gt;</span> <span class="o">:</span><span class="n">t</span> <span class="n">first_thing</span>
<span class="n">first_thing</span> <span class="o">::</span> <span class="kt">Things</span> <span class="n">a</span> <span class="n">b</span> <span class="n">c</span> <span class="o">-&gt;</span> <span class="n">a</span>
</code></pre></div></div>

<h3 id="case-expressions"><code class="language-plaintext highlighter-rouge">case</code> Expressions</h3>
<p><code class="language-plaintext highlighter-rouge">case</code> expressions allow you to do pattern matching inside of functions.</p>

<div class="language-haskell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kr">data</span> <span class="kt">Example</span> <span class="o">=</span> <span class="kt">One</span> <span class="kt">Int</span> <span class="o">|</span> <span class="kt">Two</span> <span class="kt">Float</span>

<span class="n">f</span> <span class="o">::</span> <span class="kt">Example</span> <span class="o">-&gt;</span> <span class="kt">Int</span>
<span class="n">f</span> <span class="n">x</span> <span class="o">=</span> <span class="kr">case</span> <span class="n">x</span> <span class="kr">of</span> <span class="kt">One</span> <span class="n">a</span> <span class="o">-&gt;</span> <span class="n">a</span>
                <span class="kt">Two</span> <span class="n">b</span> <span class="o">-&gt;</span> <span class="mi">0</span>
</code></pre></div></div>

<div class="language-haskell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&gt;</span> <span class="n">f</span> <span class="p">(</span><span class="kt">One</span> <span class="mi">3</span><span class="p">)</span>
<span class="mi">3</span>
<span class="o">&gt;</span> <span class="n">f</span> <span class="p">(</span><span class="kt">Two</span> <span class="mf">4.0</span><span class="p">)</span>
<span class="mi">0</span>
</code></pre></div></div>

<h4 id="example">Example</h4>
<p>Using <code class="language-plaintext highlighter-rouge">case</code> you can write functions that formerly would have been implemented in pattern matching:</p>

<div class="language-haskell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">f</span> <span class="kt">[]</span> <span class="o">=</span> <span class="mi">0</span> 
<span class="n">f</span> <span class="p">(</span><span class="n">x</span><span class="o">:</span><span class="n">xs</span><span class="p">)</span> <span class="o">=</span> <span class="mi">1</span> <span class="o">+</span> <span class="n">f</span> <span class="n">xs</span>

<span class="n">f'</span> <span class="n">list</span> <span class="o">=</span> <span class="kr">case</span> <span class="n">list</span> <span class="kr">of</span>  <span class="kt">[]</span>      <span class="o">-&gt;</span> <span class="mi">0</span>
                        <span class="p">(</span><span class="n">x</span><span class="o">:</span><span class="n">xs</span><span class="p">)</span>  <span class="o">-&gt;</span> <span class="mi">1</span> <span class="o">+</span> <span class="n">f</span> <span class="n">xs</span>
</code></pre></div></div>

<h4 id="syntax">Syntax</h4>
<p>The syntax for a case expression is:</p>

<div class="language-haskell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kr">case</span> <span class="p">[</span><span class="n">expression</span><span class="p">]</span> <span class="kr">of</span>    <span class="p">[</span><span class="n">pattern</span> <span class="mi">1</span><span class="p">]</span> <span class="o">-&gt;</span> <span class="p">[</span><span class="n">expression</span><span class="p">]</span>
                        <span class="p">[</span><span class="n">pattern</span> <span class="mi">2</span><span class="p">]</span> <span class="o">-&gt;</span> <span class="p">[</span><span class="n">expression</span><span class="p">]</span>
                        <span class="o">...</span>
                        <span class="p">[</span><span class="n">pattern</span> <span class="n">k</span><span class="p">]</span> <span class="o">-&gt;</span> <span class="p">[</span><span class="n">expression</span><span class="p">]</span>
</code></pre></div></div>

<p class="warning">All patterns should be on the same column in order for Haskell to process the expression correctly.</p>

<p>Additionally you can use the <code class="language-plaintext highlighter-rouge">_</code> as a catch all at the end of the expression.</p>

<p>You can put them all on one line using the following syntax:</p>

<div class="language-haskell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kr">case</span> <span class="n">x</span> <span class="kr">of</span> <span class="p">{</span><span class="kt">One</span> <span class="n">a</span> <span class="o">-&gt;</span> <span class="n">a</span><span class="p">;</span> <span class="kt">Two</span> <span class="n">b</span> <span class="o">-&gt;</span> <span class="mi">0</span><span class="p">}</span>
</code></pre></div></div>

<p>Finally <code class="language-plaintext highlighter-rouge">case</code> is an expression so you can treat its result as a value:</p>

<div class="language-haskell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&gt;</span> <span class="p">(</span><span class="kr">case</span> <span class="mi">1</span> <span class="kr">of</span> <span class="mi">1</span> <span class="o">-&gt;</span> <span class="mi">1</span><span class="p">)</span> <span class="o">+</span> <span class="p">(</span><span class="kr">case</span> <span class="mi">2</span> <span class="kr">of</span> <span class="mi">2</span> <span class="o">-&gt;</span> <span class="mi">1</span><span class="p">)</span>
<span class="mi">2</span>
</code></pre></div></div>

<h2 id="exercises">Exercises</h2>
<ol>
  <li>
    <div class="language-haskell highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="kr">data</span> <span class="kt">BigThings</span> <span class="n">a</span> <span class="n">b</span> <span class="n">c</span> <span class="n">d</span> <span class="o">=</span> <span class="kt">BigThings</span> <span class="n">a</span> <span class="n">b</span> <span class="n">c</span> <span class="n">d</span> <span class="n">derive</span> <span class="kt">Show</span>
</code></pre></div>    </div>
  </li>
  <li>
    <div class="language-haskell highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="n">middleTwo</span> <span class="o">::</span> <span class="kt">BigThings</span> <span class="n">a</span> <span class="n">b</span> <span class="n">c</span> <span class="n">d</span> <span class="o">-&gt;</span> <span class="p">(</span><span class="n">b</span><span class="p">,</span> <span class="n">c</span><span class="p">)</span>
 <span class="n">middleTwo</span> <span class="p">(</span><span class="kt">BigThings</span> <span class="kr">_</span> <span class="n">x</span> <span class="n">y</span> <span class="kr">_</span><span class="p">)</span> <span class="o">=</span> <span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">)</span>
</code></pre></div>    </div>
  </li>
  <li>
    <div class="language-haskell highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="kr">data</span> <span class="kt">Example</span> <span class="o">=</span> <span class="kt">One</span> <span class="kt">Int</span> <span class="o">|</span> <span class="kt">Two</span> <span class="kt">Float</span>
 <span class="n">isOne</span> <span class="o">::</span> <span class="kt">Example</span> <span class="o">-&gt;</span> <span class="kt">Bool</span>
 <span class="n">isOne</span> <span class="n">x</span> <span class="o">=</span> <span class="kr">case</span> <span class="n">x</span> <span class="kr">of</span> <span class="kt">One</span> <span class="kr">_</span> <span class="o">-&gt;</span> <span class="kt">True</span>
                     <span class="kr">_</span>     <span class="o">-&gt;</span> <span class="kt">False</span>
</code></pre></div>    </div>
  </li>
</ol>
:ET