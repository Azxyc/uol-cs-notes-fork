I"q<h2 id="anonymous-functions">Anonymous Functions</h2>
<p>Sometimes is it convenient to define a function inline. Anonymous functions allow you to use a function without a name.</p>

<div class="language-haskell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&gt;</span> <span class="p">(</span><span class="nf">\</span> <span class="n">x</span> <span class="o">-&gt;</span> <span class="n">x</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span> <span class="mi">7</span>
<span class="o">&gt;</span> <span class="mi">8</span>
</code></pre></div></div>

<p>This allows you to pass functions to a higher order function without giving it a name:</p>

<div class="language-haskell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&gt;</span> <span class="n">apply_twice</span> <span class="p">(</span><span class="nf">\</span> <span class="n">x</span> <span class="o">-&gt;</span> <span class="mi">2</span> <span class="o">*</span> <span class="n">x</span> <span class="p">)</span> <span class="mi">2</span>
<span class="o">&gt;</span> <span class="mi">8</span>
</code></pre></div></div>

<h3 id="syntax">Syntax</h3>
<p>The syntax for an anonymous function is:</p>

<div class="language-haskell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">\</span> <span class="p">[</span><span class="n">arg1</span><span class="p">]</span> <span class="p">[</span><span class="n">arg2</span><span class="p">]</span>  <span class="o">...</span> <span class="o">-&gt;</span> <span class="p">[</span><span class="n">expression</span><span class="p">]</span>
</code></pre></div></div>

<p>The <code class="language-plaintext highlighter-rouge">\</code> is supposed to resemble an lambda \(\lambda\).</p>

<ul>
  <li>Anonymous function are sometimes called \(\lambda\)-functions in recognition of lambda calculus.</li>
</ul>

<h3 id="functions-that-return-functions">Functions that Return Functions</h3>
<p>Higher order functions can also return other functions:</p>

<div class="language-haskell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">f_than_adds_n</span> <span class="o">::</span> <span class="kt">Int</span> <span class="o">-&gt;</span> <span class="p">(</span><span class="kt">Int</span> <span class="o">-&gt;</span> <span class="kt">Int</span><span class="p">)</span>
<span class="n">f_that_adds_n</span> <span class="n">n</span> <span class="o">=</span> <span class="p">(</span><span class="nf">\</span><span class="n">x</span> <span class="o">-&gt;</span> <span class="n">x</span> <span class="o">+</span> <span class="n">n</span><span class="p">)</span>

<span class="o">&gt;</span> <span class="kr">let</span> <span class="n">f</span> <span class="o">=</span> <span class="p">(</span><span class="n">f_that_adds_n</span> <span class="mi">10</span><span class="p">)</span> <span class="kr">in</span> <span class="p">(</span><span class="n">f</span> <span class="mi">1</span><span class="p">)</span>
<span class="o">&gt;</span> <span class="mi">11</span>
</code></pre></div></div>

<p>This function returns another function that you can use in other functions.</p>

<p>Higher order function can take and return functions:</p>

<div class="language-haskell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">swap</span> <span class="n">f</span> <span class="o">=</span> <span class="nf">\</span> <span class="n">x</span> <span class="n">y</span> <span class="o">-&gt;</span> <span class="n">f</span> <span class="n">y</span> <span class="n">x</span>
</code></pre></div></div>

<p>This is a two argument function and then swaps the arguments for the function.</p>

<div class="language-haskell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">g</span> <span class="o">=</span> <span class="n">swap</span> <span class="n">take</span>
</code></pre></div></div>

<p>This has swapped the arguments for the function <code class="language-plaintext highlighter-rouge">take</code> and can be called with <code class="language-plaintext highlighter-rouge">g</code></p>

<h3 id="currying-revisited">Currying Revisited</h3>
<p>Previously weâ€™ve seen that it is possible to partially apply a function:</p>

<div class="language-haskell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">add_two</span> <span class="o">=</span> <span class="p">(</span><span class="o">+</span><span class="mi">2</span><span class="p">)</span>
</code></pre></div></div>

<p>This is just a nicer syntax for a function that returns a function:</p>

<div class="language-haskell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">add_two</span> <span class="o">=</span> <span class="p">(</span><span class="nf">\</span> <span class="n">x</span> <span class="o">-&gt;</span> <span class="n">x</span> <span class="o">+</span> <span class="mi">2</span><span class="p">)</span>
</code></pre></div></div>

<h2 id="exercises">Exercises</h2>
<ol>
  <li>
    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code> (\ x y -&gt; x + y)
</code></pre></div>    </div>
  </li>
  <li>
    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code> addChar c = (\ string -&gt; string ++ [c])
</code></pre></div>    </div>
  </li>
  <li>
    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code> curry' :: ((a, b) -&gt; c) -&gt; (a -&gt; b -&gt; c)
 curry' f = (\ x y -&gt; f (x, y))
</code></pre></div>    </div>
  </li>
</ol>
:ET