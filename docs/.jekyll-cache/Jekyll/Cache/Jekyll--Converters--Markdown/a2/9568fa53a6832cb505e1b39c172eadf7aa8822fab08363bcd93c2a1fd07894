I"É
<h2 id="what-is-a-pure-function">What is a pure function?</h2>
<p>A function takes inputs and produces outputs. E.g. Input: \(x\), Output: \(f(x)\)</p>

<p>In imperative languages, functions can do much more and are called <em>subroutines</em>.</p>

<p class="info">Every function can be implemented in a subroutine but not all subroutines are functions.</p>

<p>A function maps inputs to outputs, however subroutines can have an effect on the <strong>global state</strong>. The global state is anything that is not within the function, such as modifying global variables, printing, network accessâ€¦</p>

<p class="info">Pure functions only influence the outside world through the return value.</p>

<h2 id="when-does-this-matter">When does this matter?</h2>
<p>When the compiler compiles the code it may want to change the order of the instructions:</p>

<div class="language-haskell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">y</span> <span class="o">=</span> <span class="n">f</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span> <span class="o">+</span> <span class="n">f</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span>  
<span class="n">y</span> <span class="o">=</span> <span class="n">f</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span> <span class="o">+</span> <span class="n">f</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
</code></pre></div></div>

<p>For a function this will work but for a subroutine it may write out globally and not produce the desired effect.</p>

<p>Using functions makes compiler optimisations, code refactoring, and parallelization easier as the functions can be run in different orders, or concurrently at runtime.</p>

<h2 id="more-rules">More Rules</h2>
<p class="info">Pure functions <strong>always</strong> return a value</p>

<p>This is because pure functions only interact via their return value. If they donâ€™t have a return value they have no effect.</p>

<p class="info">Pure functions must be <strong>deterministic</strong>.</p>

<p>This means that they must return the same value every time, provided that they have the same input.</p>

<p>Determinism allows for logical assumptions such as <code class="language-plaintext highlighter-rouge">f(x) + f(x) == 2 * f(x)</code>. If the function was a subroutine and returned a random value this wouldnâ€™t be the case.</p>

<h2 id="summary">Summary</h2>
<ul>
  <li>Pure Functions
    <ul>
      <li>Are a black box</li>
      <li>Have no side effects</li>
      <li>Are deterministic</li>
    </ul>
  </li>
</ul>

<p>Every pure function is a subroutine, some subroutines are not pure functions.</p>
:ET