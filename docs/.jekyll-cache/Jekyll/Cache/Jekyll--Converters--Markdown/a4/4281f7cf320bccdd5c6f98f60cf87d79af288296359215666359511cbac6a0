I"5<h2 id="more-higher-order-functions">More Higher Order Functions</h2>
<h3 id="scan">Scan</h3>
<p>The scan set of functions is similar to the fold set of functions. However instead of outputting a single value it outputs a list showing the accumulator at each step in the function:</p>

<div class="language-haskell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&gt;</span> <span class="n">scanr</span> <span class="p">(</span><span class="o">+</span><span class="p">)</span> <span class="mi">0</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">]</span>
<span class="o">&gt;</span> <span class="p">[</span><span class="mi">10</span><span class="p">,</span><span class="mi">9</span><span class="p">,</span><span class="mi">7</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">0</span><span class="p">]</span>
</code></pre></div></div>

<p>The function <code class="language-plaintext highlighter-rouge">scanr</code> is implemented like so:</p>

<div class="language-haskell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">scanr'</span> <span class="o">::</span> <span class="p">(</span><span class="n">a</span><span class="o">-&gt;</span> <span class="n">b</span> <span class="o">-&gt;</span> <span class="n">b</span> <span class="o">-&gt;</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">b</span> <span class="o">-&gt;</span> <span class="p">[</span><span class="n">a</span><span class="p">]</span> <span class="o">-&gt;</span> <span class="p">[</span><span class="n">b</span><span class="p">]</span>

<span class="n">scanr'</span> <span class="kr">_</span> <span class="n">init</span> <span class="kt">[]</span> <span class="o">=</span> <span class="p">[</span><span class="n">init</span><span class="p">]</span>
<span class="n">scanr'</span> <span class="n">f</span> <span class="n">init</span> <span class="p">(</span><span class="n">x</span><span class="o">:</span><span class="n">xs</span><span class="p">)</span> <span class="o">=</span>
	<span class="kr">let</span>
		<span class="n">recursed</span> <span class="o">=</span> <span class="n">scanr'</span> <span class="n">f</span> <span class="n">init</span> <span class="n">xs</span>
		<span class="n">new</span> <span class="o">=</span> <span class="n">f</span> <span class="n">x</span> <span class="p">(</span><span class="n">head</span> <span class="n">recursed</span><span class="p">)</span>
	<span class="kr">in</span>
		<span class="n">new</span> <span class="o">:</span> <span class="n">recursed</span>
</code></pre></div></div>

<h4 id="scan-variants">Scan Variants</h4>
<p>There are also left to right versions of scan:</p>

<div class="language-haskell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&gt;</span> <span class="n">scanl</span> <span class="p">(</span><span class="o">+</span><span class="p">)</span> <span class="mi">0</span> <span class="p">[</span><span class="mi">1</span><span class="o">..</span><span class="mi">10</span><span class="p">]</span>
<span class="o">&gt;</span> <span class="p">[</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">6</span><span class="p">,</span><span class="mi">10</span><span class="p">,</span><span class="mi">15</span><span class="p">,</span><span class="mi">21</span><span class="p">,</span><span class="mi">28</span><span class="p">,</span><span class="mi">36</span><span class="p">,</span><span class="mi">45</span><span class="p">,</span><span class="mi">55</span><span class="p">]</span>
</code></pre></div></div>

<p>A good way to understand the accumulator in a fold is to do a scan and observe the output.</p>

<h4 id="fibonacci-example">Fibonacci Example</h4>

<div class="language-haskell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">fib_pairs</span> <span class="n">n</span> <span class="o">=</span> <span class="n">scanl</span> <span class="p">(</span><span class="nf">\</span> <span class="p">(</span><span class="n">a</span><span class="p">,</span><span class="n">b</span> <span class="kr">_</span> <span class="o">-&gt;</span> <span class="p">(</span><span class="n">b</span><span class="p">,</span><span class="n">a</span> <span class="o">+</span> <span class="n">b</span><span class="p">))</span> <span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">)</span> <span class="p">[</span><span class="mi">1</span><span class="o">..</span><span class="n">n</span><span class="p">]</span>
<span class="n">fib_to_n</span> <span class="n">n</span> <span class="o">=</span> <span class="n">map</span> <span class="n">fst</span> <span class="p">(</span><span class="n">fib_pairs</span> <span class="n">n</span><span class="p">)</span>

<span class="o">&gt;</span> <span class="n">fib_pairs</span> <span class="mi">3</span>
<span class="o">&gt;</span> <span class="p">[(</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">),(</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">),(</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">)]</span>

<span class="o">&gt;</span> <span class="n">fib_to_n</span> <span class="mi">3</span>
<span class="o">&gt;</span> <span class="p">[</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">]</span>
</code></pre></div></div>

<h2 id="exercises">Exercises</h2>
<ol>
  <li>
    <div class="language-haskell highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="n">prefixMaximum</span> <span class="n">list</span> <span class="o">=</span> <span class="n">scanl1</span> <span class="n">max</span> <span class="n">list</span>
</code></pre></div>    </div>

    <p>As <code class="language-plaintext highlighter-rouge">max</code> is already a two argument function that takes <code class="language-plaintext highlighter-rouge">acc</code> and <code class="language-plaintext highlighter-rouge">x</code>, then we donâ€™t have to make our own anonymous function.</p>
  </li>
  <li>
    <div class="language-haskell highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="n">powersOfTwo</span> <span class="n">n</span> <span class="o">=</span> <span class="n">scanl</span> <span class="p">(</span><span class="nf">\</span> <span class="n">acc</span> <span class="kr">_</span> <span class="o">-&gt;</span> <span class="mi">2</span> <span class="o">*</span> <span class="n">acc</span><span class="p">)</span> <span class="mi">1</span> <span class="p">[</span><span class="mi">1</span><span class="o">..</span><span class="n">n</span><span class="p">]</span>
</code></pre></div>    </div>
  </li>
</ol>
:ET