I"N<h2 id="list-recursion">List Recursion</h2>
<p>Lists have a <strong>head</strong> and a <strong>tail</strong>. We use these command and pattern matching to recurse lists. Generally list recursions use the empty list <code class="language-plaintext highlighter-rouge">[]</code> as part of the base case.</p>

<h3 id="consuming-lists">Consuming Lists</h3>

<div class="language-haskell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">sum'</span> <span class="kt">[]</span>		<span class="o">=</span> <span class="mi">0</span> 
<span class="n">sum'</span> <span class="p">(</span><span class="n">x</span><span class="o">:</span><span class="n">xs</span><span class="p">)</span>	<span class="o">=</span> <span class="n">x</span> <span class="o">+</span> <span class="n">sum'</span> <span class="n">xs</span>
</code></pre></div></div>

<ul>
  <li>The base case is the empty list.</li>
  <li>The recursive rule breaks the list into its head and tail.</li>
</ul>

<div class="language-haskell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">length'</span> <span class="kt">[]</span>		<span class="o">=</span> <span class="mi">0</span>
<span class="n">length'</span> <span class="p">(</span><span class="kr">_</span><span class="o">:</span><span class="n">xs</span><span class="p">)</span>	<span class="o">=</span> <span class="mi">1</span> <span class="o">+</span> <span class="n">length'</span> <span class="n">xs</span>
</code></pre></div></div>

<ul>
  <li>This time the head of the list isnâ€™t used.</li>
</ul>

<h4 id="building-lists">Building Lists</h4>
<p>We can also build lists using recursion.</p>

<div class="language-haskell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">down_from</span> <span class="mi">0</span>	<span class="o">=</span> <span class="kt">[]</span>
<span class="n">down_from</span> <span class="n">x</span>	<span class="o">=</span> <span class="n">x</span> <span class="o">:</span> <span class="n">down_from</span> <span class="p">(</span><span class="n">x</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span>
</code></pre></div></div>

<p>This will produce a list counting down from the number provided until  zero is reached.</p>

<h4 id="transforming-lists">Transforming Lists</h4>
<p>If you want to consume and build a list in one go it is called transforming a list.</p>

<div class="language-haskell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">square_list</span> <span class="kt">[]</span>		<span class="o">=</span> <span class="kt">[]</span>
<span class="n">square_list</span> <span class="p">(</span><span class="n">x</span><span class="o">:</span><span class="n">xs</span><span class="p">)</span>	<span class="o">=</span> <span class="n">x</span> <span class="o">*</span> <span class="n">x</span> <span class="o">:</span> <span class="n">square_list</span> <span class="n">xs</span>
</code></pre></div></div>

<p>This list will square each value and add it recursively onto the list.</p>

<p>The defining feature of transforming lists is that the base case has an input of <code class="language-plaintext highlighter-rouge">[]</code> which is equal to the output of <code class="language-plaintext highlighter-rouge">[]</code>.</p>

<h2 id="exercises">Exercises</h2>
<ol>
  <li>
    <div class="language-haskell highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="n">product'</span> <span class="kt">[]</span>		<span class="o">=</span> <span class="mi">1</span>
 <span class="n">product'</span> <span class="p">(</span><span class="n">x</span><span class="o">:</span><span class="n">xs</span><span class="p">)</span>	<span class="o">=</span> <span class="n">x</span> <span class="o">*</span> <span class="n">product'</span> <span class="n">xs</span>
</code></pre></div>    </div>
  </li>
  <li>
    <div class="language-haskell highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="n">upToTen</span> <span class="mi">10</span>	<span class="o">=</span> <span class="mi">10</span>
 <span class="n">upToTen</span> <span class="n">x</span> 	<span class="o">=</span> <span class="n">x</span> <span class="o">:</span> <span class="n">upToTen</span> <span class="p">(</span><span class="n">x</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span>
</code></pre></div>    </div>
  </li>
  <li>
    <div class="language-haskell highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="n">halveList</span> <span class="kt">[]</span> 		<span class="o">=</span> <span class="kt">[]</span>
 <span class="n">halveList</span> <span class="p">(</span><span class="n">x</span><span class="o">:</span><span class="n">xs</span><span class="p">)</span> 	<span class="o">=</span> <span class="p">(</span><span class="n">x</span> <span class="o">/</span> <span class="mi">2</span><span class="p">)</span> <span class="o">:</span> <span class="n">halveList</span> <span class="p">(</span><span class="n">xs</span><span class="p">)</span>
</code></pre></div>    </div>
  </li>
</ol>
:ET