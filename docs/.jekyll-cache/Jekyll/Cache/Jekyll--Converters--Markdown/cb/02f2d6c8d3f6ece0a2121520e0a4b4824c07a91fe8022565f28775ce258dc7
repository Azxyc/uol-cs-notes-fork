I"•<<h2 id="more-higher-order-functions---continued">More Higher Order Functions - Continued</h2>
<h3 id="takewhile"><code class="language-plaintext highlighter-rouge">takewhile</code></h3>
<p>This function takes while a condition is true.</p>

<div class="language-haskell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&gt;</span> <span class="n">takeWhile</span> <span class="p">(</span><span class="o">&lt;=</span><span class="mi">5</span><span class="p">)</span> <span class="p">[</span><span class="mi">1</span><span class="o">..</span><span class="mi">10</span><span class="p">]</span>
<span class="o">&gt;</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">5</span><span class="p">]</span>
</code></pre></div></div>

<p>This is different to <code class="language-plaintext highlighter-rouge">filter</code> which only removes individual elements.</p>

<div class="language-haskell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&gt;</span> <span class="n">takeWhile</span> <span class="p">(</span><span class="nf">\</span> <span class="n">x</span> <span class="o">-&gt;</span> <span class="n">length</span> <span class="n">x</span> <span class="o">&lt;=</span> <span class="mi">2</span><span class="p">)</span> <span class="p">[</span><span class="s">"ab"</span><span class="p">,</span><span class="s">"cd"</span><span class="p">,</span><span class="s">"efg"</span><span class="p">]</span>
<span class="o">&gt;</span> <span class="p">[</span><span class="s">"ab"</span><span class="p">,</span> <span class="s">"cd"</span><span class="p">]</span>
</code></pre></div></div>

<h4 id="implementation">Implementation</h4>

<div class="language-haskell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">takeWhile'</span> <span class="o">::</span> <span class="p">(</span><span class="n">a</span> <span class="o">-&gt;</span> <span class="kt">Bool</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="p">[</span><span class="n">a</span><span class="p">]</span> <span class="o">-&gt;</span> <span class="p">[</span><span class="n">a</span><span class="p">]</span>

<span class="n">takeWhile'</span> <span class="kr">_</span> <span class="kt">[]</span> <span class="o">=</span> <span class="kt">[]</span>
<span class="n">takeWhile'</span> <span class="n">f</span> <span class="p">(</span><span class="n">x</span><span class="o">:</span><span class="n">xs</span><span class="p">)</span>
	<span class="o">|</span> <span class="n">f</span> <span class="n">x</span> <span class="o">=</span> <span class="n">x</span> <span class="o">:</span> <span class="n">takeWhile'</span> <span class="n">f</span> <span class="n">xs</span>
	<span class="o">|</span> <span class="n">otherwise</span> <span class="o">=</span> <span class="kt">[]</span>
</code></pre></div></div>

<h3 id="dropwhile"><code class="language-plaintext highlighter-rouge">dropWhile</code></h3>
<p>This is the opposite of the previous function:</p>

<div class="language-haskell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&gt;</span> <span class="n">dropWhile</span> <span class="p">(</span><span class="o">==</span><span class="mi">1</span><span class="p">)</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">3</span><span class="p">]</span>
<span class="o">&gt;</span> <span class="p">[</span><span class="mi">2</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">3</span><span class="p">]</span>
</code></pre></div></div>

<p>You can also use functions:</p>

<div class="language-haskell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&gt;</span> <span class="n">dropWhile</span> <span class="p">(</span><span class="nf">\</span> <span class="n">x</span> <span class="o">-&gt;</span> <span class="n">x</span> <span class="o">&lt;</span> <span class="mi">10</span> <span class="o">&amp;&amp;</span> <span class="n">x</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">)</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">10</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">5</span><span class="p">]</span>
<span class="o">&gt;</span> <span class="p">[</span><span class="mi">10</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">5</span><span class="p">]</span>
</code></pre></div></div>

<h4 id="implementation-1">Implementation</h4>

<div class="language-haskell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">dropWhile'</span> <span class="o">::</span> <span class="p">(</span><span class="kt">A</span> <span class="o">-&gt;</span> <span class="kt">Bool</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="p">[</span><span class="n">a</span><span class="p">]</span> <span class="o">-&gt;</span> <span class="p">[</span><span class="n">a</span><span class="p">]</span>

<span class="n">dropWhile'</span> <span class="kr">_</span> <span class="kt">[]</span> <span class="o">=</span> <span class="kt">[]</span>
<span class="n">dropWhile'</span> <span class="n">f</span> <span class="p">(</span><span class="n">x</span><span class="o">:</span><span class="n">xs</span><span class="p">)</span>
	<span class="o">|</span> <span class="n">f</span> <span class="n">x</span> <span class="o">=</span> <span class="n">dropWhile'</span> <span class="n">f</span> <span class="n">xs</span>
	<span class="o">|</span> <span class="n">otherwise</span> <span class="o">=</span> <span class="n">x</span><span class="o">:</span><span class="n">xs</span>
</code></pre></div></div>

<h3 id="takewhile--dropwhile-example"><code class="language-plaintext highlighter-rouge">takeWhile</code> &amp; <code class="language-plaintext highlighter-rouge">dropWhile</code> Example</h3>
<p>This function splits up the words in a string into a list of strings containing no spaces.</p>

<div class="language-haskell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">split_words</span> <span class="s">""</span> <span class="o">=</span> <span class="kt">[]</span>
<span class="n">split_words</span> <span class="n">string</span> <span class="o">=</span>
	<span class="kr">let</span>
		<span class="n">first</span> <span class="o">=</span> <span class="n">takeWhile</span> <span class="p">(</span><span class="o">/=</span> <span class="sc">' '</span><span class="p">)</span> <span class="n">string</span>
		<span class="n">up_to_space</span> <span class="o">=</span> <span class="n">dropWhile</span> <span class="p">(</span><span class="o">\=</span> <span class="sc">' '</span><span class="p">)</span> <span class="n">string</span>
		<span class="n">after_space</span> <span class="o">=</span> <span class="n">dropWhile</span> <span class="p">(</span><span class="o">==</span> <span class="sc">' '</span><span class="p">)</span> <span class="n">up_to_space</span>
	<span class="kr">in</span>
		<span class="n">first</span> <span class="o">:</span> <span class="n">split_words</span> <span class="n">after_space</span>

<span class="o">&gt;</span> <span class="n">split_words</span> <span class="s">"one two		three"</span>
<span class="o">&gt;</span> <span class="p">[</span><span class="s">"one"</span><span class="p">,</span><span class="s">"two"</span><span class="p">,</span><span class="s">"three"</span><span class="p">]</span>
</code></pre></div></div>

<h3 id="words"><code class="language-plaintext highlighter-rouge">words</code></h3>
<p>The function that was made in the last example has a standard implementation called <code class="language-plaintext highlighter-rouge">words</code>.</p>

<h3 id="unwords"><code class="language-plaintext highlighter-rouge">unwords</code></h3>
<p>This is the companion function to <code class="language-plaintext highlighter-rouge">words</code>. They arenâ€™t quite inverses as <code class="language-plaintext highlighter-rouge">unwords</code> will put spaces inbetween each word.</p>

<h3 id="zipwith"><code class="language-plaintext highlighter-rouge">zipWith</code></h3>
<p>This function zips two lists together using a function:</p>

<div class="language-haskell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&gt;</span> <span class="n">zipWith</span> <span class="p">(</span><span class="o">+</span><span class="p">)</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">]</span> <span class="p">[</span><span class="mi">4</span><span class="p">,</span><span class="mi">5</span><span class="p">,</span><span class="mi">6</span><span class="p">]</span>
<span class="o">&gt;</span> <span class="p">[</span><span class="mi">5</span><span class="p">,</span><span class="mi">7</span><span class="p">,</span><span class="mi">9</span><span class="p">]</span>

<span class="o">&gt;</span> <span class="n">zipWith</span> <span class="p">(</span><span class="nf">\</span> <span class="n">x</span> <span class="n">y</span> <span class="o">-&gt;</span> <span class="kr">if</span> <span class="n">x</span> <span class="kr">then</span> <span class="n">y</span> <span class="kr">else</span> <span class="o">-</span><span class="n">y</span><span class="p">)</span> <span class="p">[</span><span class="kt">True</span><span class="p">,</span> <span class="kt">False</span><span class="p">,</span> <span class="kt">True</span><span class="p">]</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">]</span>
<span class="o">&gt;</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="o">-</span><span class="mi">2</span><span class="p">,</span><span class="o">-</span><span class="mi">3</span><span class="p">]</span>
</code></pre></div></div>

<h4 id="implementation-2">Implementation</h4>

<div class="language-haskell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">zipWith'</span> <span class="o">::</span> <span class="p">(</span><span class="n">a</span> <span class="o">-&gt;</span> <span class="n">b</span> <span class="o">-&gt;</span> <span class="n">c</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="p">[</span><span class="n">a</span><span class="p">]</span> <span class="o">-&gt;</span> <span class="p">[</span><span class="n">b</span><span class="p">]</span> <span class="o">-&gt;</span> <span class="p">[</span><span class="n">c</span><span class="p">]</span>

<span class="n">zipWith'</span> <span class="kr">_</span> <span class="kt">[]</span> <span class="kr">_</span> <span class="o">=</span> <span class="kt">[]</span>
<span class="n">zipWith'</span> <span class="kr">_</span> <span class="kr">_</span> <span class="kt">[]</span> <span class="o">=</span> <span class="kt">[]</span>
<span class="n">zipWith'</span> <span class="n">f</span> <span class="p">(</span><span class="n">x</span><span class="o">:</span><span class="n">xs</span><span class="p">)</span> <span class="p">(</span><span class="n">y</span><span class="o">:</span><span class="n">ys</span><span class="p">)</span> <span class="o">=</span> <span class="n">f</span> <span class="n">x</span> <span class="n">y</span> <span class="o">:</span> <span class="n">zipWith'</span> <span class="n">f</span> <span class="n">xs</span> <span class="n">ys</span>
</code></pre></div></div>

<h4 id="examples">Examples</h4>

<div class="language-haskell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">mult_by_pos</span> <span class="n">list</span> <span class="o">=</span> <span class="n">zipWith</span> <span class="p">(</span><span class="o">*</span><span class="p">)</span> <span class="n">list</span> <span class="p">[</span><span class="mi">0</span><span class="o">..</span><span class="p">]</span>

<span class="o">&gt;</span> <span class="n">mult_by_pos</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">]</span>
<span class="o">&gt;</span> <span class="p">[</span><span class="mi">0</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">6</span><span class="p">]</span>
</code></pre></div></div>

<div class="language-haskell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">interleave</span> <span class="n">str1</span> <span class="n">str2</span> <span class="o">=</span> 
	<span class="kr">let</span>
		<span class="n">zipped</span> <span class="o">=</span> <span class="n">zipWith</span> <span class="p">(</span><span class="nf">\</span> <span class="n">x</span> <span class="n">y</span> <span class="o">-&gt;</span> <span class="p">[</span><span class="n">x</span><span class="p">,</span><span class="n">y</span><span class="p">])</span> <span class="n">str1</span> <span class="n">str2</span>
	<span class="kr">in</span>
		<span class="n">concat</span> <span class="n">zipped</span>

<span class="o">&gt;</span> <span class="n">interleave</span> <span class="s">"abc"</span> <span class="s">"123"</span>
<span class="o">&gt;</span> <span class="s">"a1b2c3"</span>
</code></pre></div></div>

<p>In this example <code class="language-plaintext highlighter-rouge">concat</code> is used to make lists of strings into a single string.</p>

<h2 id="exercises">Exercises</h2>
<ol>
  <li>
    <div class="language-haskell highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="n">getNumber</span> <span class="n">string</span> <span class="o">=</span> <span class="n">takeWhile</span> <span class="p">(</span><span class="nf">\</span> <span class="n">x</span> <span class="o">-&gt;</span> <span class="n">elem</span> <span class="n">x</span> <span class="p">[</span><span class="sc">'0'</span><span class="o">..</span><span class="sc">'9'</span><span class="p">])</span> <span class="n">string</span>
</code></pre></div>    </div>
  </li>
  <li>
    <pre><code class="language-hasell"> wordCount string = length $ words string
</code></pre>
  </li>
  <li>
    <div class="language-haskell highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="n">numberWords</span> <span class="n">string</span> <span class="o">=</span> <span class="n">zip</span> <span class="o">$</span> <span class="n">words</span> <span class="n">string</span> <span class="o">$</span> <span class="p">[</span><span class="mi">1</span><span class="o">..</span><span class="p">]</span>
</code></pre></div>    </div>
  </li>
</ol>
:ET