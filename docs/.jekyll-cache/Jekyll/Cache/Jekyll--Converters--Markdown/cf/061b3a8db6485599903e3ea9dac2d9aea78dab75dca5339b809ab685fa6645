I"²&<h2 id="list-recursion-examples">List Recursion Examples</h2>
<p>In this section we will be re-implementing the built in functions for operating on lists.</p>

<h3 id="take">take</h3>

<div class="language-haskell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">take'</span> <span class="mi">0</span> <span class="n">list</span>	<span class="o">=</span> <span class="kt">[]</span>
<span class="n">take'</span> <span class="n">n</span> <span class="kt">[]</span>		<span class="o">=</span> <span class="kt">[]</span>
<span class="n">take'</span> <span class="n">n</span> <span class="p">(</span><span class="n">x</span><span class="o">:</span><span class="n">xs</span><span class="p">)</span>	<span class="o">=</span> <span class="n">x</span> <span class="o">:</span> <span class="n">take'</span> <span class="p">(</span><span class="n">n</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)</span> <span class="n">xs</span>
</code></pre></div></div>

<p>With the two base cases the program will end in one of two ways:</p>

<ul>
  <li>We take as many items as we asked for.</li>
  <li>We run out of elements to take.</li>
</ul>

<h3 id="drop">drop</h3>

<div class="language-haskell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">drop'</span> <span class="mi">0</span> <span class="n">list</span>	<span class="o">=</span> <span class="n">list</span>
<span class="n">drop'</span> <span class="n">n</span> <span class="kt">[]</span>		<span class="o">=</span> <span class="kt">[]</span> 	<span class="c1">-- could also be an error</span>
<span class="n">drop'</span> <span class="n">n</span> <span class="p">(</span><span class="n">x</span><span class="o">:</span><span class="n">xs</span><span class="p">)</span>	<span class="o">=</span> <span class="n">drop'</span> <span class="p">(</span><span class="n">n</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)</span> <span class="n">xs</span>
</code></pre></div></div>

<h3 id="elem">elem</h3>

<div class="language-haskell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">elem'</span> <span class="n">e</span> <span class="kt">[]</span> <span class="o">=</span> <span class="kt">False</span>
<span class="n">elem'</span> <span class="n">e</span> <span class="p">(</span><span class="n">x</span><span class="o">:</span><span class="n">xs</span><span class="p">)</span>
	<span class="o">|</span> <span class="n">e</span> <span class="o">==</span> <span class="n">x</span> <span class="o">=</span> <span class="kt">True</span>
	<span class="o">|</span> <span class="n">otherwise</span> <span class="o">=</span> <span class="n">elem'</span> <span class="n">e</span> <span class="n">xs</span>
</code></pre></div></div>

<p>This will cycle through every item in the list and will stop and say <code class="language-plaintext highlighter-rouge">True</code> if it is found. If it isnâ€™t found then it will return <code class="language-plaintext highlighter-rouge">False</code>.</p>

<p>This also implements pattern matching and guards in one function.</p>

<h3 id="maximum">maximum</h3>
<p>Maximum will say which is the largest element in a list.</p>

<div class="language-haskell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">maximum'</span> <span class="kt">[]</span>	<span class="o">=</span> <span class="n">error</span> <span class="s">"Called with empty list."</span> 
<span class="c1">-- This prints an error with this label</span>
<span class="n">maximum'</span> <span class="p">[</span><span class="n">x</span><span class="p">]</span> <span class="o">=</span> <span class="n">x</span> 
<span class="c1">-- This pattern matches against a list of length 1.</span>
<span class="n">maximum'</span> <span class="p">(</span><span class="n">x</span><span class="o">:</span><span class="n">xs</span><span class="p">)</span> <span class="o">=</span>
	<span class="kr">let</span>
		<span class="n">max_tail</span> <span class="o">=</span> <span class="n">maximum'</span> <span class="n">xs</span>
	<span class="kr">in</span>
		<span class="kr">if</span> <span class="p">(</span><span class="n">x</span> <span class="o">&gt;</span> <span class="n">max_tail</span><span class="p">)</span> <span class="kr">then</span> <span class="n">x</span> <span class="kr">else</span> <span class="n">max_tail</span>
</code></pre></div></div>

<p>This checks from the back of the list and keeps the largest element in the list as <code class="language-plaintext highlighter-rouge">x</code></p>

<h3 id="reverse">reverse</h3>

<div class="language-haskell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">reverse'</span> <span class="kt">[]</span>		<span class="o">=</span> <span class="kt">[]</span>
<span class="n">reverse'</span> <span class="p">(</span><span class="n">x</span><span class="o">:</span><span class="n">xs</span><span class="p">)</span> <span class="o">=</span> <span class="n">reverse'</span> <span class="n">xs</span> <span class="o">++</span> <span class="p">[</span><span class="n">x</span><span class="p">]</span>
<span class="c1">-- ++ puts an element onto the tail of a list</span>
</code></pre></div></div>

<h2 id="consuming-more-than-one-element">Consuming More Than One Element</h2>
<h3 id="add_adjacent">add_adjacent</h3>

<div class="language-haskell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">add_adjacent</span> <span class="kt">[]</span>			<span class="o">=</span> <span class="kt">[]</span>
<span class="n">add_adjacent</span> <span class="p">[</span><span class="n">x</span><span class="p">]</span>		<span class="o">=</span> <span class="n">error</span> <span class="s">"Odd number of elements"</span>
<span class="n">add_adjacent</span> <span class="p">(</span><span class="n">x</span><span class="o">:</span><span class="n">y</span><span class="o">:</span><span class="n">xs</span><span class="p">)</span>	<span class="o">=</span> <span class="n">x</span> <span class="o">+</span> <span class="n">y</span> <span class="o">:</span> <span class="n">add_adjacent</span> <span class="n">xs</span>
</code></pre></div></div>

<div class="language-haskell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&gt;</span> <span class="n">add_adjacent</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">5</span><span class="p">,</span><span class="mi">6</span><span class="p">]</span>
<span class="o">&gt;</span> <span class="p">[</span><span class="mi">3</span><span class="p">,</span><span class="mi">7</span><span class="p">,</span><span class="mi">11</span><span class="p">]</span>
</code></pre></div></div>

<h3 id="add_next">add_next</h3>

<div class="language-haskell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">add_next</span> <span class="kt">[]</span> 		<span class="o">=</span> <span class="n">error</span> <span class="s">"Not enough elements"</span>
<span class="n">add_next</span> <span class="p">[</span><span class="kr">_</span><span class="p">]</span> 		<span class="o">=</span> <span class="n">error</span> <span class="s">"Not enough elements"</span>
<span class="n">add_next</span> <span class="p">[</span><span class="n">x</span><span class="p">,</span><span class="n">y</span><span class="p">]</span>		<span class="o">=</span> <span class="p">[</span><span class="n">x</span><span class="o">+</span><span class="n">y</span><span class="p">]</span>
<span class="n">add_next</span> <span class="p">(</span><span class="n">x</span><span class="o">:</span><span class="n">y</span><span class="o">:</span><span class="n">xs</span><span class="p">)</span>	<span class="o">=</span> <span class="n">x</span> <span class="o">+</span> <span class="n">y</span> <span class="o">:</span> <span class="n">add_next</span> <span class="p">(</span><span class="n">y</span><span class="o">:</span><span class="n">xs</span><span class="p">)</span>
</code></pre></div></div>

<h2 id="exercises">Exercises</h2>
<ol>
  <li>
    <div class="language-haskell highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="n">containsThree</span> <span class="kt">[]</span> <span class="o">=</span> <span class="kt">False</span>
 <span class="n">containsThree</span> <span class="p">(</span><span class="n">x</span><span class="o">:</span><span class="n">xs</span><span class="p">)</span>
     <span class="o">|</span> <span class="n">x</span> <span class="o">==</span> <span class="mi">3</span>	<span class="o">=</span> <span class="kt">True</span>
     <span class="o">|</span> <span class="n">otherwise</span>	<span class="o">=</span> <span class="n">containsThree</span> <span class="n">xs</span>
</code></pre></div>    </div>
  </li>
  <li>
    <div class="language-haskell highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="n">sumEvenIdx</span> <span class="kt">[]</span>		<span class="o">=</span> <span class="mi">0</span>
 <span class="n">sumEvenIdx</span> <span class="p">[</span><span class="n">x</span><span class="p">]</span>		<span class="o">=</span> <span class="n">x</span>
 <span class="c1">-- Required to catch 1 and odd element lists.</span>
 <span class="n">sumEvenIdx</span> <span class="p">(</span><span class="n">x</span><span class="o">:</span><span class="kr">_</span><span class="o">:</span><span class="n">xs</span><span class="p">)</span>	<span class="o">=</span> <span class="n">x</span> <span class="o">+</span> <span class="n">sumEvenIdx</span> <span class="n">xs</span>
</code></pre></div>    </div>
  </li>
</ol>
:ET