I"<<p>For all algorithms there are certain properties that they can be evaluated against:</p>

<ul>
  <li>Completeness
    <ul>
      <li>Does the algorithm always find a solution if one exists?</li>
    </ul>

    <p>This is true for BFS but not for DFS as cycles can stop depth first if there is a loop.</p>
  </li>
  <li>Optimality
    <ul>
      <li>Does the algorithm always find a shortest path or one of lowest cost?</li>
    </ul>

    <p>Yes for BFS but no for DFS (neither take into account cost, just steps.)</p>
  </li>
  <li>Time Complexity
    <ul>
      <li>What are the number of paths generated?/How long will it take to compute?</li>
    </ul>

    <p>Harder to answer. This will need to be computed</p>
  </li>
  <li>Space Complexity
    <ul>
      <li>What are the maximum number of paths in memory (in frontier)?</li>
    </ul>

    <p>This will always be smaller or equal to the time complexity but it is still harder to answer.</p>
  </li>
</ul>

<h2 id="time--space-complexity">Time &amp; Space Complexity</h2>

<p>Time and space complexity are measured in terms of:</p>

<ul>
  <li>\(b\) - Maximum branching factor
    <ul>
      <li>The maximal number of successor states of a state in the state space.</li>
    </ul>
  </li>
  <li>\(d\) - Depth of the optimal solution
    <ul>
      <li>The length of the shortest path from the start state to a goal state.</li>
    </ul>
  </li>
  <li>\(m\) - Maximum depth of the state space
    <ul>
      <li>the length of the longest path in the state space (may be \(\infty\) to to loops)</li>
    </ul>
  </li>
</ul>

<h3 id="example-1---8-puzzle">Example 1 - 8 Puzzle</h3>

<ul>
  <li>\(b\) (maximum branching factor) is 4</li>
  <li>\(d\) (optimal solution) is 31</li>
  <li>\(m\) (longest path) is \(\infty\) as there are cycles</li>
</ul>

<h3 id="example-2---holiday-in-romania">Example 2 - Holiday in Romania</h3>

<ul>
  <li>\(b=4\)</li>
  <li>\(d=3\)</li>
  <li>\(m=\infty\)</li>
</ul>

<h2 id="properties-of-breadth-first-search">Properties of Breadth First Search</h2>

<p class="info">The number of paths of length \(d\) in a search tree with maximum branching factor \(b\) is at most \(b^d\).</p>

<p class="info">The number of paths of length at most \(d\) in a search tree with maximum branching factor \(b\) is at most \(1+b+b^2+\ldots + b^d\).</p>

<ul>
  <li>Time complexity
    <ul>
      <li>If the shortest path to a goal state has length \(d\) then the worst case BFS will look at: \[1+b+B^2+\ldots +b^d\] paths before reaching a goal state.</li>
    </ul>
  </li>
  <li>Space complexity
    <ul>
      <li>If the shortest path to a goal state has length \(d\), then in the worst case the frontier can contain \(b^d\) paths and so the memory requirement is \(b^d\).</li>
    </ul>
  </li>
</ul>

<h3 id="complexity">Complexity</h3>

<table>
  <thead>
    <tr>
      <th>Depth</th>
      <th>Paths</th>
      <th>Time</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>0</td>
      <td>1</td>
      <td>1 msec</td>
    </tr>
    <tr>
      <td>1</td>
      <td>11</td>
      <td>.01 sec</td>
    </tr>
    <tr>
      <td>2</td>
      <td>111</td>
      <td>.1 sec</td>
    </tr>
    <tr>
      <td>4</td>
      <td>11,111</td>
      <td>11 sec</td>
    </tr>
    <tr>
      <td>6</td>
      <td>10^6</td>
      <td>18 sec</td>
    </tr>
    <tr>
      <td>8</td>
      <td>10^8</td>
      <td>31 hours</td>
    </tr>
    <tr>
      <td>10</td>
      <td>10^10</td>
      <td>128 days</td>
    </tr>
    <tr>
      <td>12</td>
      <td>10^12</td>
      <td>35 years</td>
    </tr>
  </tbody>
</table>

<p><em>Example of combinatorial explosion of a BFS at 1000 states/sec.</em></p>

<h2 id="properties-of-depth-first-search">Properties of Depth First Search</h2>

<ul>
  <li>Not complete - No guarenteed to find a solution</li>
  <li>Not optimal - Solution is not guaranteed to be the shortest path.</li>
  <li>Time Complexity
    <ul>
      <li>If the length of the longest path from the start state is \(m\), then the worst case DFS will look at: \[1+b+b^2+\ldots +b^m\] This may be an issue as \(m\) is infinite in many problems.</li>
    </ul>
  </li>
  <li>Space Complexity
    <ul>
      <li>If the length of the longest path starting at a goal state is \(m\), then the worst case the frontier can contain: \[b\times m\] paths. if \(m\) is infinite, then the space requirement is infinite in the worst case. But if DFS finds a path to the goal state, then memory requirement is much less than for BFS.</li>
    </ul>
  </li>
</ul>

<h2 id="summary">Summary</h2>

<ul>
  <li>DFS is complete ut expensive</li>
  <li>DFS is cheap in space complexity but incomplete</li>
</ul>
:ET