I""6<h2 id="writing-io-code">Writing IO Code</h2>
<p>We can write our own IO actions:</p>

<div class="language-haskell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">print_two</span> <span class="o">::</span> <span class="kt">String</span> <span class="o">-&gt;</span> <span class="kt">String</span> <span class="o">-&gt;</span> <span class="kt">IO</span> <span class="nb">()</span>
<span class="kt">Print_two</span> <span class="n">s1</span> <span class="n">s2</span> <span class="o">=</span> <span class="n">putStrLn</span> <span class="p">(</span><span class="n">s1</span> <span class="o">++</span> <span class="n">s2</span><span class="p">)</span>
</code></pre></div></div>

<div class="language-haskell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&gt;</span> <span class="n">print_two</span> <span class="s">"abc"</span> <span class="s">"def"</span>
<span class="n">abcdef</span>
</code></pre></div></div>

<p>Note that the return type is <code class="language-plaintext highlighter-rouge">IO ()</code>.</p>

<h3 id="combining-multiple-io-calls">Combining Multiple IO Calls</h3>
<p>The <code class="language-plaintext highlighter-rouge">do</code> syntax allows us to combine multiple IO actions.</p>

<div class="language-haskell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">get_and_print</span> <span class="o">::</span> <span class="kt">IO</span> <span class="nb">()</span>
<span class="n">get_and_print</span> <span class="o">=</span>
    <span class="kr">do</span>
        <span class="n">x</span> <span class="o">&lt;-</span> <span class="n">getLine</span>
        <span class="n">y</span> <span class="o">&lt;-</span> <span class="n">getLine</span>
        <span class="n">putStrLn</span> <span class="p">(</span><span class="n">x</span> <span class="o">++</span> <span class="s">" "</span> <span class="o">++</span> <span class="n">y</span><span class="p">)</span>
</code></pre></div></div>

<p>This syntax allows us two write a sequence of statements that will be executed in order.</p>

<p>You could also write this with the following syntax:</p>

<div class="language-haskell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">get_and_print</span> <span class="o">::</span> <span class="kt">IO</span> <span class="nb">()</span>
<span class="n">get_and_print</span> <span class="o">=</span> <span class="kr">do</span>
    <span class="n">x</span> <span class="o">&lt;-</span> <span class="n">getLine</span>
    <span class="n">y</span> <span class="o">&lt;-</span> <span class="n">getLine</span>
    <span class="n">putStrLn</span> <span class="p">(</span><span class="n">x</span> <span class="o">++</span> <span class="s">" "</span> <span class="o">++</span> <span class="n">y</span><span class="p">)</span>
</code></pre></div></div>

<h4 id="the-do-syntax">The <code class="language-plaintext highlighter-rouge">do</code> Syntax</h4>
<p>A <code class="language-plaintext highlighter-rouge">do</code> block has the following syntax:</p>

<div class="language-haskell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kr">do</span>
    <span class="n">v1</span> <span class="o">&lt;-</span> <span class="p">[</span><span class="kt">IO</span> <span class="n">action</span><span class="p">]</span>
    <span class="n">v2</span> <span class="o">&lt;-</span> <span class="p">[</span><span class="kt">IO</span> <span class="n">action</span><span class="p">]</span>
    <span class="o">...</span>
    <span class="n">vk</span> <span class="o">&lt;-</span> <span class="p">[</span><span class="kt">IO</span> <span class="n">action</span><span class="p">]</span>
    <span class="p">[</span><span class="kt">IO</span> <span class="n">action</span><span class="p">]</span>
</code></pre></div></div>

<ul>
  <li><code class="language-plaintext highlighter-rouge">v1</code> through <code class="language-plaintext highlighter-rouge">vk</code> unbox the results of IO actions.</li>
  <li>The final IO action is the return value.</li>
</ul>

<p>The <code class="language-plaintext highlighter-rouge">v &lt;-</code> portion can be skipped if you are using an IO action purely for the side effect.</p>

<h4 id="let-in-do-blocks"><code class="language-plaintext highlighter-rouge">let</code> in <code class="language-plaintext highlighter-rouge">do</code> Blocks</h4>
<p><code class="language-plaintext highlighter-rouge">let</code> expressions can be used inside <code class="language-plaintext highlighter-rouge">do</code> block in order to complete pure computations:</p>

<div class="language-haskell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">add_one</span> <span class="o">::</span> <span class="kt">IO</span> <span class="nb">()</span>
<span class="n">add_one</span> <span class="o">=</span>
    <span class="kr">do</span>
        <span class="n">n</span> <span class="o">&lt;-</span> <span class="n">getLine</span>
        <span class="kr">let</span> <span class="n">num</span> <span class="o">=</span> <span class="p">(</span><span class="n">read</span> <span class="n">n</span><span class="p">)</span> <span class="o">::</span> <span class="kt">Int</span>
            <span class="n">out</span> <span class="o">=</span> <span class="n">show</span> <span class="p">(</span><span class="n">num</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span>
        <span class="n">putStrLn</span> <span class="n">out</span>
</code></pre></div></div>

<p class="info">In a <code class="language-plaintext highlighter-rouge">do</code> block you can type anything out that you would type into the command line of GHCI.</p>

<h4 id="if-in-do-blocks"><code class="language-plaintext highlighter-rouge">if</code> in <code class="language-plaintext highlighter-rouge">do</code> Blocks</h4>

<div class="language-haskell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">guess</span> <span class="o">::</span> <span class="kt">IO</span> <span class="nb">()</span>
<span class="n">guess</span> <span class="o">=</span> <span class="kr">do</span>
    <span class="n">x</span> <span class="o">&lt;-</span> <span class="n">getLine</span>
    <span class="kr">if</span> <span class="n">x</span> <span class="o">==</span> <span class="s">"42"</span>
        <span class="kr">then</span> <span class="n">putStrLn</span> <span class="s">"Correct!"</span>
        <span class="kr">else</span> <span class="n">putStrLn</span> <span class="s">"You are very wrong."</span>
</code></pre></div></div>

<p>Both branches of the <code class="language-plaintext highlighter-rouge">if</code> mut have the same type.</p>

<h3 id="do-blocks"><code class="language-plaintext highlighter-rouge">do</code> Blocks</h3>
<p><code class="language-plaintext highlighter-rouge">do</code> blocks let you sequence multiple actions:</p>

<ul>
  <li>Works with IO actions.</li>
  <li>Will not work in pure functional code.</li>
</ul>

<p>Functional programs consist of:</p>

<ul>
  <li>A small amount of IO code.</li>
  <li>A large amount of pure functional node.</li>
</ul>

<p class="warning">Donâ€™t try to write your entire program in IO code.</p>

<h3 id="putting-values-in-the-io-box">Putting Values in the IO Box</h3>
<p>Sometimes we need to pus a pure value into <code class="language-plaintext highlighter-rouge">IO</code>.</p>

<ul>
  <li>We can use the <code class="language-plaintext highlighter-rouge">return</code> function to do this.</li>
</ul>

<div class="language-haskell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&gt;</span> <span class="o">:</span><span class="n">t</span> <span class="s">"hello"</span>
<span class="s">"hello"</span> <span class="o">::</span> <span class="p">[</span><span class="kt">Char</span><span class="p">]</span>

<span class="o">&gt;</span> <span class="o">:</span><span class="n">t</span> <span class="n">return</span> <span class="s">"hello"</span>
<span class="kt">IO</span> <span class="p">[</span><span class="kt">Char</span><span class="p">]</span>
</code></pre></div></div>

<div class="language-haskell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">example</span> <span class="o">::</span> <span class="kt">IO</span> <span class="kt">String</span>
<span class="n">example</span> <span class="o">=</span> <span class="kr">do</span>
    <span class="n">x</span> <span class="o">&lt;-</span> <span class="n">getLine</span>
    <span class="n">return</span> <span class="p">(</span><span class="n">tail</span> <span class="n">x</span><span class="p">)</span>
</code></pre></div></div>

<p>You must use return to get the value out of an impure function.</p>

<div class="language-haskell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">print_if_short</span> <span class="o">::</span> <span class="kt">String</span> <span class="o">-&gt;</span> <span class="kt">IO</span> <span class="nb">()</span>
<span class="n">print_if_short</span> <span class="n">str</span> <span class="o">=</span>
    <span class="kr">if</span> <span class="n">length</span> <span class="n">str</span> <span class="o">&lt;=</span> <span class="mi">2</span>
        <span class="kr">then</span> <span class="n">putStrLn</span> <span class="n">str</span>
        <span class="kr">else</span> <span class="n">return</span> <span class="nb">()</span>
</code></pre></div></div>

<p>Both sides of the <code class="language-plaintext highlighter-rouge">if</code> must have the type <code class="language-plaintext highlighter-rouge">IO ()</code>:</p>

<ul>
  <li>So we use <code class="language-plaintext highlighter-rouge">return ()</code> in the <code class="language-plaintext highlighter-rouge">else</code> part.</li>
</ul>

<h4 id="return"><code class="language-plaintext highlighter-rouge">return</code></h4>
<p>This function is not the same as in imperative languages <code class="language-plaintext highlighter-rouge">return</code> <strong>does not stop execution</strong>. It just convert pure values to IO values.</p>

<h3 id="monad"><code class="language-plaintext highlighter-rouge">Monad</code></h3>
<p>The type of <code class="language-plaintext highlighter-rouge">return</code> mentions monads.</p>

<div class="language-haskell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&gt;</span> <span class="o">:</span><span class="n">t</span> <span class="n">return</span>
<span class="n">return</span> <span class="o">::</span> <span class="kt">Monad</span> <span class="n">m</span> <span class="o">=&gt;</span> <span class="n">a</span> <span class="o">-&gt;</span> <span class="n">m</span> <span class="n">a</span>
</code></pre></div></div>

<p>This is because IO is a <strong>monad</strong>.</p>

<ul>
  <li>Whenever you see <code class="language-plaintext highlighter-rouge">Monad m =&gt;</code> substitute <code class="language-plaintext highlighter-rouge">IO</code> for <code class="language-plaintext highlighter-rouge">m</code>.</li>
  <li>So <code class="language-plaintext highlighter-rouge">return :: a -&gt; IO a</code></li>
</ul>

<p>You donâ€™t need to know anything about monads for COMP105.</p>

<h2 id="exercises">Exercises</h2>
<ol>
  <li>
    <div class="language-haskell highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="n">doubleEcho</span> <span class="o">::</span> <span class="kt">IO</span> <span class="nb">()</span>
 <span class="n">doubleEcho</span> <span class="o">=</span> <span class="kr">do</span>
     <span class="n">x</span> <span class="o">&lt;-</span> <span class="n">getLine</span>
     <span class="n">putStrLn</span> <span class="n">x</span>
     <span class="n">putStrLn</span> <span class="n">x</span>
</code></pre></div>    </div>
  </li>
  <li>
    <div class="language-haskell highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="n">firstWord</span> <span class="o">::</span> <span class="kt">IO</span> <span class="nb">()</span>
 <span class="n">firstWord</span> <span class="o">=</span> <span class="kr">do</span>
     <span class="n">string</span> <span class="o">&lt;-</span> <span class="n">getLine</span>
     <span class="kr">if</span> <span class="p">(</span><span class="n">words</span> <span class="n">string</span><span class="p">)</span> <span class="o">==</span> <span class="kt">[]</span>
         <span class="kr">then</span> <span class="n">putStrLn</span> <span class="s">""</span>
         <span class="kr">else</span> <span class="n">putStrLn</span> <span class="p">(</span><span class="n">head</span> <span class="o">.</span> <span class="n">words</span> <span class="o">$</span> <span class="n">string</span><span class="p">)</span>
</code></pre></div>    </div>
  </li>
  <li>
    <div class="language-haskell highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="n">printEven</span> <span class="o">::</span> <span class="kt">Int</span> <span class="o">-&gt;</span> <span class="kt">IO</span> <span class="nb">()</span>
 <span class="n">printEven</span> <span class="n">x</span> <span class="o">=</span> <span class="kr">if</span> <span class="p">(</span><span class="n">even</span> <span class="n">x</span><span class="p">)</span> 
     <span class="kr">then</span> <span class="p">(</span><span class="n">putStrLn</span> <span class="n">x</span><span class="p">)</span>
     <span class="kr">else</span> <span class="n">return</span> <span class="nb">()</span>
</code></pre></div>    </div>

    <p>This doesnâ€™t need to be done in a <code class="language-plaintext highlighter-rouge">do</code> block as it is just one line.</p>
  </li>
</ol>
:ET