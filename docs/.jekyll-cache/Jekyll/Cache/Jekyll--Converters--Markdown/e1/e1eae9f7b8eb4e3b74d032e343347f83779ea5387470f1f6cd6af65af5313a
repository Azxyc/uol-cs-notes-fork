I"¹<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Input: 	a start state s_0
		for each state s the successors of s
		a test goals(s) checking whether s is a goal state
		
Set frontier := {s_0}
while frontier is not empty do
	select and remove from frontier a path s_0...s_k
	if goal(s_k) then
		return s_0...s_k (and terminate)
	else for every successor s of s_k and s_0...s_k s to frontier
	end if
end while
</code></pre></div></div>

<ul>
  <li>Lines 1-3 are specifying the input of the program.</li>
  <li>Line 5 sets the frontier (the set of paths) to s\(_0\).</li>
  <li>Line 7 remove a path and expand it.</li>
  <li>Lines 8-9 if the final state in the frontier is the goal state then return the path and end.</li>
  <li>Line 10 if the goal isnâ€™t reached then add all expansions of successors to the frontier.</li>
</ul>

<p>The algorithm maintains a set called the <strong>frontier</strong> containing the paths. It is also sometimes called the <strong>agenda</strong>. As long as the frontier is not empty is selects and removes a path from itself and adds the paths expansions. The differences between algorithms are with which path is removed and expanded in the frontier.</p>

<h2 id="bfs-vs-dfs">BFS vs DFS</h2>

<p>In line 7, if you remove and expand the item that was added first that is called breadth first. If you remove and expand the one that was added last that is a depth first search.</p>
:ET