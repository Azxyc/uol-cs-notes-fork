<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.1.1">Jekyll</generator><link href="http://localhost:4000/UoL/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/UoL/" rel="alternate" type="text/html" /><updated>2020-11-23T14:44:27+00:00</updated><id>http://localhost:4000/UoL/feed.xml</id><title type="html">Uni Notes</title><subtitle>A site containing my notes for all my modules taken at the University of Liverpool.
</subtitle><author><name>Ben Weston</name><email>b.weston60@gmail.com</email></author><entry><title type="html">COMP105 - Lecture 19-1</title><link href="http://localhost:4000/UoL/comp105/lectures/2020/11/23/1.html" rel="alternate" type="text/html" title="COMP105 - Lecture 19-1" /><published>2020-11-23T00:00:00+00:00</published><updated>2020-11-23T00:00:00+00:00</updated><id>http://localhost:4000/UoL/comp105/lectures/2020/11/23/1</id><content type="html" xml:base="http://localhost:4000/UoL/comp105/lectures/2020/11/23/1.html">&lt;h2 id=&quot;custom-types&quot;&gt;Custom Types&lt;/h2&gt;
&lt;p&gt;There are two ways to make types in Haskell.&lt;/p&gt;

&lt;h3 id=&quot;the-type-keyword&quot;&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;type&lt;/code&gt; Keyword&lt;/h3&gt;
&lt;p&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;type&lt;/code&gt; keyword gives a new name to an existing type.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;All types must start with capital letters.&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-haskell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kr&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Char&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;exclaim&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String'&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;exclaim&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;str&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;str&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;!&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-haskell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;exclaim&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;hello&quot;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;hello!!
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Type is useful when you want to give a meaningful name to a complex type.&lt;/p&gt;

&lt;div class=&quot;language-haskell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kr&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;VoteResults&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)]&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;results&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;VoteResults&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;the-data-keyword&quot;&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;data&lt;/code&gt; Keyword&lt;/h3&gt;
&lt;p&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;data&lt;/code&gt; keyword is used to create an entirely  new type.&lt;/p&gt;

&lt;div class=&quot;language-haskell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kr&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Bool'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;True&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;False&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;|&lt;/code&gt; should be read as OR.&lt;/li&gt;
  &lt;li&gt;Each of the values is a constructor.
    &lt;ul&gt;
      &lt;li&gt;Each constructor should start with a capital letter.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p class=&quot;info&quot;&gt;To find out more about a type you can use the GHCI &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;:info&lt;/code&gt; command. For more information about a type constructor then you can use the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;type&lt;/code&gt; command.&lt;/p&gt;

&lt;h4 id=&quot;example&quot;&gt;Example&lt;/h4&gt;
&lt;div class=&quot;language-haskell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kr&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Direction&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;North&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;South&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;East&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;West&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;rotate&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;North&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;East&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;rotate&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;East&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;South&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;rotate&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;South&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;West&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;rotate&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;West&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;North&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-haskell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rotate&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rotate&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Direction&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Direction&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;type-classes&quot;&gt;Type Classes&lt;/h3&gt;
&lt;p&gt;By default, a new data type is not part of any type class. This means that running &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;rotate&lt;/code&gt; will give an error. As is GHCI doesn’t know how to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;show&lt;/code&gt; it.&lt;/p&gt;

&lt;p&gt;We can use the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;deriving&lt;/code&gt; keyword to fix this:&lt;/p&gt;

&lt;div class=&quot;language-haskell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kr&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Direction&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;North&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;South&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;East&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;West&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;deriving&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Show&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This will automatically put the type into the class &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Show&lt;/code&gt; and will allow it to print to the prompt.&lt;/p&gt;

&lt;p&gt;Hakell can automatically implement the following type classes:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Show&lt;/code&gt;
    &lt;ul&gt;
      &lt;li&gt;Will print out the type as it is in the code.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Read&lt;/code&gt;
    &lt;ul&gt;
      &lt;li&gt;Will parse the type as it is in the code.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Eq&lt;/code&gt;
    &lt;ul&gt;
      &lt;li&gt;The natural definition of equality.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Ord&lt;/code&gt;
    &lt;ul&gt;
      &lt;li&gt;Constructors that come first are smaller.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You can add these to the tuple that deriving takes as input. You should include all type classes that make sense for your type so that you can use the functions you want.&lt;/p&gt;

&lt;h2 id=&quot;exercises&quot;&gt;Exercises&lt;/h2&gt;
&lt;ol&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;type Marks = (String, [Int])&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;data Colour = Red | Blue | Green deriving (Show, Read)&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;
    &lt;div class=&quot;language-haskell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; &lt;span class=&quot;n&quot;&gt;toRGB&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Colour&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Float&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Float&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Float&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
 &lt;span class=&quot;n&quot;&gt;toRGB&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Red&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
 &lt;span class=&quot;n&quot;&gt;toRGB&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Green&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
 &lt;span class=&quot;n&quot;&gt;toRGB&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Blue&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;p class=&quot;warning&quot;&gt;You should note that as this type isn’t in the class &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;eq&lt;/code&gt; then you can’t use guard and equality testing on it.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;</content><author><name>Ben Weston</name><email>b.weston60@gmail.com</email></author><category term="COMP105" /><category term="Lectures" /><category term="COMP105" /><category term="Lectures" /><summary type="html">Custom Types There are two ways to make types in Haskell. The type Keyword The type keyword gives a new name to an existing type. All types must start with capital letters. type String' = [Char] exclaim :: String' -&amp;gt; String' exclaim str = str + &quot;!&quot; &amp;gt; exclaim &quot;hello&quot; &amp;gt; &quot;hello!! Type is useful when you want to give a meaningful name to a complex type. type VoteResults = [(Int,String)] results :: VoteResults The data Keyword The data keyword is used to create an entirely new type. data Bool' = True | False | should be read as OR. Each of the values is a constructor. Each constructor should start with a capital letter. To find out more about a type you can use the GHCI :info command. For more information about a type constructor then you can use the type command. Example data Direction = North | South | East | West rotate North = East rotate East = South rotate South = West rotate West = North &amp;gt; :t rotate &amp;gt; rotate :: Direction -&amp;gt; Direction Type Classes By default, a new data type is not part of any type class. This means that running rotate will give an error. As is GHCI doesn’t know how to show it. We can use the deriving keyword to fix this: data Direction = North | South | East | West deriving (Show) This will automatically put the type into the class Show and will allow it to print to the prompt. Hakell can automatically implement the following type classes: Show Will print out the type as it is in the code. Read Will parse the type as it is in the code. Eq The natural definition of equality. Ord Constructors that come first are smaller. You can add these to the tuple that deriving takes as input. You should include all type classes that make sense for your type so that you can use the functions you want. Exercises type Marks = (String, [Int]) data Colour = Red | Blue | Green deriving (Show, Read) toRGB :: Colour -&amp;gt; (Float, Float, Float) toRGB Red = (1,0,0) toRGB Green = (0,1,0) toRGB Blue = (0,0,1) You should note that as this type isn’t in the class eq then you can’t use guard and equality testing on it.</summary></entry><entry><title type="html">COMP105 - Lecture 19-2</title><link href="http://localhost:4000/UoL/comp105/lectures/2020/11/23/2.html" rel="alternate" type="text/html" title="COMP105 - Lecture 19-2" /><published>2020-11-23T00:00:00+00:00</published><updated>2020-11-23T00:00:00+00:00</updated><id>http://localhost:4000/UoL/comp105/lectures/2020/11/23/2</id><content type="html" xml:base="http://localhost:4000/UoL/comp105/lectures/2020/11/23/2.html">&lt;h2 id=&quot;more-complex-custom-types&quot;&gt;More Complex Custom Types&lt;/h2&gt;
&lt;h3 id=&quot;more-complex-constructors&quot;&gt;More Complex Constructors&lt;/h3&gt;
&lt;p&gt;More complex constructors can contain other types.&lt;/p&gt;

&lt;div class=&quot;language-haskell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kr&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Point&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Point&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;deriving&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Show&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Read&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Eq&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This is saying that the type &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Point&lt;/code&gt; has one constructor called &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Point&lt;/code&gt; and in that constructor there are two &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Int&lt;/code&gt;. The constructor name has no relation to the type name.&lt;/p&gt;

&lt;p class=&quot;info&quot;&gt;It is common that if your type has only one constructor to call constructor the same name as the type.&lt;/p&gt;

&lt;div class=&quot;language-haskell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Point&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Point&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;read&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Point 10 10&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Point&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Point&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Point&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Point&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;True&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;It is also common to use pattern matching to work with complex constructors:&lt;/p&gt;

&lt;div class=&quot;language-haskell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;shift_up&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Point&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Point&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-haskell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;shift_up&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Point&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Point&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;shift_up&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;shift_up&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Point&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Point&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;example&quot;&gt;Example&lt;/h4&gt;
&lt;p&gt;This example completes a computation using almost entirely our own custom types. We are also using pattern matching on our types:&lt;/p&gt;

&lt;div class=&quot;language-haskell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;move&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Point&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Direction&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Point&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;move&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Point&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;North&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Point&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;move&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Point&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;South&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Point&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;move&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Point&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;East&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Point&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;move&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Point&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;West&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Point&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-haskell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;move&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Point&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;North&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Point&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;more-complex-constructors-continued&quot;&gt;More Complex Constructors Continued&lt;/h3&gt;
&lt;p&gt;Types can have multiple constructors each of which can have their own types:&lt;/p&gt;

&lt;div class=&quot;language-haskell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kr&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Shape&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;circle&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Float&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Rect&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Float&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Float&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;deriving&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Show&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-haskell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Circle&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;2.0&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Circle&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;2.0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Shape&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Rect&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;3.0&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;4.0&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Rect&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;3.0&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;4.0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Shape&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;example-1&quot;&gt;Example&lt;/h4&gt;

&lt;div class=&quot;language-haskell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;area&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Shape&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Float&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;area&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Circle&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;radius&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pi&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;radius&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;**&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;area&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Rect&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-haskell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;area&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Circle&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;2.0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;12.56371&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;area&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Rect&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;3.0&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;4.0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;12.0&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;records&quot;&gt;Records&lt;/h3&gt;
&lt;p&gt;You can use data types to build custom records:&lt;/p&gt;

&lt;div class=&quot;language-haskell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kr&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Person&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Person&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;get_first_name&lt;/span&gt;	&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Person&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;get_second_name&lt;/span&gt;	&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Person&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;get_age&lt;/span&gt;		&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Person&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;get_nationality&lt;/span&gt;	&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Person&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-haskell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;get_age&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Person&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;joe&quot;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;bloggs&quot;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;25&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;UK&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;25&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;record-syntax&quot;&gt;Record Syntax&lt;/h4&gt;
&lt;p&gt;To make things easier, Haskell provides a record syntax:&lt;/p&gt;

&lt;div class=&quot;language-haskell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kr&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Person&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Person&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;firstName&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;secondName&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;age&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
			&lt;span class=&quot;kt&quot;&gt;Nationality&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
			&lt;span class=&quot;kr&quot;&gt;deriving&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Show&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-haskell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Person&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;joe&quot;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;bloggs&quot;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;25&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;UK&quot;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Person&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;firstName&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;joe&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;secondName&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;bloggs&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;age&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;25&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nationality&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;UK&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This is similar to the previous example where we made our own record type.&lt;/p&gt;

&lt;p&gt;Records can be created out of order, whereas normal data types cannot.&lt;/p&gt;

&lt;div class=&quot;language-haskell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kr&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Example&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Example&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
						&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
						&lt;span class=&quot;kr&quot;&gt;deriving&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Show&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-haskell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Example&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;one&quot;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Example&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;one&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Example&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;zero&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Example&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;zero&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;If you create an out of order function then you should put them in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;{}&lt;/code&gt; with their labels so that Haskell  can identify them.&lt;/p&gt;

&lt;h3 id=&quot;example-2&quot;&gt;Example&lt;/h3&gt;
&lt;p&gt;This example takes a co-ordinate &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Point&lt;/code&gt; to locate the shape in 2D space.&lt;/p&gt;

&lt;div class=&quot;language-haskell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kr&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;AdvShape&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;AdvCircle&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Point&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Float&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;AdvRect&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Point&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Point&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;deriving&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Show&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;area'&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;AdvCircle&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;radius&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pi&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;radius&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;**&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;area'&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;AdvRect&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Point&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x1&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Point&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x2&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
	&lt;span class=&quot;kr&quot;&gt;let&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;w&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;abs&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;h&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;abs&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;kr&quot;&gt;in&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;fromIntergral&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;w&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;h&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;exercises&quot;&gt;Exercises&lt;/h2&gt;
&lt;ol&gt;
  &lt;li&gt;
    &lt;div class=&quot;language-haskell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; &lt;span class=&quot;kr&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Point&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Point&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;deriving&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Show&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Read&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Eq&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
 &lt;span class=&quot;n&quot;&gt;distance&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Point&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;
 &lt;span class=&quot;n&quot;&gt;distance&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Point&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;div class=&quot;language-haskell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; &lt;span class=&quot;kr&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;HTTPResponse&lt;/span&gt; 	&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Data&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt; 
             &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Error&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;
             &lt;span class=&quot;kr&quot;&gt;deriving&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Show&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Read&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Eq&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;div class=&quot;language-haskell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; &lt;span class=&quot;kr&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Student&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Student&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;
             &lt;span class=&quot;n&quot;&gt;address&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;
             &lt;span class=&quot;n&quot;&gt;marks&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
             &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
             &lt;span class=&quot;kr&quot;&gt;deriving&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Show&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Read&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Eq&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ol&gt;</content><author><name>Ben Weston</name><email>b.weston60@gmail.com</email></author><category term="COMP105" /><category term="Lectures" /><category term="COMP105" /><category term="Lectures" /><summary type="html">More Complex Custom Types More Complex Constructors More complex constructors can contain other types. data Point = Point Int Int deriving (Show, Read, Eq) This is saying that the type Point has one constructor called Point and in that constructor there are two Int. The constructor name has no relation to the type name. It is common that if your type has only one constructor to call constructor the same name as the type. &amp;gt; Point 1 4 &amp;gt; Point 1 4 &amp;gt; read &quot;Point 10 10&quot; : Point &amp;gt; Point 10 10 &amp;gt; Point 2 2 /= Point 3 1 &amp;gt; True It is also common to use pattern matching to work with complex constructors: shift_up (Point x y) = Point x (y +1) &amp;gt; shift_up (Point 1 1) &amp;gt; Point 1 2 &amp;gt; :t shift_up &amp;gt; shift_up :: Point -&amp;gt; Point Example This example completes a computation using almost entirely our own custom types. We are also using pattern matching on our types: move :: Point -&amp;gt; Direction -&amp;gt; Point move (Point x y) North = Point x (y+1) move (Point x y) South = Point x (y-1) move (Point x y) East = Point (x+1) y move (Point x y) West = Point (x-1) y &amp;gt; move (Point 0 0) North &amp;gt; Point 0 1 More Complex Constructors Continued Types can have multiple constructors each of which can have their own types: data Shape = circle Float | Rect Float Float deriving (Show) &amp;gt; :t Circle 2.0 &amp;gt; Circle 2.0 :: Shape &amp;gt; :t Rect 3.0 4.0 &amp;gt; Rect 3.0 4.0 :: Shape Example area :: Shape -&amp;gt; Float area (Circle radius) = pi * radius ** 2 area (Rect x y) = x * y &amp;gt; area (Circle 2.0) &amp;gt; 12.56371 &amp;gt; area (Rect 3.0 4.0) &amp;gt; 12.0 Records You can use data types to build custom records: data Person = Person String String Int String get_first_name (Person x _ _ _) = x get_second_name (Person _ x _ _) = x get_age (Person _ _ x _) = x get_nationality (Person _ _ _ x) = x &amp;gt; get_age (Person &quot;joe&quot; &quot;bloggs&quot; 25 &quot;UK&quot;) &amp;gt; 25 Record Syntax To make things easier, Haskell provides a record syntax: data Person = Person { firstName :: String, secondName :: String, age :: Int, Nationality :: String} deriving (Show) &amp;gt; Person &quot;joe&quot; &quot;bloggs&quot; 25 &quot;UK&quot; &amp;gt; Person {firstName = &quot;joe&quot;, secondName = &quot;bloggs&quot;, age = 25, nationality = &quot;UK&quot;} This is similar to the previous example where we made our own record type. Records can be created out of order, whereas normal data types cannot. data Example = Example {a :: String, b :: Int} deriving (Show) &amp;gt; Example &quot;one&quot; 2 &amp;gt; Example {a = &quot;one&quot;, b = 2} &amp;gt; Example {b = 3, a = &quot;zero&quot;} &amp;gt; Example {a = &quot;zero&quot;, b = 3} If you create an out of order function then you should put them in {} with their labels so that Haskell can identify them. Example This example takes a co-ordinate Point to locate the shape in 2D space. data AdvShape = AdvCircle Point Float | AdvRect Point Point deriving (Show) area' (AdvCircle _ radius) = pi * radius ** 2 area' (AdvRect (Point x1 y1) (Point x2 y2)) = let w = abs (x1 - x2) h = abs (y1 - y2) in fromIntergral (w * h) Exercises data Point = Point Int Int deriving (Show, Read, Eq) distance :: Point -&amp;gt; Int distance (Point x y) = x + y data HTTPResponse = Data Int String | Error String deriving (Show, Read, Eq) data Student = Student {name :: String address :: String marks :: [Int] } deriving (Show, Read, Eq)</summary></entry><entry><title type="html">COMP107 - Seminar 5</title><link href="http://localhost:4000/UoL/comp107/seminars/2020/11/23/1.html" rel="alternate" type="text/html" title="COMP107 - Seminar 5" /><published>2020-11-23T00:00:00+00:00</published><updated>2020-11-23T00:00:00+00:00</updated><id>http://localhost:4000/UoL/comp107/seminars/2020/11/23/1</id><content type="html" xml:base="http://localhost:4000/UoL/comp107/seminars/2020/11/23/1.html">&lt;h2 id=&quot;enhanced-er&quot;&gt;Enhanced ER&lt;/h2&gt;
&lt;p&gt;EER is an ER model bu with hierarchal relationships.&lt;/p&gt;

&lt;p&gt;Entities that are member of one entity type (the &lt;strong&gt;superclass&lt;/strong&gt;) may be grouped into meaningful subsets (the &lt;strong&gt;subclasses&lt;/strong&gt;).&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Often referred to as an “is-A” relationship.
    &lt;ul&gt;
      &lt;li&gt;The two subclasses of TRAINEE is the training courses company: EMPLOYEE and PROFESSIONAL.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Inheritance permits economy of representation.&lt;/p&gt;

&lt;h3 id=&quot;inheritance&quot;&gt;Inheritance&lt;/h3&gt;
&lt;p&gt;An entity that is a member of a subclass inherits all of the attributes of the entity as a member of the superclass.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;A PROFESSIONAL, as a TRAINEE, has a code, name…&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Also inherits all relationship types the superclass participates in.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;A PROFESSIONAL, as a TRAINEE, attends editions of courses.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;when-to-classify&quot;&gt;When to Classify&lt;/h3&gt;
&lt;h4 id=&quot;specialisation&quot;&gt;Specialisation&lt;/h4&gt;
&lt;p&gt;Defining a set of subclasses of an entity type on the basis of some distinguishing characteristic of the entities in the superclass.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Certain attributes may apply to some by not all members of an entity type:
    &lt;ul&gt;
      &lt;li&gt;We keep Title and Area for professional trainees only:
        &lt;ul&gt;
          &lt;li&gt;A subclass is defined to group the entities to which these attributes apply.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Some relationship types may be participating in only by some members of an entity type:
    &lt;ul&gt;
      &lt;li&gt;Employee trainees are the only trainees who work for an employer:
        &lt;ul&gt;
          &lt;li&gt;A subclass is defined to group the entities participating to this relationship.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;generalisation&quot;&gt;Generalisation&lt;/h4&gt;
&lt;p&gt;Defining a superclass from a given set of entity types.&lt;/p&gt;

&lt;p&gt;Inverse of specialisation as it involves realising that some entity types have lots of common features.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;The main idea is to suppress difference between entity types.&lt;/li&gt;
  &lt;li&gt;Identify the common features an generalise them into a superclass:
    &lt;ul&gt;
      &lt;li&gt;Generalise CAR and TRUCK into a VEHICLE superclass if a common behaviour is identified.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;eer-notation&quot;&gt;EER Notation&lt;/h3&gt;
&lt;p&gt;The two processes of generalisation and specialisation may use different notation but we will use the &lt;strong&gt;same notation&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;You can find a summary of the full ER notation in &lt;a href=&quot;https://read.kortext.com/reader/pdf/125467/1193&quot;&gt;the textbook&lt;/a&gt; or in &lt;a href=&quot;/UoL/assets/COMP107/Seminars/2020-11-23-1.pdf&quot;&gt;this PDF&lt;/a&gt;.&lt;br /&gt;
The notation mentioned here is notation &lt;em&gt;e)(i)&lt;/em&gt; in the book.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Subclasses are attached to a circle which is connected with the superclass.&lt;/li&gt;
  &lt;li&gt;The subset symbol $\subset$ indicates direction of a relationship.&lt;/li&gt;
  &lt;li&gt;Generic attributes are attaches to the superclass.&lt;/li&gt;
  &lt;li&gt;Specific attributes are attaches to the subclasses.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/UoL/assets/COMP107/Seminars/2020-11-23-1-1.png&quot; alt=&quot;EER Notation&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;attribute-defined-subclasses&quot;&gt;Attribute-defined Subclasses&lt;/h4&gt;
&lt;p&gt;You can sometimes determine exactly the entities that will become members of each subclass&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;For TRAINEE we may specify the condition of membership to be on the basis of the content of an attribute JobType.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This attribute is the defining attribute of teh specialisation&lt;/p&gt;

&lt;p class=&quot;warning&quot;&gt;&lt;strong&gt;All&lt;/strong&gt; subclasses in an attribute-defined specialisation must have the membership condition on the same attribute.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/UoL/assets/COMP107/Seminars/2020-11-23-1-2.png&quot; alt=&quot;EER Notation&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;predicate-defined-subclasses&quot;&gt;Predicate-defined Subclasses&lt;/h4&gt;
&lt;p&gt;Sometimes the membership condition depends on more than one factor:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;For TRAINEE
    &lt;ul&gt;
      &lt;li&gt;For EMPLOYEE subclass we may specify the condition of membership to be: &lt;strong&gt;JobType=”Employee”&lt;/strong&gt;&lt;/li&gt;
      &lt;li&gt;We might have a subclass YOUNG representing all trainees with Age less than 30 no matter the job: &lt;strong&gt;Age &amp;lt; 30&lt;/strong&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We are therefore establishing membership on the basis of the truth value of a defining predicate.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/UoL/assets/COMP107/Seminars/2020-11-23-1-3.png&quot; alt=&quot;EER Notation&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;levels-of-specialisation&quot;&gt;Levels of Specialisation&lt;/h4&gt;
&lt;p&gt;We can have further specialisation of the same entity type using different distinguishing characteristics.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/UoL/assets/COMP107/Seminars/2020-11-23-1-4.png&quot; alt=&quot;EER Notation&quot; /&gt;&lt;/p&gt;

&lt;p class=&quot;info&quot;&gt;SALARIES and HOURLY-PAID are both EMPLOYEE and TRAINEE.&lt;/p&gt;

&lt;h4 id=&quot;disjointness-constraint&quot;&gt;Disjointness Constraint&lt;/h4&gt;
&lt;p&gt;Specifies that subclasses of a specialisation are &lt;strong&gt;disjoint&lt;/strong&gt;.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;An entity can be a member of &lt;strong&gt;at most one&lt;/strong&gt; of the subclasses of the specialisation.&lt;/li&gt;
  &lt;li&gt;Attribute defined specialisation implies disjoint subclasses if the defining attribute is single-valued.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Subclasses that are not disjoint may &lt;strong&gt;overlap&lt;/strong&gt;.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Some entities may be member of more than one subclass of the specialisation.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/UoL/assets/COMP107/Seminars/2020-11-23-1-5.png&quot; alt=&quot;EER Notation&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;completeness-constraint&quot;&gt;Completeness Constraint&lt;/h4&gt;
&lt;p&gt;This is similar to total and practical participation in regular relationships.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Total Specialisation
    &lt;ul&gt;
      &lt;li&gt;Every entity in a superclass must be a member of some subclass in some specialisation
        &lt;ul&gt;
          &lt;li&gt;Ever EMPLOYEE must be either HOURLY-PAID or SALARIED.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Partial Specialisation
    &lt;ul&gt;
      &lt;li&gt;Allows an entity not to belong to any of the subclasses
        &lt;ul&gt;
          &lt;li&gt;TRAINEES who are neither EMPLOYEES nor PROFESSIONAL.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p class=&quot;info&quot;&gt;Disjointness and completeness are independent.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/UoL/assets/COMP107/Seminars/2020-11-23-1-6.png&quot; alt=&quot;EER Notation&quot; /&gt;
&lt;em&gt;This image states that EMPLOYEES must be paid but students don’t have to be PROFESSIONALS or EMPLOYEES.&lt;/em&gt;&lt;/p&gt;

&lt;h3 id=&quot;insertion--deletion-rules&quot;&gt;Insertion &amp;amp; Deletion Rules&lt;/h3&gt;
&lt;p&gt;When implementing a database coming from an EER conceptualisation, we need to make sure the classification is preserved.&lt;/p&gt;

&lt;p&gt;This is especially relevant when the DBMS does not support classes.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Deleting an entity instance from a super class implies that it is automatically deleted from all of the subclasses it belongs to.&lt;/li&gt;
  &lt;li&gt;Inserting an entity instance in a superclass implies that the entity is inserted in all predicate-defined subclasses for which the entity satisfies the defining predicate.&lt;/li&gt;
  &lt;li&gt;Inserting an entity instance in a superclass of &lt;strong&gt;total specialisation&lt;/strong&gt; implies that the entity is inserted in at least one of the subclasses of the specialisation.&lt;/li&gt;
  &lt;li&gt;Inserting an entity in a superclass of &lt;strong&gt;disjoint, total specialisation&lt;/strong&gt; implies that the entity is inserted in one and only one of the subclasses of the specialisation.&lt;/li&gt;
&lt;/ol&gt;</content><author><name>Ben Weston</name><email>b.weston60@gmail.com</email></author><category term="COMP107" /><category term="Seminars" /><category term="COMP107" /><category term="Seminars" /><summary type="html">Enhanced ER EER is an ER model bu with hierarchal relationships. Entities that are member of one entity type (the superclass) may be grouped into meaningful subsets (the subclasses). Often referred to as an “is-A” relationship. The two subclasses of TRAINEE is the training courses company: EMPLOYEE and PROFESSIONAL. Inheritance permits economy of representation. Inheritance An entity that is a member of a subclass inherits all of the attributes of the entity as a member of the superclass. A PROFESSIONAL, as a TRAINEE, has a code, name… Also inherits all relationship types the superclass participates in. A PROFESSIONAL, as a TRAINEE, attends editions of courses. When to Classify Specialisation Defining a set of subclasses of an entity type on the basis of some distinguishing characteristic of the entities in the superclass. Certain attributes may apply to some by not all members of an entity type: We keep Title and Area for professional trainees only: A subclass is defined to group the entities to which these attributes apply. Some relationship types may be participating in only by some members of an entity type: Employee trainees are the only trainees who work for an employer: A subclass is defined to group the entities participating to this relationship. Generalisation Defining a superclass from a given set of entity types. Inverse of specialisation as it involves realising that some entity types have lots of common features. The main idea is to suppress difference between entity types. Identify the common features an generalise them into a superclass: Generalise CAR and TRUCK into a VEHICLE superclass if a common behaviour is identified. EER Notation The two processes of generalisation and specialisation may use different notation but we will use the same notation. You can find a summary of the full ER notation in the textbook or in this PDF. The notation mentioned here is notation e)(i) in the book. Subclasses are attached to a circle which is connected with the superclass. The subset symbol $\subset$ indicates direction of a relationship. Generic attributes are attaches to the superclass. Specific attributes are attaches to the subclasses. Attribute-defined Subclasses You can sometimes determine exactly the entities that will become members of each subclass For TRAINEE we may specify the condition of membership to be on the basis of the content of an attribute JobType. This attribute is the defining attribute of teh specialisation All subclasses in an attribute-defined specialisation must have the membership condition on the same attribute. Predicate-defined Subclasses Sometimes the membership condition depends on more than one factor: For TRAINEE For EMPLOYEE subclass we may specify the condition of membership to be: JobType=”Employee” We might have a subclass YOUNG representing all trainees with Age less than 30 no matter the job: Age &amp;lt; 30 We are therefore establishing membership on the basis of the truth value of a defining predicate. Levels of Specialisation We can have further specialisation of the same entity type using different distinguishing characteristics. SALARIES and HOURLY-PAID are both EMPLOYEE and TRAINEE. Disjointness Constraint Specifies that subclasses of a specialisation are disjoint. An entity can be a member of at most one of the subclasses of the specialisation. Attribute defined specialisation implies disjoint subclasses if the defining attribute is single-valued. Subclasses that are not disjoint may overlap. Some entities may be member of more than one subclass of the specialisation. Completeness Constraint This is similar to total and practical participation in regular relationships. Total Specialisation Every entity in a superclass must be a member of some subclass in some specialisation Ever EMPLOYEE must be either HOURLY-PAID or SALARIED. Partial Specialisation Allows an entity not to belong to any of the subclasses TRAINEES who are neither EMPLOYEES nor PROFESSIONAL. Disjointness and completeness are independent. This image states that EMPLOYEES must be paid but students don’t have to be PROFESSIONALS or EMPLOYEES. Insertion &amp;amp; Deletion Rules When implementing a database coming from an EER conceptualisation, we need to make sure the classification is preserved. This is especially relevant when the DBMS does not support classes. Deleting an entity instance from a super class implies that it is automatically deleted from all of the subclasses it belongs to. Inserting an entity instance in a superclass implies that the entity is inserted in all predicate-defined subclasses for which the entity satisfies the defining predicate. Inserting an entity instance in a superclass of total specialisation implies that the entity is inserted in at least one of the subclasses of the specialisation. Inserting an entity in a superclass of disjoint, total specialisation implies that the entity is inserted in one and only one of the subclasses of the specialisation.</summary></entry><entry><title type="html">COMP107 - Evolutionary Modelling</title><link href="http://localhost:4000/UoL/comp107/lectures/2020/11/22/1.html" rel="alternate" type="text/html" title="COMP107 - Evolutionary Modelling" /><published>2020-11-22T00:00:00+00:00</published><updated>2020-11-22T00:00:00+00:00</updated><id>http://localhost:4000/UoL/comp107/lectures/2020/11/22/1</id><content type="html" xml:base="http://localhost:4000/UoL/comp107/lectures/2020/11/22/1.html">&lt;p&gt;This type of modelling is inspired by agile principles.&lt;/p&gt;

&lt;h2 id=&quot;designing-an-er-schema&quot;&gt;Designing an ER Schema&lt;/h2&gt;
&lt;p&gt;You should identify the basic components:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Entity types.&lt;/li&gt;
  &lt;li&gt;Relationship types.&lt;/li&gt;
  &lt;li&gt;Attributes&lt;/li&gt;
  &lt;li&gt;And for each of these components:
    &lt;ul&gt;
      &lt;li&gt;Key attributes (unique for each identity).&lt;/li&gt;
      &lt;li&gt;Cardinality and participation constraints of relationships.&lt;/li&gt;
      &lt;li&gt;Different entity types.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;strategies-to-er-design&quot;&gt;Strategies to ER Design&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;Top-down
    &lt;ul&gt;
      &lt;li&gt;Start with a schema containing high-level abstractions an apply successive top-down refinements.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Bottom-up
    &lt;ul&gt;
      &lt;li&gt;Start with a schema containing basic abstractions then proceed by combining and adding to these.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Inside-out
    &lt;ul&gt;
      &lt;li&gt;Start from a central set of concepts, that are most evident and spread outwards,  by considering new concepts in the vicinity of existing ones.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;evolutionary-data-modelling&quot;&gt;Evolutionary Data Modelling&lt;/h2&gt;
&lt;p&gt;This is an approach that proceeds in an incremental manner.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;An initial &lt;strong&gt;slim&lt;/strong&gt; model is created that satisfies some initial requirements.&lt;/li&gt;
  &lt;li&gt;The model is then refines in a set of iterations, adding details.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;At each iteration a database can be built with a set of functionalities, queries, interface…&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;We will ignore this and only discuss data modelling.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;agile&quot;&gt;Agile?&lt;/h3&gt;
&lt;p&gt;Agile data modelling is evolutionary data modelling done in a collaborative manner.&lt;/p&gt;

&lt;p class=&quot;info&quot;&gt;Agile is a set of principles, not a specific technique.&lt;/p&gt;

&lt;p&gt;You can decide whether you want to apply evolutionary modelling in a highly collaborative setting or in a traditional development setting.&lt;/p&gt;

&lt;h3 id=&quot;user-stories&quot;&gt;User Stories&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Primary tolls of agile programming strategies.&lt;/li&gt;
  &lt;li&gt;They are a very high level and very concise statement of a requirement.&lt;/li&gt;
  &lt;li&gt;Much much smaller than a use case.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;example&quot;&gt;Example&lt;/h4&gt;
&lt;p&gt;Students can only enrol in a module if it is included in their programme.&lt;/p&gt;

&lt;p class=&quot;info&quot;&gt;As they are so short you should have many in order to make the system.&lt;/p&gt;

&lt;h4 id=&quot;creating-a-story-set&quot;&gt;Creating a Story Set&lt;/h4&gt;
&lt;p&gt;You can collect them informally or use a template. You should collect them systematically:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Number them.&lt;/li&gt;
  &lt;li&gt;Order them.&lt;/li&gt;
  &lt;li&gt;Prioritise them.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;template&quot;&gt;Template&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;As a (role) I want (something) to  that (benefit).&lt;/li&gt;
  &lt;li&gt;Similar format to the tutorial:
    &lt;ul&gt;
      &lt;li&gt;As a..&lt;/li&gt;
      &lt;li&gt;I need/want/expect to…&lt;/li&gt;
      &lt;li&gt;So that…&lt;/li&gt;
      &lt;li&gt;When…&lt;/li&gt;
      &lt;li&gt;Because… (is the user constrained by any circumstances)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;strategy&quot;&gt;Strategy&lt;/h3&gt;
&lt;ol&gt;
  &lt;li&gt;Collect, order and prioritise your user stories.&lt;/li&gt;
  &lt;li&gt;Decide how many iteration you want to make.&lt;/li&gt;
  &lt;li&gt;Decide which new stories you want to include in the design at each iteration.&lt;/li&gt;
  &lt;li&gt;Proceed to create an Entity Relationship model that represents those user stories.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;general-criterial-for-design&quot;&gt;General Criterial for Design&lt;/h3&gt;
&lt;ol&gt;
  &lt;li&gt;If a concept has a significant amount of properties it is an &lt;strong&gt;entity&lt;/strong&gt;.
    &lt;ul&gt;
      &lt;li&gt;It’s existence doesn’t depend from other concepts.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;If a concept has a simple structure or refers to another concept then it is an &lt;strong&gt;attriute&lt;/strong&gt;.&lt;/li&gt;
  &lt;li&gt;If the requirements contain a verb or connector then it is a &lt;strong&gt;relationship.&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;example-1&quot;&gt;Example&lt;/h3&gt;
&lt;p&gt;Consider the following script:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;1 We wish to create a system for a company that runs training courses.
2 For each course participant, identified by a code, we want to store the
3 national insurance number, surname, age, sex, place of birth,
4 employer’s name, address and telephone number, previous employers
5 (and period employed), the course attended and the final assessment
6 of each course. We need also to represent the seminars that each
7 participant is attending at present and, for each day, the places and
8 times the classes are held. Each course has a code and a title and any
9 course can be given any number of times. Each time a course is given,
10 we call it an “edition” of the course. For each edition, we represent
11 the start and end dates and the number of participants. If a trainee is
12 a self employed professional, we need to know his or her area of
13 expertise, and, if appropriate, his or her title. For somebody who
14 works for a company we store the level and position held. For each
15 instructor we will show surname, age, place of birth, the edition the
16 course is taught, those taught in the past and the courses the tutor is
17 qualified to teach. All the instructor’s telephone numbers are also
18 stored. An instructor can be permanently employed or freelance.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;1st-iteration---two-stories&quot;&gt;1st Iteration - Two Stories&lt;/h4&gt;
&lt;ol&gt;
  &lt;li&gt;Trainees attend courses.&lt;/li&gt;
  &lt;li&gt;Instructors teach courses.&lt;/li&gt;
&lt;/ol&gt;

&lt;pre&gt;&lt;code class=&quot;language-mermaid&quot;&gt;graph LR
t[Trainee] --- a{Attends}
a --- c[Course]
c --- te{Teaches}
te --- i[Instructor]
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&quot;2nd-iteration---three-stories&quot;&gt;2nd Iteration - Three Stories&lt;/h4&gt;
&lt;ol&gt;
  &lt;li&gt;Courses are held in editions.&lt;/li&gt;
  &lt;li&gt;Trainees can be self employed, professional or work for a company.
    &lt;ul&gt;
      &lt;li&gt;This could be as an attribute of the trainee or you could have it as two sub-entities.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;We distinguish between current and past editions.&lt;/li&gt;
&lt;/ol&gt;

&lt;pre&gt;&lt;code class=&quot;language-mermaid&quot;&gt;graph BT
e[Edition] --- a
e --- ha
e --- ht
a{Attends} --- t[Trainee]
e --- te{Teaches}
te --- i[Instructor]
e --- h{Held In}
h --- c[Course Type]
t --- is{Is a}
is --- em[Employee]
is --- p[Professional]
ha{Has Attended} --- t
ht{Has Taught} --- i
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&quot;3rd-iteration---four-stories&quot;&gt;3rd Iteration - Four Stories&lt;/h4&gt;
&lt;ol&gt;
  &lt;li&gt;Course are held in classrooms.&lt;/li&gt;
  &lt;li&gt;Instructors only teach courses for which they are qualified.&lt;/li&gt;
  &lt;li&gt;We archive past editions of courses keeping summary data.&lt;/li&gt;
  &lt;li&gt;We maintain data of trainees’ employers.&lt;/li&gt;
&lt;/ol&gt;

&lt;pre&gt;&lt;code class=&quot;language-mermaid&quot;&gt;graph BT
Edition --- a{Attends}
Edition --- h{Held In}
Edition --- t{Teaches}
a --- Trainee
Trainee --- is{Is A}
is --- Employee
Employee --- wf{Works For}
Employee --- hwf{Has Worked For}
wf --- Employer
hwf --- Employer
is --- Professional
h --- ct[Course Type]
ct --- hbhi{Has Been Held In}
ct --- q{Qualifies}
hbhi --- pe[Past Editions]
pe --- ha{Has Attended}
Trainee --- ha
pe --- ht{Has Taught}
q --- Instructor
Instructor --- ht
t --- Instructor
t --- Classroom
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This type of diagram may not result in the most efficient database. You may want to make changes from this conceptualisation when implementing.&lt;/p&gt;

&lt;h4 id=&quot;dodgy-entities&quot;&gt;&lt;em&gt;Dodgy&lt;/em&gt; Entities&lt;/h4&gt;
&lt;p&gt;Some entities such as trainee, professional and edition aren’t true entities. They are a type of entity called a &lt;strong&gt;weak entity&lt;/strong&gt;.&lt;/p&gt;

&lt;h2 id=&quot;weak-entities&quot;&gt;Weak Entities&lt;/h2&gt;
&lt;p&gt;These are entities which cannot be identified in isolation. Instances are identified because they belong to specific entities from another entity type, known as &lt;strong&gt;identifying owner&lt;/strong&gt;.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;The content of a lecture theatre - whiteboards, desks - cannot be typically identified directly.
    &lt;ul&gt;
      &lt;li&gt;The lecture theatre is their identifying owner, so we can talk about: the front desk in the Ashton Lecture Theatre.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p class=&quot;info&quot;&gt;Weak entities are entities that have an owner.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;The relationship type that relates the weak entity to its owner is the weak entity’s &lt;strong&gt;identifying relationship&lt;/strong&gt;.&lt;/li&gt;
  &lt;li&gt;Weak entity types might have a partial key, to distinguish one weak entity fro other weak entities related to the same owner.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;weak-entities-vs-total-participation&quot;&gt;Weak Entities v.s. Total Participation&lt;/h3&gt;
&lt;p&gt;A weak entity cannot exist in isolation, it must have an owner. This means that is is often confused with a total participation relationship.&lt;/p&gt;

&lt;h4 id=&quot;total-participation&quot;&gt;Total Participation&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;A lecturer &lt;em&gt;must&lt;/em&gt; work for a department.
    &lt;ul&gt;
      &lt;li&gt;The lecturer is not a weak entity as they have a staff number and can be identified.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;weak-entity&quot;&gt;Weak Entity&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;A desk &lt;em&gt;must&lt;/em&gt; belong to a lecture theatre.
    &lt;ul&gt;
      &lt;li&gt;This is weak as we don’t have a direct ID for the desk.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;er-notation&quot;&gt;ER Notation&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;A weak entity is represented as a double box.&lt;/li&gt;
  &lt;li&gt;The identifying relation is a double diamond.&lt;/li&gt;
  &lt;li&gt;A partial key has a dotted underline.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/UoL/assets/COMP107/Lectures/2020-11-22-1.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p class=&quot;info&quot;&gt;View &lt;a href=&quot;/UoL/assets/COMP107/Lectures/2020-11-22-1.pdf&quot;&gt;the slides&lt;/a&gt; for the final diagram including this new notation. This also includes notation for multi-attributes. There is also a further example from the textbook.&lt;/p&gt;

&lt;h4 id=&quot;alternate-cardinality-notation&quot;&gt;Alternate Cardinality Notation.&lt;/h4&gt;
&lt;p&gt;Instead of using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;1&lt;/code&gt; or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;N&lt;/code&gt; to denote the cardinality of a relationship you can have finer control by stating the range of cardinalities allowed like so:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-mermaid&quot;&gt;graph LR
Employee ---|&quot;(0,N) Supervisor&quot;| s{Supervision}
s ---|&quot;(0,1) Supervisee&quot;| Employee
&lt;/code&gt;&lt;/pre&gt;</content><author><name>Ben Weston</name><email>b.weston60@gmail.com</email></author><category term="COMP107" /><category term="Lectures" /><category term="COMP107" /><category term="Tutorials" /><summary type="html">This type of modelling is inspired by agile principles. Designing an ER Schema You should identify the basic components: Entity types. Relationship types. Attributes And for each of these components: Key attributes (unique for each identity). Cardinality and participation constraints of relationships. Different entity types. Strategies to ER Design Top-down Start with a schema containing high-level abstractions an apply successive top-down refinements. Bottom-up Start with a schema containing basic abstractions then proceed by combining and adding to these. Inside-out Start from a central set of concepts, that are most evident and spread outwards, by considering new concepts in the vicinity of existing ones. Evolutionary Data Modelling This is an approach that proceeds in an incremental manner. An initial slim model is created that satisfies some initial requirements. The model is then refines in a set of iterations, adding details. At each iteration a database can be built with a set of functionalities, queries, interface… We will ignore this and only discuss data modelling. Agile? Agile data modelling is evolutionary data modelling done in a collaborative manner. Agile is a set of principles, not a specific technique. You can decide whether you want to apply evolutionary modelling in a highly collaborative setting or in a traditional development setting. User Stories Primary tolls of agile programming strategies. They are a very high level and very concise statement of a requirement. Much much smaller than a use case. Example Students can only enrol in a module if it is included in their programme. As they are so short you should have many in order to make the system. Creating a Story Set You can collect them informally or use a template. You should collect them systematically: Number them. Order them. Prioritise them. Template As a (role) I want (something) to that (benefit). Similar format to the tutorial: As a.. I need/want/expect to… So that… When… Because… (is the user constrained by any circumstances) Strategy Collect, order and prioritise your user stories. Decide how many iteration you want to make. Decide which new stories you want to include in the design at each iteration. Proceed to create an Entity Relationship model that represents those user stories. General Criterial for Design If a concept has a significant amount of properties it is an entity. It’s existence doesn’t depend from other concepts. If a concept has a simple structure or refers to another concept then it is an attriute. If the requirements contain a verb or connector then it is a relationship. Example Consider the following script: 1 We wish to create a system for a company that runs training courses. 2 For each course participant, identified by a code, we want to store the 3 national insurance number, surname, age, sex, place of birth, 4 employer’s name, address and telephone number, previous employers 5 (and period employed), the course attended and the final assessment 6 of each course. We need also to represent the seminars that each 7 participant is attending at present and, for each day, the places and 8 times the classes are held. Each course has a code and a title and any 9 course can be given any number of times. Each time a course is given, 10 we call it an “edition” of the course. For each edition, we represent 11 the start and end dates and the number of participants. If a trainee is 12 a self employed professional, we need to know his or her area of 13 expertise, and, if appropriate, his or her title. For somebody who 14 works for a company we store the level and position held. For each 15 instructor we will show surname, age, place of birth, the edition the 16 course is taught, those taught in the past and the courses the tutor is 17 qualified to teach. All the instructor’s telephone numbers are also 18 stored. An instructor can be permanently employed or freelance. 1st Iteration - Two Stories Trainees attend courses. Instructors teach courses. graph LR t[Trainee] --- a{Attends} a --- c[Course] c --- te{Teaches} te --- i[Instructor] 2nd Iteration - Three Stories Courses are held in editions. Trainees can be self employed, professional or work for a company. This could be as an attribute of the trainee or you could have it as two sub-entities. We distinguish between current and past editions. graph BT e[Edition] --- a e --- ha e --- ht a{Attends} --- t[Trainee] e --- te{Teaches} te --- i[Instructor] e --- h{Held In} h --- c[Course Type] t --- is{Is a} is --- em[Employee] is --- p[Professional] ha{Has Attended} --- t ht{Has Taught} --- i 3rd Iteration - Four Stories Course are held in classrooms. Instructors only teach courses for which they are qualified. We archive past editions of courses keeping summary data. We maintain data of trainees’ employers. graph BT Edition --- a{Attends} Edition --- h{Held In} Edition --- t{Teaches} a --- Trainee Trainee --- is{Is A} is --- Employee Employee --- wf{Works For} Employee --- hwf{Has Worked For} wf --- Employer hwf --- Employer is --- Professional h --- ct[Course Type] ct --- hbhi{Has Been Held In} ct --- q{Qualifies} hbhi --- pe[Past Editions] pe --- ha{Has Attended} Trainee --- ha pe --- ht{Has Taught} q --- Instructor Instructor --- ht t --- Instructor t --- Classroom This type of diagram may not result in the most efficient database. You may want to make changes from this conceptualisation when implementing. Dodgy Entities Some entities such as trainee, professional and edition aren’t true entities. They are a type of entity called a weak entity. Weak Entities These are entities which cannot be identified in isolation. Instances are identified because they belong to specific entities from another entity type, known as identifying owner. The content of a lecture theatre - whiteboards, desks - cannot be typically identified directly. The lecture theatre is their identifying owner, so we can talk about: the front desk in the Ashton Lecture Theatre. Weak entities are entities that have an owner. The relationship type that relates the weak entity to its owner is the weak entity’s identifying relationship. Weak entity types might have a partial key, to distinguish one weak entity fro other weak entities related to the same owner. Weak Entities v.s. Total Participation A weak entity cannot exist in isolation, it must have an owner. This means that is is often confused with a total participation relationship. Total Participation A lecturer must work for a department. The lecturer is not a weak entity as they have a staff number and can be identified. Weak Entity A desk must belong to a lecture theatre. This is weak as we don’t have a direct ID for the desk. ER Notation A weak entity is represented as a double box. The identifying relation is a double diamond. A partial key has a dotted underline. View the slides for the final diagram including this new notation. This also includes notation for multi-attributes. There is also a further example from the textbook. Alternate Cardinality Notation. Instead of using 1 or N to denote the cardinality of a relationship you can have finer control by stating the range of cardinalities allowed like so: graph LR Employee ---|&quot;(0,N) Supervisor&quot;| s{Supervision} s ---|&quot;(0,1) Supervisee&quot;| Employee</summary></entry><entry><title type="html">COMP109 - Relations - 1</title><link href="http://localhost:4000/UoL/comp109/lectures/2020/11/22/1.html" rel="alternate" type="text/html" title="COMP109 - Relations - 1" /><published>2020-11-22T00:00:00+00:00</published><updated>2020-11-22T00:00:00+00:00</updated><id>http://localhost:4000/UoL/comp109/lectures/2020/11/22/1</id><content type="html" xml:base="http://localhost:4000/UoL/comp109/lectures/2020/11/22/1.html">&lt;h2 id=&quot;cartesian-product&quot;&gt;Cartesian Product&lt;/h2&gt;
&lt;p&gt;For the Cartesian product you are making a list of all possibilities of the elements in both sets. This is similar to multiplying brackets.&lt;/p&gt;

&lt;h3 id=&quot;example&quot;&gt;Example&lt;/h3&gt;
&lt;p&gt;Let $A={1,2}$ and $B={a,b,c}$, then:&lt;/p&gt;

\[A\times B = \{(1,a),(2,a),(1,b),(2,b),(1,c),(2,c)\}\]

&lt;p&gt;Therefore:&lt;/p&gt;

\[B\times A = \{(a,1),(a,2),(b,1),(b,2),(c,1),(c,2)\}\]

&lt;h3 id=&quot;relations&quot;&gt;Relations&lt;/h3&gt;
&lt;p&gt;Any relation between the elements in set $A$ and $B$ will be in the set of their Cartesian product.&lt;/p&gt;

&lt;p&gt;A &lt;strong&gt;binary relation&lt;/strong&gt; between two sets $A$ and $B$ is a subset $R$ of the Cartesian product $A\times B$.&lt;/p&gt;

&lt;p&gt;If $A=B$, then $R$ is called &lt;strong&gt;a binary relation on $A$&lt;/strong&gt;.&lt;/p&gt;

&lt;h3 id=&quot;family-tree-example&quot;&gt;Family Tree Example&lt;/h3&gt;
&lt;p&gt;The set $A$ is the set of all people in the tree.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-mermaid&quot;&gt;graph TD
fm[Fred and Mavis] --- Alice
fm --- ks[Ken and Sue]
ks --- Jane
ks --- Fiona
ks --- Alan
jm[John and Mary] --- ks
jm --- Mike
jm --- Penny
&lt;/code&gt;&lt;/pre&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;$R={(x,y)\vert x\text{ is a grandfather of } y}$&lt;/p&gt;

    &lt;p&gt;For this set:&lt;/p&gt;

    &lt;p&gt;$R={\text{(Fred, Jane), (Fred, Fiona), (Fred, Alan), (John, Jayne), (John, Fiona), (John, Alan)}}$&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;$S={(x,y)\vert x\text{ is a sister of } y}$&lt;/p&gt;

    &lt;p&gt;For this set:&lt;/p&gt;

    &lt;p&gt;$S={\text{(Alice, Ken), (Sue, Mike), (Sue, Penny), (Penny, Sue), (Penny, Mike), (Jane, Fiona)}}$&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;algebraic-example&quot;&gt;Algebraic Example&lt;/h3&gt;
&lt;p&gt;Write down the ordered parts belonging to the following binary relations between $A={1,3,5,7}$ and $B={2,4,6}$:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;$U={(x,y)\in A\times B \vert x + y = 9}$&lt;/p&gt;

    &lt;p&gt;This means the combinations from the two sets where the elements sum to 9.&lt;/p&gt;

    &lt;p&gt;$U={(3,6),(5,4),(7,2)}$&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;$V={(x,y)\in A\times B \vert x &amp;lt; y }$&lt;/p&gt;

    &lt;p&gt;This is the set of all pairs such that the first element is smaller than the second element.&lt;/p&gt;

    &lt;p&gt;$V={(1,2),(1,4),(1,6),(3,4),(3,6),(5,6)}$&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;</content><author><name>Ben Weston</name><email>b.weston60@gmail.com</email></author><category term="COMP109" /><category term="Lectures" /><category term="COMP109" /><summary type="html">Cartesian Product For the Cartesian product you are making a list of all possibilities of the elements in both sets. This is similar to multiplying brackets. Example Let $A={1,2}$ and $B={a,b,c}$, then: \[A\times B = \{(1,a),(2,a),(1,b),(2,b),(1,c),(2,c)\}\] Therefore: \[B\times A = \{(a,1),(a,2),(b,1),(b,2),(c,1),(c,2)\}\] Relations Any relation between the elements in set $A$ and $B$ will be in the set of their Cartesian product. A binary relation between two sets $A$ and $B$ is a subset $R$ of the Cartesian product $A\times B$. If $A=B$, then $R$ is called a binary relation on $A$. Family Tree Example The set $A$ is the set of all people in the tree. graph TD fm[Fred and Mavis] --- Alice fm --- ks[Ken and Sue] ks --- Jane ks --- Fiona ks --- Alan jm[John and Mary] --- ks jm --- Mike jm --- Penny $R={(x,y)\vert x\text{ is a grandfather of } y}$ For this set: $R={\text{(Fred, Jane), (Fred, Fiona), (Fred, Alan), (John, Jayne), (John, Fiona), (John, Alan)}}$ $S={(x,y)\vert x\text{ is a sister of } y}$ For this set: $S={\text{(Alice, Ken), (Sue, Mike), (Sue, Penny), (Penny, Sue), (Penny, Mike), (Jane, Fiona)}}$ Algebraic Example Write down the ordered parts belonging to the following binary relations between $A={1,3,5,7}$ and $B={2,4,6}$: $U={(x,y)\in A\times B \vert x + y = 9}$ This means the combinations from the two sets where the elements sum to 9. $U={(3,6),(5,4),(7,2)}$ $V={(x,y)\in A\times B \vert x &amp;lt; y }$ This is the set of all pairs such that the first element is smaller than the second element. $V={(1,2),(1,4),(1,6),(3,4),(3,6),(5,6)}$</summary></entry><entry><title type="html">COMP107 - Tutorial 3</title><link href="http://localhost:4000/UoL/comp107/tutorials/2020/11/20/1.html" rel="alternate" type="text/html" title="COMP107 - Tutorial 3" /><published>2020-11-20T00:00:00+00:00</published><updated>2020-11-20T00:00:00+00:00</updated><id>http://localhost:4000/UoL/comp107/tutorials/2020/11/20/1</id><content type="html" xml:base="http://localhost:4000/UoL/comp107/tutorials/2020/11/20/1.html">&lt;h2 id=&quot;designing-an-er-schema&quot;&gt;Designing an ER Schema&lt;/h2&gt;
&lt;p&gt;You should identify basic components:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Entity types, relationship types, attributes:
    &lt;ul&gt;
      &lt;li&gt;Key attributes.&lt;/li&gt;
      &lt;li&gt;Cardinality and participation constrains of relationships.&lt;/li&gt;
      &lt;li&gt;Different entity types.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;There are also weak entities such as tables or chairs. These simple objects don’t need individual identification and should be a child of the strong entity.&lt;/p&gt;

&lt;p class=&quot;info&quot;&gt;The &lt;a href=&quot;/UoL/assets/COMP107/Tutorials/2020-11-20-1.pdf&quot;&gt;lecture slides&lt;/a&gt; have a summary and examples of the ER diagram scheme.&lt;/p&gt;

&lt;h2 id=&quot;evolutionary-data-modelling&quot;&gt;Evolutionary Data Modelling&lt;/h2&gt;

&lt;p&gt;Evolutionary data modelling is an approach that proceeds in an incremental manner:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;An initial slim model is created that satisfies some initial requirements.&lt;/li&gt;
  &lt;li&gt;The model is then refines in a set of iterations adding details.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;exercise&quot;&gt;Exercise&lt;/h2&gt;
&lt;p&gt;Draw an ER model to describe the data need by the conference planner app starting from users stories:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;3 iterations with 8 minutes each.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;task-1&quot;&gt;Task 1&lt;/h3&gt;
&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;As a speaker, I want to upload the details of my keynote.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;As a speaker I want to know then my keynote is scheduled.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&quot;/UoL/assets/COMP107/Tutorials/2020-11-20-1-1.png&quot; alt=&quot;Screenshot 1&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;task-2&quot;&gt;Task 2&lt;/h3&gt;
&lt;ol&gt;
  &lt;li&gt;As a participant I want to register my attendance to a keynote.&lt;/li&gt;
  &lt;li&gt;As a participant I want to book a room in a hotel.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&quot;/UoL/assets/COMP107/Tutorials/2020-11-20-1-2.png&quot; alt=&quot;Screenshot 2&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;task-3&quot;&gt;Task 3&lt;/h3&gt;
&lt;ol&gt;
  &lt;li&gt;As an organiser, I want to know which conference participants are giving keynotes.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&quot;/UoL/assets/COMP107/Tutorials/2020-11-20-1-3.png&quot; alt=&quot;Screenshot 3&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;tutor-review&quot;&gt;Tutor Review&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Speaker or not is redundant as it is implied by the fact they are presenting or not.&lt;/li&gt;
  &lt;li&gt;This is the same for the list of speakers. As it can be derived as a query&lt;/li&gt;
  &lt;li&gt;The organiser doesn’t need to be represented as they are just querying.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;final-diagram-after-review&quot;&gt;Final diagram after review:&lt;/h4&gt;

&lt;p&gt;&lt;img src=&quot;/UoL/assets/COMP107/Tutorials/2020-11-20-1-4.png&quot; alt=&quot;ER Diagram&quot; /&gt;&lt;/p&gt;</content><author><name>Ben Weston</name><email>b.weston60@gmail.com</email></author><category term="COMP107" /><category term="Tutorials" /><category term="COMP107" /><category term="Tutorials" /><summary type="html">Designing an ER Schema You should identify basic components: Entity types, relationship types, attributes: Key attributes. Cardinality and participation constrains of relationships. Different entity types. There are also weak entities such as tables or chairs. These simple objects don’t need individual identification and should be a child of the strong entity. The lecture slides have a summary and examples of the ER diagram scheme. Evolutionary Data Modelling Evolutionary data modelling is an approach that proceeds in an incremental manner: An initial slim model is created that satisfies some initial requirements. The model is then refines in a set of iterations adding details. Exercise Draw an ER model to describe the data need by the conference planner app starting from users stories: 3 iterations with 8 minutes each. Task 1 As a speaker, I want to upload the details of my keynote. As a speaker I want to know then my keynote is scheduled. Task 2 As a participant I want to register my attendance to a keynote. As a participant I want to book a room in a hotel. Task 3 As an organiser, I want to know which conference participants are giving keynotes. Tutor Review Speaker or not is redundant as it is implied by the fact they are presenting or not. This is the same for the list of speakers. As it can be derived as a query The organiser doesn’t need to be represented as they are just querying. Final diagram after review:</summary></entry><entry><title type="html">COMP105 - Lecture 18-1</title><link href="http://localhost:4000/UoL/comp105/lectures/2020/11/19/1.html" rel="alternate" type="text/html" title="COMP105 - Lecture 18-1" /><published>2020-11-19T00:00:00+00:00</published><updated>2020-11-19T00:00:00+00:00</updated><id>http://localhost:4000/UoL/comp105/lectures/2020/11/19/1</id><content type="html" xml:base="http://localhost:4000/UoL/comp105/lectures/2020/11/19/1.html">&lt;h2 id=&quot;marks-to-report-example&quot;&gt;Marks to Report Example&lt;/h2&gt;
&lt;p&gt;This lecture covers a mini assignment example about converting a csv file containing students marks into a report containing the students averages. These are presented in the following format:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;aaa		70	65	67	60
bbb		55	60	55	65
ccc		40	40	40	40
ddd		80	60	75	60
ccc		0	0	0	100
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;And should be transformed to be:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;aaa		65.5
bbb		58.75
ccc		40.0
ddd		68.75
ccc		25.0
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p class=&quot;info&quot;&gt;See &lt;a href=&quot;/UoL/assets/COMP105/Lectures/2020-11-19-1.pdf&quot;&gt;the slides&lt;/a&gt; for the full examples.&lt;/p&gt;

&lt;h3 id=&quot;reading-files-in-haskell&quot;&gt;Reading files in Haskell&lt;/h3&gt;
&lt;p&gt;We can read a file using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;readFile&lt;/code&gt;:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;This is an IO function.&lt;/li&gt;
  &lt;li&gt;We will study this in more detail later on.&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-haskell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;readfile&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;marks.csv&quot;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;aaa		70	65	67	60&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;bbb		55	60	55...
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;\n&lt;/code&gt; character is the newline character.&lt;/p&gt;

&lt;h3 id=&quot;lines&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;lines&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;The lines function takes a string containing multiple lines into a list of strings. The complement to this function is the function &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;unlines&lt;/code&gt;. This will do the opposite.&lt;/p&gt;

&lt;h3 id=&quot;parsing-the-file&quot;&gt;Parsing the File&lt;/h3&gt;
&lt;p&gt;Using the functions &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;words&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;lines&lt;/code&gt; we can put the file into a list of lists of strings, in order to process the file.&lt;/p&gt;

&lt;h3 id=&quot;getting-the-averages&quot;&gt;Getting the Averages&lt;/h3&gt;
&lt;p&gt;The function &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;read&lt;/code&gt; will convert a string into a float.&lt;/p&gt;

&lt;h3 id=&quot;writing-the-output-file&quot;&gt;Writing the Output File&lt;/h3&gt;
&lt;p&gt;The function &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;writeFile&lt;/code&gt; will write some data into a file:&lt;/p&gt;

&lt;div class=&quot;language-haskell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;writeFile&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;test.txt&quot;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;hello&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This is not a pure function and we will see it again later.&lt;/p&gt;

&lt;h3 id=&quot;all-in-one-function&quot;&gt;All in One Function&lt;/h3&gt;
&lt;p&gt;The pure function portion of the exercise will read as the following:&lt;/p&gt;

&lt;div class=&quot;language-haskell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;report&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;file&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 
	&lt;span class=&quot;kr&quot;&gt;let&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;parsed&lt;/span&gt;		&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;map&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;words&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lines&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;file&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;students&lt;/span&gt;	&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;map&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;parsed&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;averages&lt;/span&gt;	&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;map&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;average&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;parsed&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;zipped&lt;/span&gt;		&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;zipWith&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;report_line&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;students&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;averages&lt;/span&gt;
	&lt;span class=&quot;kr&quot;&gt;in&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;unlines&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;zipped&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content><author><name>Ben Weston</name><email>b.weston60@gmail.com</email></author><category term="COMP105" /><category term="Lectures" /><category term="COMP105" /><category term="Lectures" /><summary type="html">Marks to Report Example This lecture covers a mini assignment example about converting a csv file containing students marks into a report containing the students averages. These are presented in the following format: aaa 70 65 67 60 bbb 55 60 55 65 ccc 40 40 40 40 ddd 80 60 75 60 ccc 0 0 0 100 And should be transformed to be: aaa 65.5 bbb 58.75 ccc 40.0 ddd 68.75 ccc 25.0 See the slides for the full examples. Reading files in Haskell We can read a file using readFile: This is an IO function. We will study this in more detail later on. &amp;gt; readfile &quot;marks.csv&quot; &amp;gt; &quot;aaa 70 65 67 60\nbbb 55 60 55... The \n character is the newline character. lines The lines function takes a string containing multiple lines into a list of strings. The complement to this function is the function unlines. This will do the opposite. Parsing the File Using the functions words and lines we can put the file into a list of lists of strings, in order to process the file. Getting the Averages The function read will convert a string into a float. Writing the Output File The function writeFile will write some data into a file: &amp;gt; writeFile &quot;test.txt&quot; &quot;hello&quot; This is not a pure function and we will see it again later. All in One Function The pure function portion of the exercise will read as the following: report file = let parsed = map words . lines $ file students = map name parsed averages = map average parsed zipped = zipWith report_line students averages in unlines zipped</summary></entry><entry><title type="html">COMP105 - Lecture 18-2</title><link href="http://localhost:4000/UoL/comp105/lectures/2020/11/19/2.html" rel="alternate" type="text/html" title="COMP105 - Lecture 18-2" /><published>2020-11-19T00:00:00+00:00</published><updated>2020-11-19T00:00:00+00:00</updated><id>http://localhost:4000/UoL/comp105/lectures/2020/11/19/2</id><content type="html" xml:base="http://localhost:4000/UoL/comp105/lectures/2020/11/19/2.html">&lt;h2 id=&quot;first-past-the-post-example&quot;&gt;First Past the Post Example&lt;/h2&gt;
&lt;p&gt;This example covers a first past the post election. This means whoever gets the most votes wins. We are aiming to make a function that performs this task:&lt;/p&gt;

&lt;div class=&quot;language-haskell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;winner&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;red&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;blue&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;red&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;red&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;green&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;red&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;getting-the-candidates&quot;&gt;Getting the Candidates&lt;/h3&gt;
&lt;p&gt;First we need to figure out who the candidates are:&lt;/p&gt;

&lt;div class=&quot;language-haskell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;uniq&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;[]&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;uniq&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;xs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;uniq&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;filter&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;xs&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This function will remove duplicates from a list of strings. For every new element found the filter will remove all further occurrences from the rest of the list before recursing on the list.&lt;/p&gt;

&lt;h3 id=&quot;counting-the-votes&quot;&gt;Counting the Votes&lt;/h3&gt;
&lt;p&gt;This function counts the number of votes for a particular  candidate:&lt;/p&gt;

&lt;div class=&quot;language-haskell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;count&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;list&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;length&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;filter&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;==&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;vote-totals&quot;&gt;Vote Totals&lt;/h3&gt;
&lt;p&gt;This function will count all the votes for each candidate and put the number of votes and then the candidate in a list of tuples.&lt;/p&gt;

&lt;div class=&quot;language-haskell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;total&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;votes&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 
	&lt;span class=&quot;kr&quot;&gt;let&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;candidates&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;uniq&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;votes&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;\&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;count&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;votes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
	&lt;span class=&quot;kr&quot;&gt;in&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;map&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;candidates&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;comparing-candidates&quot;&gt;Comparing Candidates&lt;/h3&gt;
&lt;p&gt;Tuples are compared lexicographically. This means that each element is compared in turn to find which satisfies the function.&lt;/p&gt;

&lt;div class=&quot;language-haskell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;max&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;red&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;blue&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;red&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This means that if two candidates have the same number then the string is compared.&lt;/p&gt;

&lt;h4 id=&quot;maximum&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;maximum&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;The function &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;maximum&lt;/code&gt; takes a list and returns the largest item in the list:&lt;/p&gt;

&lt;div class=&quot;language-haskell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;maximum&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;red&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;blue&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;green&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;green&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;finding-the-winner&quot;&gt;Finding the Winner&lt;/h3&gt;
&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;snd&lt;/code&gt; returns the second value in a tuple:&lt;/p&gt;

&lt;div class=&quot;language-haskell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;winner&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;votes&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;snd&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;maximum&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;totals&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;votes&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Applying this satisfies the requirement:&lt;/p&gt;

&lt;div class=&quot;language-haskell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;winner&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;red&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;blue&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;red&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;red&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;green&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;red&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;alternative-vote-example&quot;&gt;Alternative Vote Example&lt;/h2&gt;
&lt;p&gt;In the alternative vote system, voters rank the candidates:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;In each round, the candidate with the least number of first preference votes is eliminated.&lt;/li&gt;
  &lt;li&gt;The winner is the last candidate left once all other have been eliminated.&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-haskell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;votes&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;red&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;blue&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;green&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
				&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;blue&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;green&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
				&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;green&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;red&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
				&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;blue&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;red&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
				&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;red&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]]&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;av_winner&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;votes&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;red&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;You don’t need many preferences and each list is a single person’s preferences.&lt;/p&gt;

&lt;p class=&quot;info&quot;&gt;See &lt;a href=&quot;/UoL/assets/COMP105/Lectures/2020-11-19-2.pdf&quot;&gt;the slides&lt;/a&gt; for full examples.&lt;/p&gt;

&lt;h3 id=&quot;ranking-the-candidates&quot;&gt;Ranking the Candidates&lt;/h3&gt;
&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sort&lt;/code&gt; sorts all of the items in a list and orders them from smallest to biggest.&lt;/p&gt;

&lt;h3 id=&quot;getting-the-first-choice-votes&quot;&gt;Getting the First Choice Votes&lt;/h3&gt;
&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;head&lt;/code&gt; doesn’t accept empty lists as input. This should be taken into account when removing items from lists unevenly.&lt;/p&gt;

&lt;h3 id=&quot;final-function&quot;&gt;Final Function&lt;/h3&gt;
&lt;p&gt;All of the components give this function:&lt;/p&gt;

&lt;div class=&quot;language-haskell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;av_winner&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;votes&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
	&lt;span class=&quot;kr&quot;&gt;let&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;ranked&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rank_candidates&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;votes&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;first&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;head&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ranked&lt;/span&gt;
	&lt;span class=&quot;kr&quot;&gt;in&lt;/span&gt;
		&lt;span class=&quot;kr&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;length&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ranked&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
		&lt;span class=&quot;kr&quot;&gt;then&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;first&lt;/span&gt;
		&lt;span class=&quot;kr&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;av_winner&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;remove_cand&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;first&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;votes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content><author><name>Ben Weston</name><email>b.weston60@gmail.com</email></author><category term="COMP105" /><category term="Lectures" /><category term="COMP105" /><category term="Lectures" /><summary type="html">First Past the Post Example This example covers a first past the post election. This means whoever gets the most votes wins. We are aiming to make a function that performs this task: &amp;gt; winner [&quot;red&quot;, &quot;blue&quot;, &quot;red&quot;, &quot;red&quot;, &quot;green&quot;] &amp;gt; &quot;red&quot; Getting the Candidates First we need to figure out who the candidates are: uniq [] = [] uniq (x:xs) = x : uniq (filter (/=x) xs ) This function will remove duplicates from a list of strings. For every new element found the filter will remove all further occurrences from the rest of the list before recursing on the list. Counting the Votes This function counts the number of votes for a particular candidate: count x list = length (filter (==x) list) Vote Totals This function will count all the votes for each candidate and put the number of votes and then the candidate in a list of tuples. total votes = let candidates = uniq votes f = (\ c -&amp;gt; (count c votes, c)) in map f candidates Comparing Candidates Tuples are compared lexicographically. This means that each element is compared in turn to find which satisfies the function. &amp;gt; max (3, &quot;red&quot;) (2, &quot;blue&quot;) &amp;gt; (3,&quot;red&quot;) This means that if two candidates have the same number then the string is compared. maximum The function maximum takes a list and returns the largest item in the list: &amp;gt; maximum [(3, &quot;red&quot;), (2, &quot;blue&quot;), (4, &quot;green&quot;) &amp;gt; (4, &quot;green&quot;) Finding the Winner snd returns the second value in a tuple: winner votes = snd . maximum . totals $ votes Applying this satisfies the requirement: &amp;gt; winner [&quot;red&quot;, &quot;blue&quot;, &quot;red&quot;, &quot;red&quot;, &quot;green&quot;] &amp;gt; &quot;red&quot; Alternative Vote Example In the alternative vote system, voters rank the candidates: In each round, the candidate with the least number of first preference votes is eliminated. The winner is the last candidate left once all other have been eliminated. &amp;gt; let votes = [[&quot;red&quot;, &quot;blue&quot;, &quot;green&quot;], [&quot;blue&quot;, &quot;green&quot;], [&quot;green&quot;, &quot;red&quot;], [&quot;blue&quot;, &quot;red&quot;], [&quot;red&quot;]] &amp;gt; av_winner votes &amp;gt; &quot;red&quot; You don’t need many preferences and each list is a single person’s preferences. See the slides for full examples. Ranking the Candidates sort sorts all of the items in a list and orders them from smallest to biggest. Getting the First Choice Votes head doesn’t accept empty lists as input. This should be taken into account when removing items from lists unevenly. Final Function All of the components give this function: av_winner votes = let ranked = rank_candidates votes first = head ranked in if length ranked == 1 then first else av_winner (remove_cand first votes)</summary></entry><entry><title type="html">COMP111 - Conditional Probability</title><link href="http://localhost:4000/UoL/comp111/lectures/2020/11/19/1.html" rel="alternate" type="text/html" title="COMP111 - Conditional Probability" /><published>2020-11-19T00:00:00+00:00</published><updated>2020-11-19T00:00:00+00:00</updated><id>http://localhost:4000/UoL/comp111/lectures/2020/11/19/1</id><content type="html" xml:base="http://localhost:4000/UoL/comp111/lectures/2020/11/19/1.html">&lt;p&gt;Often we are interested in just part of the sample space. Conditional probability gives us a means of handling this situation.&lt;/p&gt;

&lt;h2 id=&quot;example&quot;&gt;Example&lt;/h2&gt;
&lt;p&gt;Consider a family chosen at random from a set of families having two children (but not having twins). What is the probability that both children are boys?&lt;/p&gt;

&lt;p&gt;A suitable sample space $S={BB,GB,BG,GG}$.&lt;/p&gt;

&lt;p&gt;It is reasonable to assume that $P(x)=\frac{1}{4}$ for all $x\in S$.&lt;/p&gt;

&lt;p&gt;Thus $P(BB)=\frac{1}{4}$.&lt;/p&gt;

&lt;p&gt;Now you learn that the families were selected from those who have one child at a boys’ school. Does this change probabilities.&lt;/p&gt;

&lt;p&gt;The new sample space $S’={BB,GB,BG}$ and we re now looking for $P(BB\vert \text{at least one boy})+P(BB\vert S’)$&lt;/p&gt;

&lt;p&gt;The vertical line is read &lt;strong&gt;given that&lt;/strong&gt;.&lt;/p&gt;

&lt;h3 id=&quot;normalisation&quot;&gt;Normalisation&lt;/h3&gt;
&lt;p&gt;$S’$ is a subset of $S$, so every outcome $x$ in $S’$ is also in $S$. It probability $P(x)\in S$ we can determine.&lt;/p&gt;

&lt;p&gt;However, if we just take the sum of these probabilities, they will sum to less than 1.&lt;/p&gt;

&lt;p&gt;We therefore &lt;strong&gt;normalise&lt;/strong&gt; by dividing the probability $P(x)$ of the outcome $x$ in $S$ by the probability $P(S’)$ of $S’$ in $S$:&lt;/p&gt;

\[P(BB\vert \text{at least one boy})=P(BB\vert S')=\frac{P(BB)}{P(S')}=\frac{\frac{1}{4}}{\frac{3}{4}}=\frac{1}{3}\]

&lt;h2 id=&quot;conditioning&quot;&gt;Conditioning&lt;/h2&gt;
&lt;p&gt;Assume now that evens $A$ and $B$ are given.&lt;/p&gt;

&lt;p&gt;Assume we know that $B$ happens. So we want to condition on $B$. Thus, we want to know:&lt;/p&gt;

\[P(A\vert B)\]

&lt;p&gt;This is the probability that $A$ occurs given that $B$ is know to occur.&lt;/p&gt;

&lt;p&gt;So we want to know the probability $P(A\cap B)$. (as we know that $B$ occurs) after the conditioning on $B$.&lt;/p&gt;

&lt;p&gt;We cant take $P(A\cap B)$ itself but have to normalise by dividing by the probability of the new sample space $P(B)$:&lt;/p&gt;

\[P(A\vert B)=\frac{P(A\cap B)}{P(B)}\]

&lt;h3 id=&quot;formalised&quot;&gt;Formalised&lt;/h3&gt;
&lt;p&gt;Let $A$ and $B$ be events, with $P(B)&amp;gt;0.&lt;/p&gt;

&lt;p&gt;The conditional probability $P(A\vert B)$ of $A$ given $B$ is given by:&lt;/p&gt;

\[P(A\vert B)=\frac{P(A\cap B)}{P(B)}\]

&lt;p class=&quot;info&quot;&gt;View &lt;a href=&quot;/UoL/assets/COMP111/Lectures/2020-11-19.pdf&quot;&gt;slide 27&lt;/a&gt; for additional example.&lt;/p&gt;

&lt;h2 id=&quot;multiplication-rule&quot;&gt;Multiplication Rule&lt;/h2&gt;
&lt;p&gt;We can rewrite the previous equation like so:&lt;/p&gt;

\[P(A\cap B)=P(A\vert B)P(B)\]

&lt;p&gt;Or like:&lt;/p&gt;

\[P(A\cap B)=P(B\vert A)P(A)\]

&lt;p&gt;This rule can also be extended to more events:&lt;/p&gt;

\[P(A\cap B\cap C)=P(C\vert B\cap A)P(A\cap B)=P(C\vert A\cap B)P(B\vert A)P(A)\]

&lt;h3 id=&quot;example-1&quot;&gt;Example&lt;/h3&gt;
&lt;p&gt;Consider a family chosen at random from a set of families with just one pair of twins. What is the probability that both twins are boys?&lt;/p&gt;

&lt;p&gt;Twins  are either identical $I$ or fraternal $F$. We know that a third of human twins are identical:&lt;/p&gt;

\[P(I)=\frac{1}{3},P(F)=\frac{2}{3}\]

&lt;p&gt;and&lt;/p&gt;

\[P(BB)=P(I\cap BB) + P(F\cap BB)\]

&lt;p&gt;By the multiplication rule:&lt;/p&gt;

\[P(I\cap BB)= P(BB\vert I)P(I),\ P(F\cap BB) = P(BB\vert F)P(F)\]

&lt;p&gt;The probability of being a girl of boy for fraternal twins will be the same as for any other two-child family. For the identical twins, the outcomes $BG$ and $GB$ are no longer possible thus:&lt;/p&gt;

\[P(BB\vert I)=\frac{1}{2},\ P(BB\vert F)=\frac{1}{4}\]

&lt;p&gt;From this we obtain:&lt;/p&gt;

&lt;p&gt;$P(BB)=P(I\cap BB) + P(F\cap BB)$&lt;/p&gt;

&lt;p&gt;$=P(BB\vert I)P(I)+ P(BB\vert F)P(F)$&lt;/p&gt;

&lt;p&gt;$=\frac{1}{2}\times\frac{1}{3}+\frac{1}{4}\times\frac{2}{3}$&lt;/p&gt;

&lt;p&gt;$=\frac{1}{3}$&lt;/p&gt;</content><author><name>Ben Weston</name><email>b.weston60@gmail.com</email></author><category term="COMP111" /><category term="Lectures" /><category term="COMP111" /><category term="Lectures" /><summary type="html">Often we are interested in just part of the sample space. Conditional probability gives us a means of handling this situation. Example Consider a family chosen at random from a set of families having two children (but not having twins). What is the probability that both children are boys? A suitable sample space $S={BB,GB,BG,GG}$. It is reasonable to assume that $P(x)=\frac{1}{4}$ for all $x\in S$. Thus $P(BB)=\frac{1}{4}$. Now you learn that the families were selected from those who have one child at a boys’ school. Does this change probabilities. The new sample space $S’={BB,GB,BG}$ and we re now looking for $P(BB\vert \text{at least one boy})+P(BB\vert S’)$ The vertical line is read given that. Normalisation $S’$ is a subset of $S$, so every outcome $x$ in $S’$ is also in $S$. It probability $P(x)\in S$ we can determine. However, if we just take the sum of these probabilities, they will sum to less than 1. We therefore normalise by dividing the probability $P(x)$ of the outcome $x$ in $S$ by the probability $P(S’)$ of $S’$ in $S$: \[P(BB\vert \text{at least one boy})=P(BB\vert S')=\frac{P(BB)}{P(S')}=\frac{\frac{1}{4}}{\frac{3}{4}}=\frac{1}{3}\] Conditioning Assume now that evens $A$ and $B$ are given. Assume we know that $B$ happens. So we want to condition on $B$. Thus, we want to know: \[P(A\vert B)\] This is the probability that $A$ occurs given that $B$ is know to occur. So we want to know the probability $P(A\cap B)$. (as we know that $B$ occurs) after the conditioning on $B$. We cant take $P(A\cap B)$ itself but have to normalise by dividing by the probability of the new sample space $P(B)$: \[P(A\vert B)=\frac{P(A\cap B)}{P(B)}\] Formalised Let $A$ and $B$ be events, with $P(B)&amp;gt;0. The conditional probability $P(A\vert B)$ of $A$ given $B$ is given by: \[P(A\vert B)=\frac{P(A\cap B)}{P(B)}\] View slide 27 for additional example. Multiplication Rule We can rewrite the previous equation like so: \[P(A\cap B)=P(A\vert B)P(B)\] Or like: \[P(A\cap B)=P(B\vert A)P(A)\] This rule can also be extended to more events: \[P(A\cap B\cap C)=P(C\vert B\cap A)P(A\cap B)=P(C\vert A\cap B)P(B\vert A)P(A)\] Example Consider a family chosen at random from a set of families with just one pair of twins. What is the probability that both twins are boys? Twins are either identical $I$ or fraternal $F$. We know that a third of human twins are identical: \[P(I)=\frac{1}{3},P(F)=\frac{2}{3}\] and \[P(BB)=P(I\cap BB) + P(F\cap BB)\] By the multiplication rule: \[P(I\cap BB)= P(BB\vert I)P(I),\ P(F\cap BB) = P(BB\vert F)P(F)\] The probability of being a girl of boy for fraternal twins will be the same as for any other two-child family. For the identical twins, the outcomes $BG$ and $GB$ are no longer possible thus: \[P(BB\vert I)=\frac{1}{2},\ P(BB\vert F)=\frac{1}{4}\] From this we obtain: $P(BB)=P(I\cap BB) + P(F\cap BB)$ $=P(BB\vert I)P(I)+ P(BB\vert F)P(F)$ $=\frac{1}{2}\times\frac{1}{3}+\frac{1}{4}\times\frac{2}{3}$ $=\frac{1}{3}$</summary></entry><entry><title type="html">COMP111 - Independence</title><link href="http://localhost:4000/UoL/comp111/lectures/2020/11/19/2.html" rel="alternate" type="text/html" title="COMP111 - Independence" /><published>2020-11-19T00:00:00+00:00</published><updated>2020-11-19T00:00:00+00:00</updated><id>http://localhost:4000/UoL/comp111/lectures/2020/11/19/2</id><content type="html" xml:base="http://localhost:4000/UoL/comp111/lectures/2020/11/19/2.html">&lt;p&gt;In everyday language we refer to events that have nothing to do with each other as being independent.&lt;/p&gt;

&lt;h2 id=&quot;definition&quot;&gt;Definition&lt;/h2&gt;
&lt;p&gt;Events $A$ and $B$ are independent if:&lt;/p&gt;

\[P(A\cap B)=P(A)\times P(B)\]

&lt;p&gt;If $P(A)\neq 0$ and $P(B)\neq 0$, then the following are equivalent:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;$A$ and $B$ are independent.&lt;/li&gt;
  &lt;li&gt;$P(B)=P(B\vert A)$&lt;/li&gt;
  &lt;li&gt;$P(A)=P(A\vert B)$&lt;/li&gt;
&lt;/ul&gt;

&lt;p class=&quot;info&quot;&gt;See &lt;a href=&quot;/UoL/assets/COMP111/Lectures/2020-11-19.pdf&quot;&gt;slides 31&lt;/a&gt; for additional examples. This covers proving independence using the definition above.&lt;/p&gt;

&lt;h2 id=&quot;independence-for-more-than-two-events&quot;&gt;Independence for More Than Two Events&lt;/h2&gt;
&lt;p&gt;For a finite set of events there are two different types of independence:&lt;/p&gt;

&lt;h3 id=&quot;pairwise-independence&quot;&gt;Pairwise Independence&lt;/h3&gt;
&lt;p&gt;$A_1,\ldots,A_n$ are pairwise independent if every pair of events is independent: for all distinct $k,m$&lt;/p&gt;

\[P(A_m\cap A_k)=P(A_m)P(A_k)\]

&lt;h3 id=&quot;mutual-independence&quot;&gt;Mutual Independence&lt;/h3&gt;
&lt;p&gt;$A_1,\ldots,A_n$ are mutually independent if every event is independent of any intersection of the events: for all distinct $k,m$&lt;/p&gt;

\[P(A_{k1})\times\ldots\times P(A_{k_m})=P(A_{k_1}\cap\ldots\cap A_{k_m})\]

&lt;p&gt;Pairwise independence doesn’t imply pairwise independence. Generally, if it isn’t stated, then we are talking about &lt;strong&gt;mutual independence&lt;/strong&gt;.&lt;/p&gt;

&lt;p class=&quot;info&quot;&gt;To see the proof and example of why pairwise independence does not imply mutual independence see &lt;a href=&quot;/UoL/assets/COMP111/Lectures/2020-11-19.pdf&quot;&gt;slide 37 onward&lt;/a&gt;. This example also shows examples of probability set notation.&lt;/p&gt;</content><author><name>Ben Weston</name><email>b.weston60@gmail.com</email></author><category term="COMP111" /><category term="Lectures" /><category term="COMP111" /><category term="Lectures" /><summary type="html">In everyday language we refer to events that have nothing to do with each other as being independent. Definition Events $A$ and $B$ are independent if: \[P(A\cap B)=P(A)\times P(B)\] If $P(A)\neq 0$ and $P(B)\neq 0$, then the following are equivalent: $A$ and $B$ are independent. $P(B)=P(B\vert A)$ $P(A)=P(A\vert B)$ See slides 31 for additional examples. This covers proving independence using the definition above. Independence for More Than Two Events For a finite set of events there are two different types of independence: Pairwise Independence $A_1,\ldots,A_n$ are pairwise independent if every pair of events is independent: for all distinct $k,m$ \[P(A_m\cap A_k)=P(A_m)P(A_k)\] Mutual Independence $A_1,\ldots,A_n$ are mutually independent if every event is independent of any intersection of the events: for all distinct $k,m$ \[P(A_{k1})\times\ldots\times P(A_{k_m})=P(A_{k_1}\cap\ldots\cap A_{k_m})\] Pairwise independence doesn’t imply pairwise independence. Generally, if it isn’t stated, then we are talking about mutual independence. To see the proof and example of why pairwise independence does not imply mutual independence see slide 37 onward. This example also shows examples of probability set notation.</summary></entry></feed>